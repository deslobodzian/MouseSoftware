
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	40 29 00 20 3d 3c 00 00 e3 b4 00 00 11 3c 00 00     @). =<.......<..
  10:	11 3c 00 00 11 3c 00 00 11 3c 00 00 00 00 00 00     .<...<...<......
	...
  2c:	91 35 00 00 11 3c 00 00 00 00 00 00 3d 35 00 00     .5...<......=5..
  3c:	11 3c 00 00                                         .<..

00000040 <_irq_vector_table>:
  40:	41 36 00 00 d1 65 00 00 41 36 00 00 41 36 00 00     A6...e..A6..A6..
  50:	41 36 00 00 41 36 00 00 41 36 00 00 41 36 00 00     A6..A6..A6..A6..
  60:	41 36 00 00 41 36 00 00 4b ba 00 00 41 36 00 00     A6..A6..K...A6..
  70:	41 36 00 00 41 36 00 00 41 36 00 00 41 36 00 00     A6..A6..A6..A6..
  80:	41 36 00 00 41 36 00 00 41 36 00 00 41 36 00 00     A6..A6..A6..A6..
  90:	41 66 00 00 41 36 00 00 41 36 00 00 41 36 00 00     Af..A6..A6..A6..
  a0:	41 36 00 00 41 36 00 00 41 36 00 00 41 36 00 00     A6..A6..A6..A6..
  b0:	41 36 00 00 41 36 00 00 41 36 00 00 41 36 00 00     A6..A6..A6..A6..
  c0:	41 36 00 00 41 36 00 00 41 36 00 00 41 36 00 00     A6..A6..A6..A6..
  d0:	41 36 00 00 41 36 00 00 41 36 00 00 41 36 00 00     A6..A6..A6..A6..

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295
      f0:	f04f 30ff 	movne.w	r0, #4294967295
      f4:	f000 b80c 	b.w	110 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f000 f808 	bl	114 <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__aeabi_idiv0>:
     110:	4770      	bx	lr
     112:	bf00      	nop

00000114 <__udivmoddi4>:
     114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     118:	4607      	mov	r7, r0
     11a:	468c      	mov	ip, r1
     11c:	4608      	mov	r0, r1
     11e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     120:	4615      	mov	r5, r2
     122:	463c      	mov	r4, r7
     124:	4619      	mov	r1, r3
     126:	2b00      	cmp	r3, #0
     128:	f040 80c6 	bne.w	2b8 <CONFIG_USB_DEVICE_PID+0x98>
     12c:	4282      	cmp	r2, r0
     12e:	fab2 f782 	clz	r7, r2
     132:	d946      	bls.n	1c2 <CONFIG_PMW3360_CPI+0x32>
     134:	b14f      	cbz	r7, 14a <__udivmoddi4+0x36>
     136:	f1c7 0e20 	rsb	lr, r7, #32
     13a:	fa24 fe0e 	lsr.w	lr, r4, lr
     13e:	fa00 f307 	lsl.w	r3, r0, r7
     142:	40bd      	lsls	r5, r7
     144:	ea4e 0c03 	orr.w	ip, lr, r3
     148:	40bc      	lsls	r4, r7
     14a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     14e:	fa1f fe85 	uxth.w	lr, r5
     152:	fbbc f9f8 	udiv	r9, ip, r8
     156:	0c22      	lsrs	r2, r4, #16
     158:	fb08 c319 	mls	r3, r8, r9, ip
     15c:	fb09 fa0e 	mul.w	sl, r9, lr
     160:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     164:	459a      	cmp	sl, r3
     166:	d928      	bls.n	1ba <CONFIG_PMW3360_CPI+0x2a>
     168:	18eb      	adds	r3, r5, r3
     16a:	f109 30ff 	add.w	r0, r9, #4294967295
     16e:	d204      	bcs.n	17a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd>
     170:	459a      	cmp	sl, r3
     172:	d902      	bls.n	17a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd>
     174:	f1a9 0002 	sub.w	r0, r9, #2
     178:	442b      	add	r3, r5
     17a:	eba3 030a 	sub.w	r3, r3, sl
     17e:	b2a4      	uxth	r4, r4
     180:	fbb3 f2f8 	udiv	r2, r3, r8
     184:	fb08 3312 	mls	r3, r8, r2, r3
     188:	fb02 fe0e 	mul.w	lr, r2, lr
     18c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     190:	45a6      	cmp	lr, r4
     192:	d914      	bls.n	1be <CONFIG_PMW3360_CPI+0x2e>
     194:	192c      	adds	r4, r5, r4
     196:	f102 33ff 	add.w	r3, r2, #4294967295
     19a:	d203      	bcs.n	1a4 <CONFIG_PMW3360_CPI+0x14>
     19c:	45a6      	cmp	lr, r4
     19e:	d901      	bls.n	1a4 <CONFIG_PMW3360_CPI+0x14>
     1a0:	1e93      	subs	r3, r2, #2
     1a2:	442c      	add	r4, r5
     1a4:	eba4 040e 	sub.w	r4, r4, lr
     1a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1ac:	b11e      	cbz	r6, 1b6 <CONFIG_PMW3360_CPI+0x26>
     1ae:	40fc      	lsrs	r4, r7
     1b0:	2300      	movs	r3, #0
     1b2:	6034      	str	r4, [r6, #0]
     1b4:	6073      	str	r3, [r6, #4]
     1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1ba:	4648      	mov	r0, r9
     1bc:	e7dd      	b.n	17a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd>
     1be:	4613      	mov	r3, r2
     1c0:	e7f0      	b.n	1a4 <CONFIG_PMW3360_CPI+0x14>
     1c2:	b902      	cbnz	r2, 1c6 <CONFIG_PMW3360_CPI+0x36>
     1c4:	deff      	udf	#255	; 0xff
     1c6:	bb87      	cbnz	r7, 22a <CONFIG_USB_DEVICE_PID+0xa>
     1c8:	1a83      	subs	r3, r0, r2
     1ca:	2101      	movs	r1, #1
     1cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1d0:	b2aa      	uxth	r2, r5
     1d2:	fbb3 fcfe 	udiv	ip, r3, lr
     1d6:	0c20      	lsrs	r0, r4, #16
     1d8:	fb0e 331c 	mls	r3, lr, ip, r3
     1dc:	fb0c f802 	mul.w	r8, ip, r2
     1e0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1e4:	4598      	cmp	r8, r3
     1e6:	d963      	bls.n	2b0 <CONFIG_USB_DEVICE_PID+0x90>
     1e8:	18eb      	adds	r3, r5, r3
     1ea:	f10c 30ff 	add.w	r0, ip, #4294967295
     1ee:	d204      	bcs.n	1fa <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6>
     1f0:	4598      	cmp	r8, r3
     1f2:	d902      	bls.n	1fa <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6>
     1f4:	f1ac 0002 	sub.w	r0, ip, #2
     1f8:	442b      	add	r3, r5
     1fa:	eba3 0308 	sub.w	r3, r3, r8
     1fe:	b2a4      	uxth	r4, r4
     200:	fbb3 fcfe 	udiv	ip, r3, lr
     204:	fb0e 331c 	mls	r3, lr, ip, r3
     208:	fb0c f202 	mul.w	r2, ip, r2
     20c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     210:	42a2      	cmp	r2, r4
     212:	d94f      	bls.n	2b4 <CONFIG_USB_DEVICE_PID+0x94>
     214:	192c      	adds	r4, r5, r4
     216:	f10c 33ff 	add.w	r3, ip, #4294967295
     21a:	d204      	bcs.n	226 <CONFIG_USB_DEVICE_PID+0x6>
     21c:	42a2      	cmp	r2, r4
     21e:	d902      	bls.n	226 <CONFIG_USB_DEVICE_PID+0x6>
     220:	f1ac 0302 	sub.w	r3, ip, #2
     224:	442c      	add	r4, r5
     226:	1aa4      	subs	r4, r4, r2
     228:	e7be      	b.n	1a8 <CONFIG_PMW3360_CPI+0x18>
     22a:	f1c7 0c20 	rsb	ip, r7, #32
     22e:	fa20 f80c 	lsr.w	r8, r0, ip
     232:	fa00 f307 	lsl.w	r3, r0, r7
     236:	fa24 fc0c 	lsr.w	ip, r4, ip
     23a:	40bd      	lsls	r5, r7
     23c:	ea4c 0203 	orr.w	r2, ip, r3
     240:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     244:	b2ab      	uxth	r3, r5
     246:	fbb8 fcfe 	udiv	ip, r8, lr
     24a:	0c11      	lsrs	r1, r2, #16
     24c:	fb0e 801c 	mls	r0, lr, ip, r8
     250:	fb0c f903 	mul.w	r9, ip, r3
     254:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     258:	4581      	cmp	r9, r0
     25a:	fa04 f407 	lsl.w	r4, r4, r7
     25e:	d923      	bls.n	2a8 <CONFIG_USB_DEVICE_PID+0x88>
     260:	1828      	adds	r0, r5, r0
     262:	f10c 31ff 	add.w	r1, ip, #4294967295
     266:	d204      	bcs.n	272 <CONFIG_USB_DEVICE_PID+0x52>
     268:	4581      	cmp	r9, r0
     26a:	d902      	bls.n	272 <CONFIG_USB_DEVICE_PID+0x52>
     26c:	f1ac 0102 	sub.w	r1, ip, #2
     270:	4428      	add	r0, r5
     272:	eba0 0009 	sub.w	r0, r0, r9
     276:	b292      	uxth	r2, r2
     278:	fbb0 fcfe 	udiv	ip, r0, lr
     27c:	fb0e 001c 	mls	r0, lr, ip, r0
     280:	fb0c f803 	mul.w	r8, ip, r3
     284:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     288:	4598      	cmp	r8, r3
     28a:	d90f      	bls.n	2ac <CONFIG_USB_DEVICE_PID+0x8c>
     28c:	18eb      	adds	r3, r5, r3
     28e:	f10c 32ff 	add.w	r2, ip, #4294967295
     292:	d204      	bcs.n	29e <CONFIG_USB_DEVICE_PID+0x7e>
     294:	4598      	cmp	r8, r3
     296:	d902      	bls.n	29e <CONFIG_USB_DEVICE_PID+0x7e>
     298:	f1ac 0202 	sub.w	r2, ip, #2
     29c:	442b      	add	r3, r5
     29e:	eba3 0308 	sub.w	r3, r3, r8
     2a2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2a6:	e791      	b.n	1cc <CONFIG_PMW3360_CPI+0x3c>
     2a8:	4661      	mov	r1, ip
     2aa:	e7e2      	b.n	272 <CONFIG_USB_DEVICE_PID+0x52>
     2ac:	4662      	mov	r2, ip
     2ae:	e7f6      	b.n	29e <CONFIG_USB_DEVICE_PID+0x7e>
     2b0:	4660      	mov	r0, ip
     2b2:	e7a2      	b.n	1fa <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6>
     2b4:	4663      	mov	r3, ip
     2b6:	e7b6      	b.n	226 <CONFIG_USB_DEVICE_PID+0x6>
     2b8:	4283      	cmp	r3, r0
     2ba:	d905      	bls.n	2c8 <CONFIG_USB_DEVICE_PID+0xa8>
     2bc:	b10e      	cbz	r6, 2c2 <CONFIG_USB_DEVICE_PID+0xa2>
     2be:	e9c6 7000 	strd	r7, r0, [r6]
     2c2:	2100      	movs	r1, #0
     2c4:	4608      	mov	r0, r1
     2c6:	e776      	b.n	1b6 <CONFIG_PMW3360_CPI+0x26>
     2c8:	fab3 f183 	clz	r1, r3
     2cc:	b981      	cbnz	r1, 2f0 <CONFIG_USB_DEVICE_PID+0xd0>
     2ce:	4283      	cmp	r3, r0
     2d0:	d301      	bcc.n	2d6 <CONFIG_USB_DEVICE_PID+0xb6>
     2d2:	42ba      	cmp	r2, r7
     2d4:	d80a      	bhi.n	2ec <CONFIG_USB_DEVICE_PID+0xcc>
     2d6:	1abc      	subs	r4, r7, r2
     2d8:	eb60 0303 	sbc.w	r3, r0, r3
     2dc:	2001      	movs	r0, #1
     2de:	469c      	mov	ip, r3
     2e0:	2e00      	cmp	r6, #0
     2e2:	d068      	beq.n	3b6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb6>
     2e4:	e9c6 4c00 	strd	r4, ip, [r6]
     2e8:	2100      	movs	r1, #0
     2ea:	e764      	b.n	1b6 <CONFIG_PMW3360_CPI+0x26>
     2ec:	4608      	mov	r0, r1
     2ee:	e7f7      	b.n	2e0 <CONFIG_USB_DEVICE_PID+0xc0>
     2f0:	f1c1 0c20 	rsb	ip, r1, #32
     2f4:	408b      	lsls	r3, r1
     2f6:	fa22 f40c 	lsr.w	r4, r2, ip
     2fa:	431c      	orrs	r4, r3
     2fc:	fa02 f501 	lsl.w	r5, r2, r1
     300:	fa00 f301 	lsl.w	r3, r0, r1
     304:	fa27 f20c 	lsr.w	r2, r7, ip
     308:	fa20 fb0c 	lsr.w	fp, r0, ip
     30c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     310:	4313      	orrs	r3, r2
     312:	fbbb f8f9 	udiv	r8, fp, r9
     316:	fa1f fe84 	uxth.w	lr, r4
     31a:	fb09 bb18 	mls	fp, r9, r8, fp
     31e:	0c1a      	lsrs	r2, r3, #16
     320:	fb08 fa0e 	mul.w	sl, r8, lr
     324:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     328:	4592      	cmp	sl, r2
     32a:	fa07 f701 	lsl.w	r7, r7, r1
     32e:	d93e      	bls.n	3ae <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xae>
     330:	18a2      	adds	r2, r4, r2
     332:	f108 30ff 	add.w	r0, r8, #4294967295
     336:	d204      	bcs.n	342 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x42>
     338:	4592      	cmp	sl, r2
     33a:	d902      	bls.n	342 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x42>
     33c:	f1a8 0002 	sub.w	r0, r8, #2
     340:	4422      	add	r2, r4
     342:	eba2 020a 	sub.w	r2, r2, sl
     346:	b29b      	uxth	r3, r3
     348:	fbb2 f8f9 	udiv	r8, r2, r9
     34c:	fb09 2218 	mls	r2, r9, r8, r2
     350:	fb08 fe0e 	mul.w	lr, r8, lr
     354:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     358:	4596      	cmp	lr, r2
     35a:	d92a      	bls.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     35c:	18a2      	adds	r2, r4, r2
     35e:	f108 33ff 	add.w	r3, r8, #4294967295
     362:	d204      	bcs.n	36e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6e>
     364:	4596      	cmp	lr, r2
     366:	d902      	bls.n	36e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6e>
     368:	f1a8 0302 	sub.w	r3, r8, #2
     36c:	4422      	add	r2, r4
     36e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     372:	fba0 9305 	umull	r9, r3, r0, r5
     376:	eba2 020e 	sub.w	r2, r2, lr
     37a:	429a      	cmp	r2, r3
     37c:	46ce      	mov	lr, r9
     37e:	4698      	mov	r8, r3
     380:	d302      	bcc.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>
     382:	d106      	bne.n	392 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x92>
     384:	454f      	cmp	r7, r9
     386:	d204      	bcs.n	392 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x92>
     388:	ebb9 0e05 	subs.w	lr, r9, r5
     38c:	eb63 0804 	sbc.w	r8, r3, r4
     390:	3801      	subs	r0, #1
     392:	b186      	cbz	r6, 3b6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb6>
     394:	ebb7 030e 	subs.w	r3, r7, lr
     398:	eb62 0708 	sbc.w	r7, r2, r8
     39c:	fa07 fc0c 	lsl.w	ip, r7, ip
     3a0:	40cb      	lsrs	r3, r1
     3a2:	ea4c 0303 	orr.w	r3, ip, r3
     3a6:	40cf      	lsrs	r7, r1
     3a8:	e9c6 3700 	strd	r3, r7, [r6]
     3ac:	e79c      	b.n	2e8 <CONFIG_USB_DEVICE_PID+0xc8>
     3ae:	4640      	mov	r0, r8
     3b0:	e7c7      	b.n	342 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x42>
     3b2:	4643      	mov	r3, r8
     3b4:	e7db      	b.n	36e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6e>
     3b6:	4631      	mov	r1, r6
     3b8:	e6fd      	b.n	1b6 <CONFIG_PMW3360_CPI+0x26>
	...

000003bc <configure_callback.constprop.0>:
    //     button_states = states;
    // }
    // k_sem_give(&button_sem);
}

static void configure_callback(const struct gpio_dt_spec *spec, gpio_callback_handler_t handler, struct gpio_callback *cb) {
     3bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    const struct device *gpio = spec->port;
     3c0:	6805      	ldr	r5, [r0, #0]
	gpio_pin_t pin = spec->pin;
     3c2:	7904      	ldrb	r4, [r0, #4]
static void configure_callback(const struct gpio_dt_spec *spec, gpio_callback_handler_t handler, struct gpio_callback *cb) {
     3c4:	af00      	add	r7, sp, #0
     3c6:	4606      	mov	r6, r0
     3c8:	4688      	mov	r8, r1
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     3ca:	4628      	mov	r0, r5
     3cc:	f00b fd43 	bl	be56 <z_device_is_ready>
	int ret;
	if (gpio == NULL) {
		/* Optional GPIO is missing. */
		// return 0;
	}
	if (!device_is_ready(gpio)) {
     3d0:	4603      	mov	r3, r0
     3d2:	b988      	cbnz	r0, 3f8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x10>
		LOG_ERR("GPIO port %s is not ready", gpio->name);
     3d4:	6829      	ldr	r1, [r5, #0]
     3d6:	4853      	ldr	r0, [pc, #332]	; (524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>)
     3d8:	46e9      	mov	r9, sp
     3da:	b088      	sub	sp, #32
     3dc:	466a      	mov	r2, sp
     3de:	e9c2 0105 	strd	r0, r1, [r2, #20]
     3e2:	2102      	movs	r1, #2
     3e4:	7711      	strb	r1, [r2, #28]
     3e6:	4950      	ldr	r1, [pc, #320]	; (528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>)
     3e8:	f842 1f10 	str.w	r1, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
     3ec:	484f      	ldr	r0, [pc, #316]	; (52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>)
     3ee:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
     3f2:	f00a ffe1 	bl	b3b8 <z_impl_z_log_msg2_static_create>
     3f6:	46cd      	mov	sp, r9
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
				  spec->pin,
				  spec->dt_flags | extra_flags);
     3f8:	f8b6 a006 	ldrh.w	sl, [r6, #6]
	return gpio_pin_configure(spec->port,
     3fc:	6830      	ldr	r0, [r6, #0]
     3fe:	7931      	ldrb	r1, [r6, #4]
     400:	f44a 3280 	orr.w	r2, sl, #65536	; 0x10000
	struct gpio_driver_data *data =
     404:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
     408:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
     40c:	2301      	movs	r3, #1
     40e:	fa03 fc01 	lsl.w	ip, r3, r1
     412:	f8de 3000 	ldr.w	r3, [lr]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
     416:	f01a 0f01 	tst.w	sl, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
     41a:	bf14      	ite	ne
     41c:	ea4c 0303 	orrne.w	r3, ip, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     420:	ea23 030c 	biceq.w	r3, r3, ip
     424:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
     428:	f8d9 3000 	ldr.w	r3, [r9]
     42c:	4798      	blx	r3
		// return -ENODEV;
	}
	ret = gpio_pin_configure_dt(spec, GPIO_INPUT);
	if (ret < 0) {
     42e:	2800      	cmp	r0, #0
     430:	da15      	bge.n	45e <CONFIG_LOG_BUFFER_SIZE+0x5e>
		LOG_ERR("Failed to configure port %s pin %u, error: %d",
     432:	682b      	ldr	r3, [r5, #0]
     434:	493e      	ldr	r1, [pc, #248]	; (530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>)
     436:	46e9      	mov	r9, sp
     438:	b08a      	sub	sp, #40	; 0x28
     43a:	466a      	mov	r2, sp
     43c:	e9c2 1305 	strd	r1, r3, [r2, #20]
     440:	2302      	movs	r3, #2
     442:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
     446:	4b3b      	ldr	r3, [pc, #236]	; (534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>)
     448:	e9c2 4007 	strd	r4, r0, [r2, #28]
     44c:	f842 3f10 	str.w	r3, [r2, #16]!
     450:	4836      	ldr	r0, [pc, #216]	; (52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>)
     452:	2300      	movs	r3, #0
     454:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
     458:	f00a ffae 	bl	b3b8 <z_impl_z_log_msg2_static_create>
     45c:	46cd      	mov	sp, r9
			gpio->name, pin, ret);
		// return ret;
	}
	ret = gpio_pin_get(gpio, pin);
     45e:	4621      	mov	r1, r4
     460:	4628      	mov	r0, r5
     462:	f00a f95f 	bl	a724 <gpio_pin_get>
	if (ret < 0) {
     466:	2800      	cmp	r0, #0
     468:	da15      	bge.n	496 <CONFIG_LOG_BUFFER_SIZE+0x96>
		LOG_ERR("Failed to get the state of port %s pin %u, error: %d",
     46a:	682b      	ldr	r3, [r5, #0]
     46c:	4932      	ldr	r1, [pc, #200]	; (538 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x50>)
     46e:	46e9      	mov	r9, sp
     470:	b08a      	sub	sp, #40	; 0x28
     472:	466a      	mov	r2, sp
     474:	e9c2 1305 	strd	r1, r3, [r2, #20]
     478:	2302      	movs	r3, #2
     47a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
     47e:	4b2d      	ldr	r3, [pc, #180]	; (534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>)
     480:	e9c2 4007 	strd	r4, r0, [r2, #28]
     484:	f842 3f10 	str.w	r3, [r2, #16]!
     488:	4828      	ldr	r0, [pc, #160]	; (52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>)
     48a:	2300      	movs	r3, #0
     48c:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
     490:	f00a ff92 	bl	b3b8 <z_impl_z_log_msg2_static_create>
     494:	46cd      	mov	sp, r9
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     496:	4b29      	ldr	r3, [pc, #164]	; (53c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x54>)
     498:	f8c8 3004 	str.w	r3, [r8, #4]
			gpio->name, pin, ret);
		// return ret;
	}

	gpio_init_callback(cb, button_callback, BIT(pin));
     49c:	2201      	movs	r2, #1
     49e:	fa02 f304 	lsl.w	r3, r2, r4
	callback->pin_mask = pin_mask;
     4a2:	f8c8 3008 	str.w	r3, [r8, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
     4a6:	68ab      	ldr	r3, [r5, #8]
     4a8:	69db      	ldr	r3, [r3, #28]
     4aa:	b113      	cbz	r3, 4b2 <CONFIG_LOG_BUFFER_SIZE+0xb2>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     4ac:	4641      	mov	r1, r8
     4ae:	4628      	mov	r0, r5
     4b0:	4798      	blx	r3
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
     4b2:	6830      	ldr	r0, [r6, #0]
     4b4:	7931      	ldrb	r1, [r6, #4]
	return api->pin_interrupt_configure(port, pin, mode, trig);
     4b6:	6883      	ldr	r3, [r0, #8]
     4b8:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
     4bc:	699e      	ldr	r6, [r3, #24]
     4be:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
     4c2:	47b0      	blx	r6
	ret = gpio_add_callback(gpio, cb);
	
	ret = gpio_pin_interrupt_configure_dt(spec, GPIO_INT_EDGE_BOTH);
	if (ret < 0) {
     4c4:	2800      	cmp	r0, #0
     4c6:	da15      	bge.n	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
		LOG_ERR("Failed to configure interrupt for port %s pin %u, "
     4c8:	682b      	ldr	r3, [r5, #0]
     4ca:	491d      	ldr	r1, [pc, #116]	; (540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>)
     4cc:	466e      	mov	r6, sp
     4ce:	b08a      	sub	sp, #40	; 0x28
     4d0:	466a      	mov	r2, sp
     4d2:	e9c2 1305 	strd	r1, r3, [r2, #20]
     4d6:	2302      	movs	r3, #2
     4d8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
     4dc:	4b15      	ldr	r3, [pc, #84]	; (534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>)
     4de:	e9c2 4007 	strd	r4, r0, [r2, #28]
     4e2:	f842 3f10 	str.w	r3, [r2, #16]!
     4e6:	4811      	ldr	r0, [pc, #68]	; (52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>)
     4e8:	2300      	movs	r3, #0
     4ea:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
     4ee:	f00a ff63 	bl	b3b8 <z_impl_z_log_msg2_static_create>
     4f2:	46b5      	mov	sp, r6
			"error: %d",
			gpio->name, pin, ret);
		// return ret;
	}

    LOG_DBG("Set up button at %s pin %d", gpio->name, pin);
     4f4:	b08a      	sub	sp, #40	; 0x28
     4f6:	466a      	mov	r2, sp
     4f8:	4912      	ldr	r1, [pc, #72]	; (544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>)
     4fa:	682b      	ldr	r3, [r5, #0]
     4fc:	6151      	str	r1, [r2, #20]
     4fe:	4912      	ldr	r1, [pc, #72]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     500:	6214      	str	r4, [r2, #32]
     502:	e9c2 1306 	strd	r1, r3, [r2, #24]
     506:	2303      	movs	r3, #3
     508:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
     50c:	4b09      	ldr	r3, [pc, #36]	; (534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>)
     50e:	f842 3f10 	str.w	r3, [r2, #16]!
     512:	4806      	ldr	r0, [pc, #24]	; (52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>)
     514:	2300      	movs	r3, #0
     516:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
     51a:	f00a ff4d 	bl	b3b8 <z_impl_z_log_msg2_static_create>
	// return 0;
}
     51e:	46bd      	mov	sp, r7
     520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     524:	0000cb84 	.word	0x0000cb84
     528:	01000003 	.word	0x01000003
     52c:	0000c788 	.word	0x0000c788
     530:	0000cb9e 	.word	0x0000cb9e
     534:	01000005 	.word	0x01000005
     538:	0000cbcc 	.word	0x0000cbcc
     53c:	0000a755 	.word	0x0000a755
     540:	0000cc01 	.word	0x0000cc01
     544:	0000cc3d 	.word	0x0000cc3d
     548:	0000cc64 	.word	0x0000cc64

0000054c <init_buttons>:
bool init_buttons(void) {
     54c:	b510      	push	{r4, lr}
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     54e:	2201      	movs	r2, #1
    configure_callback(&mouse_one, button_callback, &callbacks[0]);
     550:	4c0e      	ldr	r4, [pc, #56]	; (58c <init_buttons+0x40>)
     552:	480f      	ldr	r0, [pc, #60]	; (590 <init_buttons+0x44>)
     554:	4611      	mov	r1, r2
     556:	f00b fd4f 	bl	bff8 <z_impl_k_sem_init>
     55a:	4621      	mov	r1, r4
     55c:	480d      	ldr	r0, [pc, #52]	; (594 <init_buttons+0x48>)
     55e:	f7ff ff2d 	bl	3bc <configure_callback.constprop.0>
    configure_callback(&mouse_two, button_callback, &callbacks[1]);
     562:	f104 010c 	add.w	r1, r4, #12
     566:	480c      	ldr	r0, [pc, #48]	; (598 <init_buttons+0x4c>)
     568:	f7ff ff28 	bl	3bc <configure_callback.constprop.0>
    configure_callback(&mouse_three, button_callback, &callbacks[2]);
     56c:	f104 0118 	add.w	r1, r4, #24
     570:	480a      	ldr	r0, [pc, #40]	; (59c <init_buttons+0x50>)
     572:	f7ff ff23 	bl	3bc <configure_callback.constprop.0>
    configure_callback(&mouse_four, button_callback, &callbacks[3]);
     576:	f104 0124 	add.w	r1, r4, #36	; 0x24
     57a:	4809      	ldr	r0, [pc, #36]	; (5a0 <init_buttons+0x54>)
     57c:	f7ff ff1e 	bl	3bc <configure_callback.constprop.0>
    configure_callback(&mouse_five, button_callback, &callbacks[4]);
     580:	4808      	ldr	r0, [pc, #32]	; (5a4 <init_buttons+0x58>)
     582:	f104 0130 	add.w	r1, r4, #48	; 0x30
     586:	f7ff ff19 	bl	3bc <configure_callback.constprop.0>
}
     58a:	bd10      	pop	{r4, pc}
     58c:	20000a00 	.word	0x20000a00
     590:	200009f0 	.word	0x200009f0
     594:	0000c898 	.word	0x0000c898
     598:	0000c8a8 	.word	0x0000c8a8
     59c:	0000c8a0 	.word	0x0000c8a0
     5a0:	0000c890 	.word	0x0000c890
     5a4:	0000c888 	.word	0x0000c888

000005a8 <fetch_buttons>:

void fetch_buttons(uint8_t* button_array) {
     5a8:	b510      	push	{r4, lr}
     5aa:	4604      	mov	r4, r0
    button_array[0] = gpio_pin_get_dt(&mouse_one);
     5ac:	480a      	ldr	r0, [pc, #40]	; (5d8 <fetch_buttons+0x30>)
     5ae:	f00a f8cd 	bl	a74c <gpio_pin_get_dt>
     5b2:	7020      	strb	r0, [r4, #0]
    button_array[1] = gpio_pin_get_dt(&mouse_two);
     5b4:	4809      	ldr	r0, [pc, #36]	; (5dc <fetch_buttons+0x34>)
     5b6:	f00a f8c9 	bl	a74c <gpio_pin_get_dt>
     5ba:	7060      	strb	r0, [r4, #1]
    button_array[2] = gpio_pin_get_dt(&mouse_three);
     5bc:	4808      	ldr	r0, [pc, #32]	; (5e0 <fetch_buttons+0x38>)
     5be:	f00a f8c5 	bl	a74c <gpio_pin_get_dt>
     5c2:	70a0      	strb	r0, [r4, #2]
    button_array[3] = gpio_pin_get_dt(&mouse_four);
     5c4:	4807      	ldr	r0, [pc, #28]	; (5e4 <fetch_buttons+0x3c>)
     5c6:	f00a f8c1 	bl	a74c <gpio_pin_get_dt>
     5ca:	70e0      	strb	r0, [r4, #3]
    button_array[4] = gpio_pin_get_dt(&mouse_five);
     5cc:	4806      	ldr	r0, [pc, #24]	; (5e8 <fetch_buttons+0x40>)
     5ce:	f00a f8bd 	bl	a74c <gpio_pin_get_dt>
     5d2:	7120      	strb	r0, [r4, #4]
}
     5d4:	bd10      	pop	{r4, pc}
     5d6:	bf00      	nop
     5d8:	0000c898 	.word	0x0000c898
     5dc:	0000c8a8 	.word	0x0000c8a8
     5e0:	0000c8a0 	.word	0x0000c8a0
     5e4:	0000c890 	.word	0x0000c890
     5e8:	0000c888 	.word	0x0000c888

000005ec <main>:

LOG_MODULE_REGISTER(main, CONFIG_LOG_DEFAULT_LEVEL);

static struct k_timer timer;

void main(void) {
     5ec:	b590      	push	{r4, r7, lr}
     5ee:	b085      	sub	sp, #20

	uint32_t start;
	uint32_t stop;
	uint32_t dur;
	uint32_t nano;
	LOG_DBG("Starting mouse");
     5f0:	466c      	mov	r4, sp
void main(void) {
     5f2:	af00      	add	r7, sp, #0
	LOG_DBG("Starting mouse");
     5f4:	b088      	sub	sp, #32
     5f6:	466a      	mov	r2, sp
     5f8:	4b20      	ldr	r3, [pc, #128]	; (67c <main+0x90>)
     5fa:	6153      	str	r3, [r2, #20]
     5fc:	4b20      	ldr	r3, [pc, #128]	; (680 <main+0x94>)
     5fe:	6193      	str	r3, [r2, #24]
     600:	2303      	movs	r3, #3
     602:	f842 3f10 	str.w	r3, [r2, #16]!
     606:	2300      	movs	r3, #0
     608:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
     60c:	481d      	ldr	r0, [pc, #116]	; (684 <main+0x98>)
     60e:	f00a fed3 	bl	b3b8 <z_impl_z_log_msg2_static_create>
     612:	46a5      	mov	sp, r4
	init_buttons();
     614:	f7ff ff9a 	bl	54c <init_buttons>
	if (!is_sensor_ready()) {
     618:	f000 f836 	bl	688 <is_sensor_ready>
     61c:	b920      	cbnz	r0, 628 <main+0x3c>
	return z_impl_k_sleep(timeout);
     61e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     622:	2100      	movs	r1, #0
     624:	f009 fdd2 	bl	a1cc <z_impl_k_sleep>
		// sleep for 1 second to wait for sensor.
		k_sleep(K_MSEC(1000));
	}
	if (!configure_sensor()) {
     628:	f00a f895 	bl	a756 <configure_sensor>
     62c:	b318      	cbz	r0, 676 <main+0x8a>
		return;
	}
	init_usb();
     62e:	f000 f873 	bl	718 <init_usb>
     632:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     636:	2100      	movs	r1, #0
     638:	f009 fdc8 	bl	a1cc <z_impl_k_sleep>
     63c:	2100      	movs	r1, #0
     63e:	2017      	movs	r0, #23
     640:	f009 fdc4 	bl	a1cc <z_impl_k_sleep>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
     644:	f00b f96e 	bl	b924 <sys_clock_cycle_get_32>
	// init_task(mouse_function);
	// set_period_ms(1);
	for (;;) {
		k_sleep(K_USEC(700));
		start = k_cycle_get_32();
		motion_info_t motion = read_motion();
     648:	f000 f83a 	bl	6c0 <read_motion>
     64c:	6078      	str	r0, [r7, #4]
		wheel_data_t wheel = fetch_wheel_data();
     64e:	f000 f8b3 	bl	7b8 <fetch_wheel_data>
     652:	4604      	mov	r4, r0
		fetch_buttons(&button_states);
     654:	f107 0008 	add.w	r0, r7, #8
     658:	f7ff ffa6 	bl	5a8 <fetch_buttons>
		//  	button_states[3],
		//  	button_states[4]
		// );
		// get_state(&button_states);
		// LOG_DBG("Button state: %i", button_states);
		hid_write(&button_states, wheel.rotation, motion.dx, -motion.dy);
     65c:	88fb      	ldrh	r3, [r7, #6]
     65e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
     662:	425b      	negs	r3, r3
     664:	b21b      	sxth	r3, r3
     666:	b221      	sxth	r1, r4
     668:	f107 0008 	add.w	r0, r7, #8
     66c:	f000 f874 	bl	758 <hid_write>
     670:	f00b f958 	bl	b924 <sys_clock_cycle_get_32>
	for (;;) {
     674:	e7e2      	b.n	63c <main+0x50>
		// nano = (dur * 1000000000) / 32768;
		nano = (uint32_t) k_cyc_to_ns_floor64(dur);
		// LOG_DBG("Time took %i nano secs", nano);
		// LOG_DBG("dx: %i, dy: %i", motion.dx, motion.dy);
	}
}
     676:	3714      	adds	r7, #20
     678:	46bd      	mov	sp, r7
     67a:	bd90      	pop	{r4, r7, pc}
     67c:	0000cc77 	.word	0x0000cc77
     680:	0000cc8f 	.word	0x0000cc8f
     684:	0000c7a8 	.word	0x0000c7a8

00000688 <is_sensor_ready>:
     688:	4801      	ldr	r0, [pc, #4]	; (690 <is_sensor_ready+0x8>)
     68a:	f00b bbe4 	b.w	be56 <z_device_is_ready>
     68e:	bf00      	nop
     690:	0000c630 	.word	0x0000c630

00000694 <set_cpi>:

bool is_sensor_ready(void) {
    return device_is_ready(device);
}

bool set_cpi(uint16_t cpi) {
     694:	b513      	push	{r0, r1, r4, lr}
    const struct sensor_value val = {
     696:	2300      	movs	r3, #0
     698:	9000      	str	r0, [sp, #0]
     69a:	9301      	str	r3, [sp, #4]
static inline int z_impl_sensor_attr_set(const struct device *dev,
					 enum sensor_channel chan,
					 enum sensor_attribute attr,
					 const struct sensor_value *val)
{
	const struct sensor_driver_api *api =
     69c:	4807      	ldr	r0, [pc, #28]	; (6bc <set_cpi+0x28>)
		(const struct sensor_driver_api *)dev->api;

	if (api->attr_set == NULL) {
     69e:	6883      	ldr	r3, [r0, #8]
     6a0:	681c      	ldr	r4, [r3, #0]
     6a2:	b144      	cbz	r4, 6b6 <set_cpi+0x22>
		return -ENOSYS;
	}

	return api->attr_set(dev, chan, attr, val);
     6a4:	466b      	mov	r3, sp
     6a6:	220e      	movs	r2, #14
     6a8:	2139      	movs	r1, #57	; 0x39
     6aa:	47a0      	blx	r4
        .val2 = 0,
    };

    int err = sensor_attr_set(device, SENSOR_CHAN_ALL, PMW3360_ATTR_CPI, &val);
    return err;
}
     6ac:	3800      	subs	r0, #0
     6ae:	bf18      	it	ne
     6b0:	2001      	movne	r0, #1
     6b2:	b002      	add	sp, #8
     6b4:	bd10      	pop	{r4, pc}
		return -ENOSYS;
     6b6:	f06f 0057 	mvn.w	r0, #87	; 0x57
     6ba:	e7f7      	b.n	6ac <set_cpi+0x18>
     6bc:	0000c630 	.word	0x0000c630

000006c0 <read_motion>:

bool configure_sensor(void) {
    set_cpi(800);
}

motion_info_t read_motion(void) {
     6c0:	b570      	push	{r4, r5, r6, lr}
     6c2:	b086      	sub	sp, #24
     6c4:	f00b f92e 	bl	b924 <sys_clock_cycle_get_32>
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
     6c8:	4c0f      	ldr	r4, [pc, #60]	; (708 <read_motion+0x48>)
     6ca:	68a5      	ldr	r5, [r4, #8]
     6cc:	2139      	movs	r1, #57	; 0x39
     6ce:	68eb      	ldr	r3, [r5, #12]
     6d0:	4620      	mov	r0, r4
     6d2:	4798      	blx	r3
     6d4:	4606      	mov	r6, r0
     6d6:	f00b f925 	bl	b924 <sys_clock_cycle_get_32>
	dur = stop - start;
	nano = (uint32_t) k_cyc_to_ns_floor64(dur);
	// LOG_DBG("Sample took %i nano secs", nano);


    if (!err) {
     6da:	b94e      	cbnz	r6, 6f0 <read_motion+0x30>
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
     6dc:	2123      	movs	r1, #35	; 0x23
     6de:	692b      	ldr	r3, [r5, #16]
     6e0:	aa02      	add	r2, sp, #8
     6e2:	4620      	mov	r0, r4
     6e4:	4798      	blx	r3
     6e6:	2124      	movs	r1, #36	; 0x24
     6e8:	692b      	ldr	r3, [r5, #16]
     6ea:	aa04      	add	r2, sp, #16
     6ec:	4620      	mov	r0, r4
     6ee:	4798      	blx	r3
    }

    motion_info_t info;
    info.dx = dx.val1;
    info.dy = dy.val1;
    return info;
     6f0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
     6f4:	2000      	movs	r0, #0
     6f6:	f363 000f 	bfi	r0, r3, #0, #16
     6fa:	f8bd 3010 	ldrh.w	r3, [sp, #16]
     6fe:	f363 401f 	bfi	r0, r3, #16, #16
}
     702:	b006      	add	sp, #24
     704:	bd70      	pop	{r4, r5, r6, pc}
     706:	bf00      	nop
     708:	0000c630 	.word	0x0000c630

0000070c <status_callback>:

LOG_MODULE_REGISTER(usb, CONFIG_LOG_DEFAULT_LEVEL);
static usb_device_t usb_device;

void status_callback(enum usb_dc_status_code status, const uint8_t *param) {
    usb_device.status = status;
     70c:	4b01      	ldr	r3, [pc, #4]	; (714 <status_callback+0x8>)
     70e:	7118      	strb	r0, [r3, #4]
}
     710:	4770      	bx	lr
     712:	bf00      	nop
     714:	20000a3c 	.word	0x20000a3c

00000718 <init_usb>:

int init_usb(void) {
     718:	b510      	push	{r4, lr}
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     71a:	480b      	ldr	r0, [pc, #44]	; (748 <init_usb+0x30>)
    usb_device.dev = device_get_binding(HID_DEVICE_ID); 
     71c:	4c0b      	ldr	r4, [pc, #44]	; (74c <init_usb+0x34>)
     71e:	f008 fd43 	bl	91a8 <z_impl_device_get_binding>
     722:	6020      	str	r0, [r4, #0]
    if (usb_device.dev == NULL) {
     724:	b160      	cbz	r0, 740 <init_usb+0x28>
        return -1;
    }

    usb_hid_register_device(
     726:	490a      	ldr	r1, [pc, #40]	; (750 <init_usb+0x38>)
     728:	2300      	movs	r3, #0
     72a:	223e      	movs	r2, #62	; 0x3e
     72c:	f003 fd9a 	bl	4264 <usb_hid_register_device>
        hid_report_desc,
        sizeof(hid_report_desc),
        NULL
    );

    usb_hid_init(usb_device.dev);
     730:	6820      	ldr	r0, [r4, #0]
     732:	f00a ff44 	bl	b5be <usb_hid_init>

    return usb_enable(status_callback);
}
     736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return usb_enable(status_callback);
     73a:	4806      	ldr	r0, [pc, #24]	; (754 <init_usb+0x3c>)
     73c:	f002 b974 	b.w	2a28 <usb_enable>
}
     740:	f04f 30ff 	mov.w	r0, #4294967295
     744:	bd10      	pop	{r4, pc}
     746:	bf00      	nop
     748:	0000cca2 	.word	0x0000cca2
     74c:	20000a3c 	.word	0x20000a3c
     750:	0000ccac 	.word	0x0000ccac
     754:	0000070d 	.word	0x0000070d

00000758 <hid_write>:

int hid_write(uint8_t* button_states, int16_t wheel, int16_t dx, int16_t dy) {
     758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t button_bm = 0;
	for (size_t i = 0; i < 5; i++) {
     75a:	2400      	movs	r4, #0
    uint8_t button_bm = 0;
     75c:	4625      	mov	r5, r4
        if (button_states[i]) {
		    uint8_t mask = 1 << (i);
     75e:	2601      	movs	r6, #1
        if (button_states[i]) {
     760:	5d07      	ldrb	r7, [r0, r4]
     762:	b11f      	cbz	r7, 76c <hid_write+0x14>
		    uint8_t mask = 1 << (i);
     764:	fa06 f704 	lsl.w	r7, r6, r4
		    button_bm |= mask;
     768:	433d      	orrs	r5, r7
     76a:	b2ed      	uxtb	r5, r5
	for (size_t i = 0; i < 5; i++) {
     76c:	3401      	adds	r4, #1
     76e:	2c05      	cmp	r4, #5
     770:	d1f6      	bne.n	760 <hid_write+0x8>
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
     772:	b2d8      	uxtb	r0, r3
     774:	f88d 2003 	strb.w	r2, [sp, #3]
	uint8_t message[6];
	message[0] = 0x01;
    message[1] = button_bm; //button_bit_mask;
    message[2] = wheel; // wheel;
    message[3] = x_buf[0];
    message[4] = (y_buf[0] << 4) | (x_buf[1] & 0x0f);
     778:	f3c2 2203 	ubfx	r2, r2, #8, #4
     77c:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
    message[5] = (y_buf[1] << 4) | (y_buf[0] >> 4);
     780:	f3c3 2307 	ubfx	r3, r3, #8, #8
     784:	0900      	lsrs	r0, r0, #4
     786:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
     78a:	f88d 0005 	strb.w	r0, [sp, #5]
    return hid_int_ep_write(usb_device.dev, message, 6, NULL);
     78e:	4809      	ldr	r0, [pc, #36]	; (7b4 <hid_write+0x5c>)
    message[2] = wheel; // wheel;
     790:	f88d 1002 	strb.w	r1, [sp, #2]
    message[4] = (y_buf[0] << 4) | (x_buf[1] & 0x0f);
     794:	f88d 2004 	strb.w	r2, [sp, #4]
	message[0] = 0x01;
     798:	2401      	movs	r4, #1
    return hid_int_ep_write(usb_device.dev, message, 6, NULL);
     79a:	2300      	movs	r3, #0
     79c:	2206      	movs	r2, #6
     79e:	4669      	mov	r1, sp
     7a0:	6800      	ldr	r0, [r0, #0]
	message[0] = 0x01;
     7a2:	f88d 4000 	strb.w	r4, [sp]
    message[1] = button_bm; //button_bit_mask;
     7a6:	f88d 5001 	strb.w	r5, [sp, #1]
    return hid_int_ep_write(usb_device.dev, message, 6, NULL);
     7aa:	f003 fd71 	bl	4290 <hid_int_ep_write>
     7ae:	b003      	add	sp, #12
     7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7b2:	bf00      	nop
     7b4:	20000a3c 	.word	0x20000a3c

000007b8 <fetch_wheel_data>:
    if (!device_is_ready(qdec_dev)) {
        LOG_ERR("QDEC not ready!");
    }
}

wheel_data_t fetch_wheel_data(void) {
     7b8:	b5b0      	push	{r4, r5, r7, lr}
     7ba:	b082      	sub	sp, #8
     7bc:	af00      	add	r7, sp, #0
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
     7be:	4c10      	ldr	r4, [pc, #64]	; (800 <CONFIG_ISR_STACK_SIZE>)
     7c0:	68a5      	ldr	r5, [r4, #8]
     7c2:	2139      	movs	r1, #57	; 0x39
     7c4:	68eb      	ldr	r3, [r5, #12]
     7c6:	4620      	mov	r0, r4
     7c8:	4798      	blx	r3
	return api->channel_get(dev, chan, val);
     7ca:	2122      	movs	r1, #34	; 0x22
     7cc:	692b      	ldr	r3, [r5, #16]
     7ce:	463a      	mov	r2, r7
     7d0:	4620      	mov	r0, r4
     7d2:	4798      	blx	r3

    int err = sensor_sample_fetch(qdec_dev);
    err = sensor_channel_get(qdec_dev, SENSOR_CHAN_ROTATION, &value);

    int16_t wheel = value.val1;
    LOG_DBG("Wheel rot: %i", wheel);
     7d4:	b088      	sub	sp, #32
     7d6:	466a      	mov	r2, sp
     7d8:	4b0a      	ldr	r3, [pc, #40]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     7da:	6153      	str	r3, [r2, #20]
    int16_t wheel = value.val1;
     7dc:	f9b7 4000 	ldrsh.w	r4, [r7]
    LOG_DBG("Wheel rot: %i", wheel);
     7e0:	4b09      	ldr	r3, [pc, #36]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     7e2:	e9c2 3406 	strd	r3, r4, [r2, #24]
     7e6:	2304      	movs	r3, #4
     7e8:	f842 3f10 	str.w	r3, [r2, #16]!
     7ec:	4807      	ldr	r0, [pc, #28]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
     7ee:	2300      	movs	r3, #0
     7f0:	f44f 5104 	mov.w	r1, #8448	; 0x2100
     7f4:	f00a fde0 	bl	b3b8 <z_impl_z_log_msg2_static_create>
    wheel_data_t data;
    data.rotation = wheel;
    return data;
}
     7f8:	4620      	mov	r0, r4
     7fa:	3708      	adds	r7, #8
     7fc:	46bd      	mov	sp, r7
     7fe:	bdb0      	pop	{r4, r5, r7, pc}
     800:	0000c600 	.word	0x0000c600
     804:	0000ccea 	.word	0x0000ccea
     808:	0000cd02 	.word	0x0000cd02
     80c:	0000c828 	.word	0x0000c828

00000810 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     814:	b08d      	sub	sp, #52	; 0x34
     816:	461f      	mov	r7, r3
     818:	9b16      	ldr	r3, [sp, #88]	; 0x58
     81a:	9202      	str	r2, [sp, #8]
     81c:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     81e:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     822:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     826:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     828:	1c53      	adds	r3, r2, #1

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     82a:	0782      	lsls	r2, r0, #30
{
     82c:	4605      	mov	r5, r0
     82e:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     830:	9304      	str	r3, [sp, #16]
	if ((uintptr_t)packaged % sizeof(void *)) {
     832:	f040 8221 	bne.w	c78 <cbvprintf_package+0x468>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     836:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     838:	2800      	cmp	r0, #0
     83a:	f040 8220 	bne.w	c7e <cbvprintf_package+0x46e>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     83e:	f001 0607 	and.w	r6, r1, #7
     842:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     844:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     848:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
     84c:	f04f 0804 	mov.w	r8, #4
	s = fmt--;
     850:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     852:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     856:	4652      	mov	r2, sl
	bool parsing = false;
     858:	46d1      	mov	r9, sl
	size = sizeof(char *);
     85a:	4641      	mov	r1, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     85c:	b105      	cbz	r5, 860 <cbvprintf_package+0x50>
				*(const char **)buf = s;
     85e:	6027      	str	r7, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     860:	9804      	ldr	r0, [sp, #16]
     862:	2800      	cmp	r0, #0
     864:	dc07      	bgt.n	876 <cbvprintf_package+0x66>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     866:	48cb      	ldr	r0, [pc, #812]	; (b94 <cbvprintf_package+0x384>)
     868:	4287      	cmp	r7, r0
     86a:	f0c0 8141 	bcc.w	af0 <cbvprintf_package+0x2e0>
     86e:	48ca      	ldr	r0, [pc, #808]	; (b98 <cbvprintf_package+0x388>)
     870:	4287      	cmp	r7, r0
     872:	f080 813d 	bcs.w	af0 <cbvprintf_package+0x2e0>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
     876:	9802      	ldr	r0, [sp, #8]
     878:	f010 0e02 	ands.w	lr, r0, #2
     87c:	f000 8151 	beq.w	b22 <cbvprintf_package+0x312>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     880:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     884:	1b60      	subs	r0, r4, r5
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     886:	f1be 0f00 	cmp.w	lr, #0
     88a:	f000 8137 	beq.w	afc <cbvprintf_package+0x2ec>
     88e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
     892:	f0c0 8133 	bcc.w	afc <cbvprintf_package+0x2ec>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
     896:	f06f 0015 	mvn.w	r0, #21
     89a:	e0fe      	b.n	a9a <cbvprintf_package+0x28a>
		if (!parsing) {
     89c:	f1b9 0f00 	cmp.w	r9, #0
     8a0:	d108      	bne.n	8b4 <cbvprintf_package+0xa4>
			if (*fmt == '%') {
     8a2:	2825      	cmp	r0, #37	; 0x25
     8a4:	f040 8141 	bne.w	b2a <cbvprintf_package+0x31a>
				parsing = true;
     8a8:	f04f 0901 	mov.w	r9, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
     8ac:	f04f 0804 	mov.w	r8, #4
			size = sizeof(intmax_t);
     8b0:	4641      	mov	r1, r8
     8b2:	e13a      	b.n	b2a <cbvprintf_package+0x31a>
		switch (*fmt) {
     8b4:	282b      	cmp	r0, #43	; 0x2b
     8b6:	d825      	bhi.n	904 <cbvprintf_package+0xf4>
     8b8:	281f      	cmp	r0, #31
     8ba:	d802      	bhi.n	8c2 <cbvprintf_package+0xb2>
			parsing = false;
     8bc:	f04f 0900 	mov.w	r9, #0
     8c0:	e133      	b.n	b2a <cbvprintf_package+0x31a>
		switch (*fmt) {
     8c2:	f1a0 0c20 	sub.w	ip, r0, #32
     8c6:	f1bc 0f0b 	cmp.w	ip, #11
     8ca:	d8f7      	bhi.n	8bc <cbvprintf_package+0xac>
     8cc:	f20f 0e04 	addw	lr, pc, #4
     8d0:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
     8d4:	00000b2b 	.word	0x00000b2b
     8d8:	000008bd 	.word	0x000008bd
     8dc:	000008bd 	.word	0x000008bd
     8e0:	00000b2b 	.word	0x00000b2b
     8e4:	000008bd 	.word	0x000008bd
     8e8:	000008bd 	.word	0x000008bd
     8ec:	000008bd 	.word	0x000008bd
     8f0:	000008bd 	.word	0x000008bd
     8f4:	000008bd 	.word	0x000008bd
     8f8:	000008bd 	.word	0x000008bd
     8fc:	00000abb 	.word	0x00000abb
     900:	00000b2b 	.word	0x00000b2b
     904:	f1a0 0c2d 	sub.w	ip, r0, #45	; 0x2d
     908:	fa5f fe8c 	uxtb.w	lr, ip
     90c:	f1be 0f4d 	cmp.w	lr, #77	; 0x4d
     910:	d8d4      	bhi.n	8bc <cbvprintf_package+0xac>
     912:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
     916:	d8d1      	bhi.n	8bc <cbvprintf_package+0xac>
     918:	f20f 0e04 	addw	lr, pc, #4
     91c:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
     920:	00000b2b 	.word	0x00000b2b
     924:	00000b2b 	.word	0x00000b2b
     928:	000008bd 	.word	0x000008bd
     92c:	00000b2b 	.word	0x00000b2b
     930:	00000b2b 	.word	0x00000b2b
     934:	00000b2b 	.word	0x00000b2b
     938:	00000b2b 	.word	0x00000b2b
     93c:	00000b2b 	.word	0x00000b2b
     940:	00000b2b 	.word	0x00000b2b
     944:	00000b2b 	.word	0x00000b2b
     948:	00000b2b 	.word	0x00000b2b
     94c:	00000b2b 	.word	0x00000b2b
     950:	00000b2b 	.word	0x00000b2b
     954:	000008bd 	.word	0x000008bd
     958:	000008bd 	.word	0x000008bd
     95c:	000008bd 	.word	0x000008bd
     960:	000008bd 	.word	0x000008bd
     964:	000008bd 	.word	0x000008bd
     968:	000008bd 	.word	0x000008bd
     96c:	000008bd 	.word	0x000008bd
     970:	00000a77 	.word	0x00000a77
     974:	000008bd 	.word	0x000008bd
     978:	000008bd 	.word	0x000008bd
     97c:	000008bd 	.word	0x000008bd
     980:	00000a77 	.word	0x00000a77
     984:	00000a77 	.word	0x00000a77
     988:	00000a77 	.word	0x00000a77
     98c:	000008bd 	.word	0x000008bd
     990:	000008bd 	.word	0x000008bd
     994:	000008bd 	.word	0x000008bd
     998:	000008bd 	.word	0x000008bd
     99c:	00000b2b 	.word	0x00000b2b
     9a0:	000008bd 	.word	0x000008bd
     9a4:	000008bd 	.word	0x000008bd
     9a8:	000008bd 	.word	0x000008bd
     9ac:	000008bd 	.word	0x000008bd
     9b0:	000008bd 	.word	0x000008bd
     9b4:	000008bd 	.word	0x000008bd
     9b8:	000008bd 	.word	0x000008bd
     9bc:	000008bd 	.word	0x000008bd
     9c0:	000008bd 	.word	0x000008bd
     9c4:	000008bd 	.word	0x000008bd
     9c8:	000008bd 	.word	0x000008bd
     9cc:	00000a59 	.word	0x00000a59
     9d0:	000008bd 	.word	0x000008bd
     9d4:	000008bd 	.word	0x000008bd
     9d8:	000008bd 	.word	0x000008bd
     9dc:	000008bd 	.word	0x000008bd
     9e0:	000008bd 	.word	0x000008bd
     9e4:	000008bd 	.word	0x000008bd
     9e8:	000008bd 	.word	0x000008bd
     9ec:	000008bd 	.word	0x000008bd
     9f0:	00000a77 	.word	0x00000a77
     9f4:	000008bd 	.word	0x000008bd
     9f8:	00000a59 	.word	0x00000a59
     9fc:	00000a59 	.word	0x00000a59
     a00:	00000a77 	.word	0x00000a77
     a04:	00000a77 	.word	0x00000a77
     a08:	00000a77 	.word	0x00000a77
     a0c:	00000b2b 	.word	0x00000b2b
     a10:	00000a59 	.word	0x00000a59
     a14:	00000aab 	.word	0x00000aab
     a18:	000008bd 	.word	0x000008bd
     a1c:	00000b2b 	.word	0x00000b2b
     a20:	000008bd 	.word	0x000008bd
     a24:	00000ab1 	.word	0x00000ab1
     a28:	00000a59 	.word	0x00000a59
     a2c:	00000ab1 	.word	0x00000ab1
     a30:	000008bd 	.word	0x000008bd
     a34:	000008bd 	.word	0x000008bd
     a38:	00000ab1 	.word	0x00000ab1
     a3c:	000008ad 	.word	0x000008ad
     a40:	00000a59 	.word	0x00000a59
     a44:	000008bd 	.word	0x000008bd
     a48:	000008bd 	.word	0x000008bd
     a4c:	00000a59 	.word	0x00000a59
     a50:	000008bd 	.word	0x000008bd
     a54:	000008ad 	.word	0x000008ad
			if (fmt[-1] == 'l') {
     a58:	f813 cc01 	ldrb.w	ip, [r3, #-1]
     a5c:	f1bc 0f6c 	cmp.w	ip, #108	; 0x6c
     a60:	d129      	bne.n	ab6 <cbvprintf_package+0x2a6>
				if (fmt[-2] == 'l') {
     a62:	f813 1c02 	ldrb.w	r1, [r3, #-2]
     a66:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
     a68:	f04f 0900 	mov.w	r9, #0
				if (fmt[-2] == 'l') {
     a6c:	d03d      	beq.n	aea <cbvprintf_package+0x2da>
			align = VA_STACK_ALIGN(void *);
     a6e:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long long);
     a72:	4641      	mov	r1, r8
     a74:	e021      	b.n	aba <cbvprintf_package+0x2aa>
				v.ld = va_arg(ap, long double);
     a76:	9800      	ldr	r0, [sp, #0]
     a78:	f100 0b07 	add.w	fp, r0, #7
     a7c:	f02b 0007 	bic.w	r0, fp, #7
     a80:	e8f0 8902 	ldrd	r8, r9, [r0], #8
			buf = (void *) ROUND_UP(buf, align);
     a84:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
     a86:	9000      	str	r0, [sp, #0]
			buf = (void *) ROUND_UP(buf, align);
     a88:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
     a8c:	b155      	cbz	r5, aa4 <cbvprintf_package+0x294>
				if (BUF_OFFSET + size > len) {
     a8e:	9805      	ldr	r0, [sp, #20]
     a90:	4420      	add	r0, r4
     a92:	42b0      	cmp	r0, r6
     a94:	d904      	bls.n	aa0 <cbvprintf_package+0x290>
					return -ENOSPC;
     a96:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     a9a:	b00d      	add	sp, #52	; 0x34
     a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
     aa0:	e9c4 8900 	strd	r8, r9, [r4]
			buf += size;
     aa4:	3408      	adds	r4, #8
			parsing = false;
     aa6:	f04f 0900 	mov.w	r9, #0
			align = VA_STACK_ALIGN(intmax_t);
     aaa:	f04f 0808 	mov.w	r8, #8
     aae:	e6ff      	b.n	8b0 <cbvprintf_package+0xa0>
			parsing = false;
     ab0:	f04f 0900 	mov.w	r9, #0
     ab4:	e7db      	b.n	a6e <cbvprintf_package+0x25e>
			parsing = false;
     ab6:	f04f 0900 	mov.w	r9, #0
		buf = (void *) ROUND_UP(buf, align);
     aba:	3c01      	subs	r4, #1
     abc:	4444      	add	r4, r8
     abe:	f1c8 0c00 	rsb	ip, r8, #0
     ac2:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     ac6:	b125      	cbz	r5, ad2 <cbvprintf_package+0x2c2>
     ac8:	eba1 0c05 	sub.w	ip, r1, r5
     acc:	44a4      	add	ip, r4
     ace:	45b4      	cmp	ip, r6
     ad0:	d8e1      	bhi.n	a96 <cbvprintf_package+0x286>
		if (*fmt == 's') {
     ad2:	2873      	cmp	r0, #115	; 0x73
     ad4:	d152      	bne.n	b7c <cbvprintf_package+0x36c>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     ad6:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
     ad8:	f8dd b000 	ldr.w	fp, [sp]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     adc:	3801      	subs	r0, #1
			s = va_arg(ap, char *);
     ade:	f85b 7b04 	ldr.w	r7, [fp], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     ae2:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
     ae4:	f8cd b000 	str.w	fp, [sp]
     ae8:	e6b8      	b.n	85c <cbvprintf_package+0x4c>
					align = VA_STACK_ALIGN(long long);
     aea:	f04f 0808 	mov.w	r8, #8
     aee:	e7c0      	b.n	a72 <cbvprintf_package+0x262>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     af0:	9802      	ldr	r0, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     af2:	f04f 0c00 	mov.w	ip, #0
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     af6:	f000 0e02 	and.w	lr, r0, #2
			if (is_ro && !do_ro) {
     afa:	e6c3      	b.n	884 <cbvprintf_package+0x74>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     afc:	2a0f      	cmp	r2, #15
     afe:	f63f aeca 	bhi.w	896 <cbvprintf_package+0x86>
				if (buf0 != NULL) {
     b02:	b345      	cbz	r5, b56 <cbvprintf_package+0x346>
					str_ptr_pos[s_idx] = s_ptr_idx;
     b04:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
     b08:	f3c0 0087 	ubfx	r0, r0, #2, #8
					if (is_ro) {
     b0c:	4496      	add	lr, r2
     b0e:	f1bc 0f00 	cmp.w	ip, #0
     b12:	d01a      	beq.n	b4a <cbvprintf_package+0x33a>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     b14:	f060 007f 	orn	r0, r0, #127	; 0x7f
     b18:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_ro_cnt++;
     b1c:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
     b20:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
     b22:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
     b26:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
     b28:	9005      	str	r0, [sp, #20]
	while (*++fmt != '\0') {
     b2a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     b2e:	2800      	cmp	r0, #0
     b30:	f47f aeb4 	bne.w	89c <cbvprintf_package+0x8c>
	if (BUF_OFFSET / sizeof(int) > 255) {
     b34:	1b61      	subs	r1, r4, r5
     b36:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
     b3a:	f4bf aeac 	bcs.w	896 <cbvprintf_package+0x86>
	if (buf0 == NULL) {
     b3e:	2d00      	cmp	r5, #0
     b40:	d13e      	bne.n	bc0 <cbvprintf_package+0x3b0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     b42:	f1a6 0408 	sub.w	r4, r6, #8
     b46:	1860      	adds	r0, r4, r1
     b48:	e7a7      	b.n	a9a <cbvprintf_package+0x28a>
					str_ptr_pos[s_idx] = s_ptr_idx;
     b4a:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_rw_cnt++;
     b4e:	9803      	ldr	r0, [sp, #12]
     b50:	3001      	adds	r0, #1
     b52:	9003      	str	r0, [sp, #12]
     b54:	e7e4      	b.n	b20 <cbvprintf_package+0x310>
				} else if (is_ro || rws_pos_en) {
     b56:	f1bc 0f00 	cmp.w	ip, #0
     b5a:	d101      	bne.n	b60 <cbvprintf_package+0x350>
     b5c:	9801      	ldr	r0, [sp, #4]
     b5e:	b108      	cbz	r0, b64 <cbvprintf_package+0x354>
					len += 1;
     b60:	3601      	adds	r6, #1
     b62:	e7dd      	b.n	b20 <cbvprintf_package+0x310>
					len += strlen(s) + 1 + 1;
     b64:	4638      	mov	r0, r7
     b66:	e9cd 1206 	strd	r1, r2, [sp, #24]
     b6a:	9305      	str	r3, [sp, #20]
     b6c:	f00a fccd 	bl	b50a <strlen>
     b70:	3602      	adds	r6, #2
     b72:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
     b76:	9b05      	ldr	r3, [sp, #20]
     b78:	4406      	add	r6, r0
     b7a:	e7d1      	b.n	b20 <cbvprintf_package+0x310>
		} else if (size == sizeof(int)) {
     b7c:	2904      	cmp	r1, #4
     b7e:	d10d      	bne.n	b9c <cbvprintf_package+0x38c>
			int v = va_arg(ap, int);
     b80:	9800      	ldr	r0, [sp, #0]
     b82:	f100 0c04 	add.w	ip, r0, #4
			if (buf0 != NULL) {
     b86:	b10d      	cbz	r5, b8c <cbvprintf_package+0x37c>
			int v = va_arg(ap, int);
     b88:	6800      	ldr	r0, [r0, #0]
				*(int *)buf = v;
     b8a:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
     b8c:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
     b8e:	f8cd c000 	str.w	ip, [sp]
     b92:	e7ca      	b.n	b2a <cbvprintf_package+0x31a>
     b94:	0000c510 	.word	0x0000c510
     b98:	0000ef00 	.word	0x0000ef00
		} else if (size == sizeof(long long)) {
     b9c:	2908      	cmp	r1, #8
     b9e:	f47f ae7a 	bne.w	896 <cbvprintf_package+0x86>
			long long v = va_arg(ap, long long);
     ba2:	9800      	ldr	r0, [sp, #0]
     ba4:	3007      	adds	r0, #7
     ba6:	f020 0007 	bic.w	r0, r0, #7
     baa:	f100 0c08 	add.w	ip, r0, #8
     bae:	f8cd c000 	str.w	ip, [sp]
			if (buf0 != NULL) {
     bb2:	b11d      	cbz	r5, bbc <cbvprintf_package+0x3ac>
			long long v = va_arg(ap, long long);
     bb4:	e9d0 bc00 	ldrd	fp, ip, [r0]
     bb8:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
     bbc:	3408      	adds	r4, #8
     bbe:	e7b4      	b.n	b2a <cbvprintf_package+0x31a>
	if (rws_pos_en) {
     bc0:	9b01      	ldr	r3, [sp, #4]
	*(char **)buf0 = NULL;
     bc2:	6028      	str	r0, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
     bc4:	0889      	lsrs	r1, r1, #2
     bc6:	7029      	strb	r1, [r5, #0]
		buf0[3] = s_rw_cnt;
     bc8:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
     bcc:	b1a3      	cbz	r3, bf8 <cbvprintf_package+0x3e8>
		buf0[1] = 0;
     bce:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
     bd0:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
     bd2:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
     bd6:	f1ba 0f00 	cmp.w	sl, #0
     bda:	d006      	beq.n	bea <cbvprintf_package+0x3da>
     bdc:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
     bde:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
     be2:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
     be6:	4562      	cmp	r2, ip
     be8:	d10a      	bne.n	c00 <cbvprintf_package+0x3f0>
     bea:	f10d 0820 	add.w	r8, sp, #32
     bee:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
     bf2:	f1c5 0b01 	rsb	fp, r5, #1
     bf6:	e039      	b.n	c6c <cbvprintf_package+0x45c>
		buf0[3] = 0;
     bf8:	9b01      	ldr	r3, [sp, #4]
		buf0[1] = s_rw_cnt;
     bfa:	7069      	strb	r1, [r5, #1]
		buf0[3] = 0;
     bfc:	70eb      	strb	r3, [r5, #3]
     bfe:	e7e8      	b.n	bd2 <cbvprintf_package+0x3c2>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     c00:	f810 1b01 	ldrb.w	r1, [r0], #1
     c04:	060b      	lsls	r3, r1, #24
     c06:	d508      	bpl.n	c1a <cbvprintf_package+0x40a>
			if (BUF_OFFSET + 1 > len) {
     c08:	eb04 080e 	add.w	r8, r4, lr
     c0c:	45b0      	cmp	r8, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     c0e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     c12:	f63f af40 	bhi.w	a96 <cbvprintf_package+0x286>
			*buf++ = pos;
     c16:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
     c1a:	f10c 0c01 	add.w	ip, ip, #1
     c1e:	e7e2      	b.n	be6 <cbvprintf_package+0x3d6>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     c20:	f1ba 0f00 	cmp.w	sl, #0
     c24:	d003      	beq.n	c2e <cbvprintf_package+0x41e>
     c26:	f998 2000 	ldrsb.w	r2, [r8]
     c2a:	2a00      	cmp	r2, #0
     c2c:	db1c      	blt.n	c68 <cbvprintf_package+0x458>
		if (rws_pos_en) {
     c2e:	9b01      	ldr	r3, [sp, #4]
     c30:	bb03      	cbnz	r3, c74 <cbvprintf_package+0x464>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     c32:	f898 2000 	ldrb.w	r2, [r8]
     c36:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     c3a:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
     c3e:	4638      	mov	r0, r7
     c40:	f00a fc63 	bl	b50a <strlen>
     c44:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
     c46:	eb04 010b 	add.w	r1, r4, fp
     c4a:	4411      	add	r1, r2
     c4c:	42b1      	cmp	r1, r6
     c4e:	f63f af22 	bhi.w	a96 <cbvprintf_package+0x286>
		*buf++ = str_ptr_pos[i];
     c52:	f898 1000 	ldrb.w	r1, [r8]
     c56:	f804 1b01 	strb.w	r1, [r4], #1
		memcpy(buf, s, size);
     c5a:	4639      	mov	r1, r7
     c5c:	4620      	mov	r0, r4
     c5e:	9200      	str	r2, [sp, #0]
     c60:	f00a fc6f 	bl	b542 <memcpy>
		buf += size;
     c64:	9a00      	ldr	r2, [sp, #0]
     c66:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
     c68:	f108 0801 	add.w	r8, r8, #1
     c6c:	45c1      	cmp	r9, r8
     c6e:	d1d7      	bne.n	c20 <cbvprintf_package+0x410>
	return BUF_OFFSET;
     c70:	1b60      	subs	r0, r4, r5
     c72:	e712      	b.n	a9a <cbvprintf_package+0x28a>
			size = 0;
     c74:	2200      	movs	r2, #0
     c76:	e7e6      	b.n	c46 <cbvprintf_package+0x436>
		return -EFAULT;
     c78:	f06f 000d 	mvn.w	r0, #13
     c7c:	e70d      	b.n	a9a <cbvprintf_package+0x28a>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     c7e:	2907      	cmp	r1, #7
     c80:	f63f ade2 	bhi.w	848 <cbvprintf_package+0x38>
     c84:	e707      	b.n	a96 <cbvprintf_package+0x286>
     c86:	bf00      	nop

00000c88 <cbprintf_package_copy>:
			  void *packaged,
			  size_t len,
			  uint32_t flags,
			  uint16_t *strl,
			  size_t strl_len)
{
     c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c8c:	b08b      	sub	sp, #44	; 0x2c
     c8e:	4606      	mov	r6, r0
     c90:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
     c94:	9304      	str	r3, [sp, #16]
     c96:	4614      	mov	r4, r2
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;

	in_len != 0 ? in_len : get_package_len(in_packaged);
     c98:	460f      	mov	r7, r1
     c9a:	b1b1      	cbz	r1, cca <cbprintf_package_copy+0x42>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = buf[2];
     c9c:	78b5      	ldrb	r5, [r6, #2]
     c9e:	9505      	str	r5, [sp, #20]
	ro_cpy = ros_nbr &&
     ca0:	bb35      	cbnz	r5, cf0 <cbprintf_package_copy+0x68>
     ca2:	46aa      	mov	sl, r5
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = buf[3];
     ca4:	78f3      	ldrb	r3, [r6, #3]
     ca6:	9301      	str	r3, [sp, #4]
	rw_cpy = rws_nbr > 0 &&
     ca8:	b113      	cbz	r3, cb0 <cbprintf_package_copy+0x28>

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
     caa:	f01b 0f02 	tst.w	fp, #2
     cae:	d122      	bne.n	cf6 <cbprintf_package_copy+0x6e>
     cb0:	f1ba 0f00 	cmp.w	sl, #0
     cb4:	d11f      	bne.n	cf6 <cbprintf_package_copy+0x6e>
		if (packaged) {
     cb6:	b124      	cbz	r4, cc2 <cbprintf_package_copy+0x3a>
			memcpy(packaged, in_packaged, in_len);
     cb8:	463a      	mov	r2, r7
     cba:	4631      	mov	r1, r6
     cbc:	4620      	mov	r0, r4
     cbe:	f00a fc40 	bl	b542 <memcpy>
			}

			str_pos++;
		}

		return out_len;
     cc2:	4638      	mov	r0, r7
		rem -= cpy_len;
		dst += cpy_len;
	}

	return len - rem;
}
     cc4:	b00b      	add	sp, #44	; 0x2c
     cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s_nbr     = buf[1];
     cca:	f890 9001 	ldrb.w	r9, [r0, #1]
	buf += ros_nbr;
     cce:	78b5      	ldrb	r5, [r6, #2]
     cd0:	7800      	ldrb	r0, [r0, #0]
     cd2:	eb05 0580 	add.w	r5, r5, r0, lsl #2
     cd6:	4435      	add	r5, r6
	for (int i = 0; i < s_nbr; i++) {
     cd8:	468a      	mov	sl, r1
     cda:	45ca      	cmp	sl, r9
     cdc:	d2de      	bcs.n	c9c <cbprintf_package_copy+0x14>
		buf++;
     cde:	3501      	adds	r5, #1
		buf += strlen((const char *)buf) + 1;
     ce0:	4628      	mov	r0, r5
     ce2:	f00a fc12 	bl	b50a <strlen>
     ce6:	3001      	adds	r0, #1
     ce8:	4405      	add	r5, r0
	for (int i = 0; i < s_nbr; i++) {
     cea:	f10a 0a01 	add.w	sl, sl, #1
     cee:	e7f4      	b.n	cda <cbprintf_package_copy+0x52>
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
     cf0:	f00b 0a01 	and.w	sl, fp, #1
     cf4:	e7d6      	b.n	ca4 <cbprintf_package_copy+0x1c>
	args_size = buf[0] * sizeof(int);
     cf6:	f896 9000 	ldrb.w	r9, [r6]
     cfa:	ea4f 0389 	mov.w	r3, r9, lsl #2
     cfe:	9303      	str	r3, [sp, #12]
	uint8_t *str_pos = &buf[args_size];
     d00:	eb06 0989 	add.w	r9, r6, r9, lsl #2
	if (packaged == NULL) {
     d04:	2c00      	cmp	r4, #0
     d06:	d15b      	bne.n	dc0 <cbprintf_package_copy+0x138>
		if (ro_cpy) {
     d08:	f1ba 0f00 	cmp.w	sl, #0
     d0c:	d032      	beq.n	d74 <cbprintf_package_copy+0xec>
     d0e:	444d      	add	r5, r9
			for (int i = 0; i < ros_nbr; i++) {
     d10:	454d      	cmp	r5, r9
     d12:	d11d      	bne.n	d50 <cbprintf_package_copy+0xc8>
     d14:	46a9      	mov	r9, r5
		bool drop_ro_str_pos = !(flags &
     d16:	f8dd a004 	ldr.w	sl, [sp, #4]
     d1a:	f8df c204 	ldr.w	ip, [pc, #516]	; f20 <cbprintf_package_copy+0x298>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     d1e:	4981      	ldr	r1, [pc, #516]	; (f24 <cbprintf_package_copy+0x29c>)
		bool drop_ro_str_pos = !(flags &
     d20:	f00b 0805 	and.w	r8, fp, #5
		for (int i = 0; i < rws_nbr; i++) {
     d24:	464d      	mov	r5, r9
     d26:	44ca      	add	sl, r9
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     d28:	f00b 0202 	and.w	r2, fp, #2
		for (int i = 0; i < rws_nbr; i++) {
     d2c:	45aa      	cmp	sl, r5
     d2e:	d0c8      	beq.n	cc2 <cbprintf_package_copy+0x3a>
			const char *str = *(const char **)&buf32[*str_pos];
     d30:	f815 0b01 	ldrb.w	r0, [r5], #1
     d34:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
     d38:	4560      	cmp	r0, ip
     d3a:	d324      	bcc.n	d86 <cbprintf_package_copy+0xfe>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     d3c:	4288      	cmp	r0, r1
     d3e:	d222      	bcs.n	d86 <cbprintf_package_copy+0xfe>
     d40:	f01b 0f01 	tst.w	fp, #1
     d44:	d139      	bne.n	dba <cbprintf_package_copy+0x132>
			if (is_ro && drop_ro_str_pos) {
     d46:	f1b8 0f00 	cmp.w	r8, #0
     d4a:	d1ef      	bne.n	d2c <cbprintf_package_copy+0xa4>
				out_len--;
     d4c:	3f01      	subs	r7, #1
		for (int i = 0; i < rws_nbr; i++) {
     d4e:	e7ed      	b.n	d2c <cbprintf_package_copy+0xa4>
				const char *str = *(const char **)&buf32[*str_pos];
     d50:	f819 3b01 	ldrb.w	r3, [r9], #1
		return 1 + strlen(str);
     d54:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
     d58:	f00a fbd7 	bl	b50a <strlen>
				if (strl && strl_cnt < strl_len) {
     d5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
		return 1 + strlen(str);
     d5e:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     d60:	b133      	cbz	r3, d70 <cbprintf_package_copy+0xe8>
     d62:	9b16      	ldr	r3, [sp, #88]	; 0x58
     d64:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
     d66:	bf3e      	ittt	cc
     d68:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
     d6a:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
     d6e:	3401      	addcc	r4, #1
				out_len += len;
     d70:	4407      	add	r7, r0
			for (int i = 0; i < ros_nbr; i++) {
     d72:	e7cd      	b.n	d10 <cbprintf_package_copy+0x88>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     d74:	b12d      	cbz	r5, d82 <cbprintf_package_copy+0xfa>
     d76:	f01b 0404 	ands.w	r4, fp, #4
     d7a:	d0cc      	beq.n	d16 <cbprintf_package_copy+0x8e>
				str_pos += ros_nbr;
     d7c:	44a9      	add	r9, r5
	size_t strl_cnt = 0;
     d7e:	4654      	mov	r4, sl
     d80:	e7c9      	b.n	d16 <cbprintf_package_copy+0x8e>
     d82:	462c      	mov	r4, r5
     d84:	e7c7      	b.n	d16 <cbprintf_package_copy+0x8e>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     d86:	2a00      	cmp	r2, #0
     d88:	d0d0      	beq.n	d2c <cbprintf_package_copy+0xa4>
     d8a:	f04f 0900 	mov.w	r9, #0
		return 1 + strlen(str);
     d8e:	9201      	str	r2, [sp, #4]
     d90:	f00a fbbb 	bl	b50a <strlen>
				if (strl && strl_cnt < strl_len) {
     d94:	9b15      	ldr	r3, [sp, #84]	; 0x54
     d96:	f8df c188 	ldr.w	ip, [pc, #392]	; f20 <cbprintf_package_copy+0x298>
     d9a:	9a01      	ldr	r2, [sp, #4]
     d9c:	4961      	ldr	r1, [pc, #388]	; (f24 <cbprintf_package_copy+0x29c>)
		return 1 + strlen(str);
     d9e:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     da0:	b133      	cbz	r3, db0 <cbprintf_package_copy+0x128>
     da2:	9b16      	ldr	r3, [sp, #88]	; 0x58
     da4:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
     da6:	bf3e      	ittt	cc
     da8:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
     daa:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
     dae:	3401      	addcc	r4, #1
				out_len += len;
     db0:	4407      	add	r7, r0
			if (is_ro && drop_ro_str_pos) {
     db2:	f1b9 0f00 	cmp.w	r9, #0
     db6:	d0b9      	beq.n	d2c <cbprintf_package_copy+0xa4>
     db8:	e7c5      	b.n	d46 <cbprintf_package_copy+0xbe>
     dba:	f04f 0901 	mov.w	r9, #1
     dbe:	e7e6      	b.n	d8e <cbprintf_package_copy+0x106>
	memcpy(dst, in_packaged, args_size);
     dc0:	9a03      	ldr	r2, [sp, #12]
     dc2:	4631      	mov	r1, r6
     dc4:	4620      	mov	r0, r4
     dc6:	f00a fbbc 	bl	b542 <memcpy>
	dst += args_size;
     dca:	9b03      	ldr	r3, [sp, #12]
     dcc:	18e3      	adds	r3, r4, r3
     dce:	9302      	str	r3, [sp, #8]
	if (ro_cpy) {
     dd0:	f1ba 0f00 	cmp.w	sl, #0
     dd4:	d00a      	beq.n	dec <cbprintf_package_copy+0x164>
		memcpy(cpy_str_pos, str_pos, ros_nbr);
     dd6:	4649      	mov	r1, r9
     dd8:	462a      	mov	r2, r5
     dda:	a806      	add	r0, sp, #24
     ddc:	f00a fbb1 	bl	b542 <memcpy>
		dst_hdr[2] = 0;
     de0:	2300      	movs	r3, #0
     de2:	70a3      	strb	r3, [r4, #2]
		str_pos += ros_nbr;
     de4:	44a9      	add	r9, r5
	dst += args_size;
     de6:	f8dd 8008 	ldr.w	r8, [sp, #8]
     dea:	e00d      	b.n	e08 <cbprintf_package_copy+0x180>
		if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     dec:	b1bd      	cbz	r5, e1e <cbprintf_package_copy+0x196>
     dee:	f01b 0f04 	tst.w	fp, #4
     df2:	d014      	beq.n	e1e <cbprintf_package_copy+0x196>
			memcpy(dst, str_pos, ros_nbr);
     df4:	462a      	mov	r2, r5
     df6:	4649      	mov	r1, r9
     df8:	9802      	ldr	r0, [sp, #8]
     dfa:	f00a fba2 	bl	b542 <memcpy>
			dst += ros_nbr;
     dfe:	9b02      	ldr	r3, [sp, #8]
			str_pos += ros_nbr;
     e00:	44a9      	add	r9, r5
			dst += ros_nbr;
     e02:	eb03 0805 	add.w	r8, r3, r5
		scpy_cnt = 0;
     e06:	4655      	mov	r5, sl
     e08:	9b01      	ldr	r3, [sp, #4]
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     e0a:	f00b 0e02 	and.w	lr, fp, #2
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     e0e:	f00b 0001 	and.w	r0, fp, #1
     e12:	464a      	mov	r2, r9
     e14:	eb09 0c03 	add.w	ip, r9, r3
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     e18:	f00b 0b04 	and.w	fp, fp, #4
     e1c:	e025      	b.n	e6a <cbprintf_package_copy+0x1e2>
			dst_hdr[2] = 0;
     e1e:	2500      	movs	r5, #0
     e20:	70a5      	strb	r5, [r4, #2]
     e22:	e7e0      	b.n	de6 <cbprintf_package_copy+0x15e>
		const char *str = *(const char **)&buf32[*str_pos];
     e24:	f812 3b01 	ldrb.w	r3, [r2], #1
     e28:	f8df a0f4 	ldr.w	sl, [pc, #244]	; f20 <cbprintf_package_copy+0x298>
     e2c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
     e30:	4551      	cmp	r1, sl
     e32:	d303      	bcc.n	e3c <cbprintf_package_copy+0x1b4>
     e34:	f8df a0ec 	ldr.w	sl, [pc, #236]	; f24 <cbprintf_package_copy+0x29c>
     e38:	4551      	cmp	r1, sl
     e3a:	d305      	bcc.n	e48 <cbprintf_package_copy+0x1c0>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     e3c:	f1be 0f00 	cmp.w	lr, #0
     e40:	d103      	bne.n	e4a <cbprintf_package_copy+0x1c2>
				*dst++ = *str_pos;
     e42:	f808 3b01 	strb.w	r3, [r8], #1
	for (int i = 0; i < rws_nbr; i++) {
     e46:	e010      	b.n	e6a <cbprintf_package_copy+0x1e2>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     e48:	b138      	cbz	r0, e5a <cbprintf_package_copy+0x1d2>
				cpy_str_pos[scpy_cnt++] = *str_pos;
     e4a:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
     e4e:	1c69      	adds	r1, r5, #1
     e50:	4455      	add	r5, sl
     e52:	f805 3c10 	strb.w	r3, [r5, #-16]
     e56:	b2cd      	uxtb	r5, r1
     e58:	e007      	b.n	e6a <cbprintf_package_copy+0x1e2>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     e5a:	f1bb 0f00 	cmp.w	fp, #0
     e5e:	d004      	beq.n	e6a <cbprintf_package_copy+0x1e2>
				*dst++ = *str_pos;
     e60:	f808 3b01 	strb.w	r3, [r8], #1
				dst_hdr[2]++;
     e64:	78a3      	ldrb	r3, [r4, #2]
     e66:	3301      	adds	r3, #1
     e68:	70a3      	strb	r3, [r4, #2]
	for (int i = 0; i < rws_nbr; i++) {
     e6a:	4594      	cmp	ip, r2
     e6c:	d1da      	bne.n	e24 <cbprintf_package_copy+0x19c>
	dst_hdr[1] += scpy_cnt;
     e6e:	7863      	ldrb	r3, [r4, #1]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     e70:	9a01      	ldr	r2, [sp, #4]
	dst_hdr[1] += scpy_cnt;
     e72:	442b      	add	r3, r5
     e74:	7063      	strb	r3, [r4, #1]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
     e76:	9b02      	ldr	r3, [sp, #8]
     e78:	eba8 0b03 	sub.w	fp, r8, r3
     e7c:	78a3      	ldrb	r3, [r4, #2]
     e7e:	ebab 0b03 	sub.w	fp, fp, r3
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     e82:	9b05      	ldr	r3, [sp, #20]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
     e84:	f884 b003 	strb.w	fp, [r4, #3]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     e88:	4413      	add	r3, r2
     e8a:	1aff      	subs	r7, r7, r3
     e8c:	9b03      	ldr	r3, [sp, #12]
     e8e:	1aff      	subs	r7, r7, r3
	memcpy(dst, str_pos, strs_len);
     e90:	9b01      	ldr	r3, [sp, #4]
     e92:	4640      	mov	r0, r8
     e94:	463a      	mov	r2, r7
     e96:	eb09 0103 	add.w	r1, r9, r3
	dst += strs_len;
     e9a:	44b8      	add	r8, r7
	memcpy(dst, str_pos, strs_len);
     e9c:	f00a fb51 	bl	b542 <memcpy>
		return dst - dst_hdr;
     ea0:	eba8 0004 	sub.w	r0, r8, r4
	if (scpy_cnt == 0) {
     ea4:	2d00      	cmp	r5, #0
     ea6:	f43f af0d 	beq.w	cc4 <cbprintf_package_copy+0x3c>
	size_t rem = len - ((size_t)(uintptr_t)(dst - dst_hdr));
     eaa:	9b04      	ldr	r3, [sp, #16]
     eac:	1a1c      	subs	r4, r3, r0
	if (rem <= scpy_cnt) {
     eae:	42a5      	cmp	r5, r4
     eb0:	d302      	bcc.n	eb8 <cbprintf_package_copy+0x230>
		return -ENOSPC;
     eb2:	f06f 001b 	mvn.w	r0, #27
     eb6:	e705      	b.n	cc4 <cbprintf_package_copy+0x3c>
	for (int i = 0; i < scpy_cnt; i++) {
     eb8:	f04f 0900 	mov.w	r9, #0
		uint8_t loc = cpy_str_pos[i];
     ebc:	ab06      	add	r3, sp, #24
		uint16_t str_len = strl ? strl[i] : 0;
     ebe:	9a15      	ldr	r2, [sp, #84]	; 0x54
		uint8_t loc = cpy_str_pos[i];
     ec0:	f813 3009 	ldrb.w	r3, [r3, r9]
		const char *str = *(const char **)&buf32[loc];
     ec4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
     ec8:	b1c2      	cbz	r2, efc <cbprintf_package_copy+0x274>
     eca:	f832 7019 	ldrh.w	r7, [r2, r9, lsl #1]
		*dst = loc;
     ece:	46c2      	mov	sl, r8
		rem--;
     ed0:	f104 3bff 	add.w	fp, r4, #4294967295
		*dst = loc;
     ed4:	f80a 3b01 	strb.w	r3, [sl], #1
	if (strl) {
     ed8:	b197      	cbz	r7, f00 <cbprintf_package_copy+0x278>
		memcpy(dst, str, strl);
     eda:	463a      	mov	r2, r7
     edc:	4650      	mov	r0, sl
     ede:	f00a fb30 	bl	b542 <memcpy>
	for (int i = 0; i < scpy_cnt; i++) {
     ee2:	f109 0901 	add.w	r9, r9, #1
     ee6:	454d      	cmp	r5, r9
		rem -= cpy_len;
     ee8:	ebab 0407 	sub.w	r4, fp, r7
		dst += cpy_len;
     eec:	eb0a 0807 	add.w	r8, sl, r7
	for (int i = 0; i < scpy_cnt; i++) {
     ef0:	dce4      	bgt.n	ebc <cbprintf_package_copy+0x234>
	return len - rem;
     ef2:	9b04      	ldr	r3, [sp, #16]
     ef4:	441f      	add	r7, r3
     ef6:	eba7 000b 	sub.w	r0, r7, fp
     efa:	e6e3      	b.n	cc4 <cbprintf_package_copy+0x3c>
		uint16_t str_len = strl ? strl[i] : 0;
     efc:	9f15      	ldr	r7, [sp, #84]	; 0x54
     efe:	e7e6      	b.n	ece <cbprintf_package_copy+0x246>
     f00:	3901      	subs	r1, #1
	if (strl) {
     f02:	2301      	movs	r3, #1
	for (size_t i = 0; i < num; i++) {
     f04:	429c      	cmp	r4, r3
     f06:	d0d4      	beq.n	eb2 <cbprintf_package_copy+0x22a>
		dst[i] = src[i];
     f08:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     f0c:	f808 2003 	strb.w	r2, [r8, r3]
		if (src[i] == '\0') {
     f10:	1c58      	adds	r0, r3, #1
     f12:	b912      	cbnz	r2, f1a <cbprintf_package_copy+0x292>
		if (cpy_len < 0) {
     f14:	1e1f      	subs	r7, r3, #0
     f16:	dae4      	bge.n	ee2 <cbprintf_package_copy+0x25a>
     f18:	e7cb      	b.n	eb2 <cbprintf_package_copy+0x22a>
     f1a:	4603      	mov	r3, r0
     f1c:	e7f2      	b.n	f04 <cbprintf_package_copy+0x27c>
     f1e:	bf00      	nop
     f20:	0000c510 	.word	0x0000c510
     f24:	0000ef00 	.word	0x0000ef00

00000f28 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
     f28:	4b01      	ldr	r3, [pc, #4]	; (f30 <__printk_hook_install+0x8>)
     f2a:	6018      	str	r0, [r3, #0]
}
     f2c:	4770      	bx	lr
     f2e:	bf00      	nop
     f30:	20000000 	.word	0x20000000

00000f34 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     f34:	b530      	push	{r4, r5, lr}
     f36:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     f38:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     f3c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     f3e:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
     f40:	a901      	add	r1, sp, #4
     f42:	4805      	ldr	r0, [pc, #20]	; (f58 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     f44:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
     f46:	f000 f8e9 	bl	111c <cbvprintf>

	if (ctx.count < ctx.max) {
     f4a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     f4e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     f50:	bfb8      	it	lt
     f52:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     f54:	b005      	add	sp, #20
     f56:	bd30      	pop	{r4, r5, pc}
     f58:	0000a7f9 	.word	0x0000a7f9

00000f5c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     f5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     f60:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     f64:	f019 0808 	ands.w	r8, r9, #8
{
     f68:	4604      	mov	r4, r0
     f6a:	4693      	mov	fp, r2
	if (processing) {
     f6c:	d00d      	beq.n	f8a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     f6e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     f70:	bf0c      	ite	eq
     f72:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     f76:	f049 0920 	orrne.w	r9, r9, #32
     f7a:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     f7e:	f38b 8811 	msr	BASEPRI, fp
     f82:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     f86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     f8a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     f8e:	2902      	cmp	r1, #2
     f90:	d107      	bne.n	fa2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x2>
			evt = process_recheck(mgr);
     f92:	4620      	mov	r0, r4
     f94:	f009 fc77 	bl	a886 <process_recheck>
		if (evt == EVT_NOP) {
     f98:	2800      	cmp	r0, #0
     f9a:	d0f0      	beq.n	f7e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     f9c:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f9e:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     fa0:	d14e      	bne.n	1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>
			res = mgr->last_res;
     fa2:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     fa4:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     fa6:	2f00      	cmp	r7, #0
     fa8:	da15      	bge.n	fd6 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x36>
		*clients = mgr->clients;
     faa:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fac:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     fb0:	e9c4 8800 	strd	r8, r8, [r4]
     fb4:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     fb8:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     fba:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     fbc:	8b21      	ldrh	r1, [r4, #24]
     fbe:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     fc2:	45ca      	cmp	sl, r9
     fc4:	d002      	beq.n	fcc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x2c>
		if (do_monitors
     fc6:	68a3      	ldr	r3, [r4, #8]
     fc8:	2b00      	cmp	r3, #0
     fca:	d15a      	bne.n	1082 <CONFIG_FPROTECT_BLOCK_SIZE+0x82>
		    || !sys_slist_is_empty(&clients)
     fcc:	b90d      	cbnz	r5, fd2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x32>
		    || (transit != NULL)) {
     fce:	2e00      	cmp	r6, #0
     fd0:	d071      	beq.n	10b6 <CONFIG_FPROTECT_BLOCK_SIZE+0xb6>
     fd2:	2300      	movs	r3, #0
     fd4:	e056      	b.n	1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     fd6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     fda:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     fdc:	2a01      	cmp	r2, #1
     fde:	d81e      	bhi.n	101e <CONFIG_FPROTECT_BLOCK_SIZE+0x1e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fe0:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     fe4:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     fe6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fe8:	b289      	uxth	r1, r1
     fea:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     fee:	d10a      	bne.n	1006 <CONFIG_FPROTECT_BLOCK_SIZE+0x6>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     ff0:	b13d      	cbz	r5, 1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
     ff2:	8b63      	ldrh	r3, [r4, #26]
     ff4:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     ff6:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     ff8:	3301      	adds	r3, #1
     ffa:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     ffc:	2a00      	cmp	r2, #0
     ffe:	d1fa      	bne.n	ff6 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x56>
    1000:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1002:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1006:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1008:	4620      	mov	r0, r4
    100a:	f009 fc3c 	bl	a886 <process_recheck>
    100e:	4606      	mov	r6, r0
    1010:	2800      	cmp	r0, #0
    1012:	d0d3      	beq.n	fbc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x1c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1014:	8b23      	ldrh	r3, [r4, #24]
    1016:	f043 0320 	orr.w	r3, r3, #32
    101a:	8323      	strh	r3, [r4, #24]
    101c:	e7cd      	b.n	fba <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x1a>
	} else if (state == ONOFF_STATE_TO_OFF) {
    101e:	2b04      	cmp	r3, #4
    1020:	d10c      	bne.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1022:	f021 0107 	bic.w	r1, r1, #7
    1026:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1028:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    102a:	4620      	mov	r0, r4
    102c:	f009 fc2b 	bl	a886 <process_recheck>
    1030:	4605      	mov	r5, r0
    1032:	2800      	cmp	r0, #0
    1034:	d0c1      	beq.n	fba <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1036:	f041 0120 	orr.w	r1, r1, #32
    103a:	8321      	strh	r1, [r4, #24]
    103c:	2500      	movs	r5, #0
    103e:	e7bc      	b.n	fba <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x1a>
		} else if (evt == EVT_START) {
    1040:	2803      	cmp	r0, #3
    1042:	d109      	bne.n	1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>
			transit = mgr->transitions->start;
    1044:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1046:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    104a:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    104c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1050:	8323      	strh	r3, [r4, #24]
}
    1052:	2500      	movs	r5, #0
		res = 0;
    1054:	462f      	mov	r7, r5
    1056:	e7b1      	b.n	fbc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x1c>
		} else if (evt == EVT_STOP) {
    1058:	2804      	cmp	r0, #4
    105a:	d106      	bne.n	106a <CONFIG_FPROTECT_BLOCK_SIZE+0x6a>
			transit = mgr->transitions->stop;
    105c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    105e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    1062:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1064:	f043 0304 	orr.w	r3, r3, #4
    1068:	e7f2      	b.n	1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>
		} else if (evt == EVT_RESET) {
    106a:	2805      	cmp	r0, #5
    106c:	d106      	bne.n	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
			transit = mgr->transitions->reset;
    106e:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1070:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    1074:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1076:	f043 0305 	orr.w	r3, r3, #5
    107a:	e7e9      	b.n	1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>
    107c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    107e:	462e      	mov	r6, r5
    1080:	e7e8      	b.n	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
				   && !sys_slist_is_empty(&mgr->monitors);
    1082:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1084:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1088:	8321      	strh	r1, [r4, #24]
    108a:	f38b 8811 	msr	BASEPRI, fp
    108e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1092:	b9fb      	cbnz	r3, 10d4 <CONFIG_FPROTECT_BLOCK_SIZE+0xd4>
	while (!sys_slist_is_empty(list)) {
    1094:	bb85      	cbnz	r5, 10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>
			if (transit != NULL) {
    1096:	b116      	cbz	r6, 109e <CONFIG_FPROTECT_BLOCK_SIZE+0x9e>
				transit(mgr, transition_complete);
    1098:	491f      	ldr	r1, [pc, #124]	; (1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>)
    109a:	4620      	mov	r0, r4
    109c:	47b0      	blx	r6
	__asm__ volatile(
    109e:	f04f 0320 	mov.w	r3, #32
    10a2:	f3ef 8b11 	mrs	fp, BASEPRI
    10a6:	f383 8812 	msr	BASEPRI_MAX, r3
    10aa:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    10ae:	8b23      	ldrh	r3, [r4, #24]
    10b0:	f023 0308 	bic.w	r3, r3, #8
    10b4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    10b6:	8b23      	ldrh	r3, [r4, #24]
    10b8:	06da      	lsls	r2, r3, #27
    10ba:	d525      	bpl.n	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    10bc:	f023 0310 	bic.w	r3, r3, #16
    10c0:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    10c2:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    10c4:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    10c8:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    10cc:	2900      	cmp	r1, #0
    10ce:	f47f af5e 	bne.w	f8e <process_event+0x32>
out:
    10d2:	e754      	b.n	f7e <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    10d4:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    10d6:	2900      	cmp	r1, #0
    10d8:	d0dc      	beq.n	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
	return node->next;
    10da:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    10de:	f8d1 b004 	ldr.w	fp, [r1, #4]
    10e2:	463b      	mov	r3, r7
    10e4:	4652      	mov	r2, sl
    10e6:	4620      	mov	r0, r4
    10e8:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    10ea:	f1b9 0f00 	cmp.w	r9, #0
    10ee:	d0d1      	beq.n	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
    10f0:	4649      	mov	r1, r9
    10f2:	f8d9 9000 	ldr.w	r9, [r9]
    10f6:	e7f2      	b.n	10de <CONFIG_FPROTECT_BLOCK_SIZE+0xde>
    10f8:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    10fa:	463b      	mov	r3, r7
    10fc:	4652      	mov	r2, sl
    10fe:	4620      	mov	r0, r4
    1100:	682d      	ldr	r5, [r5, #0]
    1102:	f009 fbdc 	bl	a8be <notify_one>
    1106:	e7c5      	b.n	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1108:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    110c:	bf1e      	ittt	ne
    110e:	f023 0320 	bicne.w	r3, r3, #32
    1112:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    1114:	2102      	movne	r1, #2
    1116:	e7d5      	b.n	10c4 <CONFIG_FPROTECT_BLOCK_SIZE+0xc4>
    1118:	0000a8eb 	.word	0x0000a8eb

0000111c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    111c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1120:	b091      	sub	sp, #68	; 0x44
    1122:	468b      	mov	fp, r1
    1124:	9002      	str	r0, [sp, #8]
    1126:	4692      	mov	sl, r2
    1128:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    112a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    112c:	f89a 0000 	ldrb.w	r0, [sl]
    1130:	b908      	cbnz	r0, 1136 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1132:	4628      	mov	r0, r5
    1134:	e35f      	b.n	17f6 <cbvprintf+0x6da>
		if (*fp != '%') {
    1136:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    1138:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    113c:	d007      	beq.n	114e <cbvprintf+0x32>
			OUTC('%');
    113e:	9b02      	ldr	r3, [sp, #8]
    1140:	4659      	mov	r1, fp
    1142:	4798      	blx	r3
    1144:	2800      	cmp	r0, #0
    1146:	f2c0 8356 	blt.w	17f6 <cbvprintf+0x6da>
    114a:	3501      	adds	r5, #1
			break;
    114c:	e212      	b.n	1574 <cbvprintf+0x458>
		} state = {
    114e:	2218      	movs	r2, #24
    1150:	2100      	movs	r1, #0
    1152:	a80a      	add	r0, sp, #40	; 0x28
    1154:	f00a fa00 	bl	b558 <memset>
	if (*sp == '%') {
    1158:	f89a 3001 	ldrb.w	r3, [sl, #1]
    115c:	2b25      	cmp	r3, #37	; 0x25
    115e:	d078      	beq.n	1252 <cbvprintf+0x136>
    1160:	2200      	movs	r2, #0
    1162:	4610      	mov	r0, r2
    1164:	4696      	mov	lr, r2
    1166:	4694      	mov	ip, r2
    1168:	4616      	mov	r6, r2
    116a:	4639      	mov	r1, r7
		switch (*sp) {
    116c:	f817 3b01 	ldrb.w	r3, [r7], #1
    1170:	2b2b      	cmp	r3, #43	; 0x2b
    1172:	f000 809d 	beq.w	12b0 <cbvprintf+0x194>
    1176:	f200 8094 	bhi.w	12a2 <cbvprintf+0x186>
    117a:	2b20      	cmp	r3, #32
    117c:	f000 809b 	beq.w	12b6 <cbvprintf+0x19a>
    1180:	2b23      	cmp	r3, #35	; 0x23
    1182:	f000 809b 	beq.w	12bc <cbvprintf+0x1a0>
    1186:	b12e      	cbz	r6, 1194 <cbvprintf+0x78>
    1188:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    118c:	f046 0604 	orr.w	r6, r6, #4
    1190:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1194:	f1bc 0f00 	cmp.w	ip, #0
    1198:	d005      	beq.n	11a6 <cbvprintf+0x8a>
    119a:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    119e:	f046 0608 	orr.w	r6, r6, #8
    11a2:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    11a6:	f1be 0f00 	cmp.w	lr, #0
    11aa:	d005      	beq.n	11b8 <cbvprintf+0x9c>
    11ac:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    11b0:	f046 0610 	orr.w	r6, r6, #16
    11b4:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    11b8:	b128      	cbz	r0, 11c6 <cbvprintf+0xaa>
    11ba:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    11be:	f040 0020 	orr.w	r0, r0, #32
    11c2:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    11c6:	b12a      	cbz	r2, 11d4 <cbvprintf+0xb8>
    11c8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    11cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    11d0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    11d4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    11d8:	f002 0044 	and.w	r0, r2, #68	; 0x44
    11dc:	2844      	cmp	r0, #68	; 0x44
    11de:	d103      	bne.n	11e8 <cbvprintf+0xcc>
		conv->flag_zero = false;
    11e0:	f36f 1286 	bfc	r2, #6, #1
    11e4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    11e8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    11ec:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    11ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    11f2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    11f6:	d17b      	bne.n	12f0 <cbvprintf+0x1d4>
		conv->width_star = true;
    11f8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    11fc:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    1200:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    1202:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    1206:	781a      	ldrb	r2, [r3, #0]
    1208:	2a2e      	cmp	r2, #46	; 0x2e
    120a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    120e:	bf0c      	ite	eq
    1210:	2101      	moveq	r1, #1
    1212:	2100      	movne	r1, #0
    1214:	f361 0241 	bfi	r2, r1, #1, #1
    1218:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    121c:	d174      	bne.n	1308 <cbvprintf+0x1ec>
	if (*sp == '*') {
    121e:	785a      	ldrb	r2, [r3, #1]
    1220:	2a2a      	cmp	r2, #42	; 0x2a
    1222:	d06a      	beq.n	12fa <cbvprintf+0x1de>
	++sp;
    1224:	3301      	adds	r3, #1
	size_t val = 0;
    1226:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    1228:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    122a:	4618      	mov	r0, r3
    122c:	f810 2b01 	ldrb.w	r2, [r0], #1
    1230:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1234:	2f09      	cmp	r7, #9
    1236:	f240 808e 	bls.w	1356 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    123a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    123e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    1240:	f3c2 0040 	ubfx	r0, r2, #1, #1
    1244:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    1248:	f361 0241 	bfi	r2, r1, #1, #1
    124c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1250:	e05a      	b.n	1308 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    1252:	f10a 0702 	add.w	r7, sl, #2
    1256:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    125a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    125e:	07d9      	lsls	r1, r3, #31
    1260:	f140 8149 	bpl.w	14f6 <cbvprintf+0x3da>
			width = va_arg(ap, int);
    1264:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    1268:	f1b9 0f00 	cmp.w	r9, #0
    126c:	da07      	bge.n	127e <cbvprintf+0x162>
				conv->flag_dash = true;
    126e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1272:	f042 0204 	orr.w	r2, r2, #4
    1276:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    127a:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    127e:	075a      	lsls	r2, r3, #29
    1280:	f140 8142 	bpl.w	1508 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    1284:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    1288:	f1b8 0f00 	cmp.w	r8, #0
    128c:	f280 8141 	bge.w	1512 <cbvprintf+0x3f6>
				conv->prec_present = false;
    1290:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1294:	f36f 0341 	bfc	r3, #1, #1
    1298:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    129c:	f04f 38ff 	mov.w	r8, #4294967295
    12a0:	e137      	b.n	1512 <cbvprintf+0x3f6>
		switch (*sp) {
    12a2:	2b2d      	cmp	r3, #45	; 0x2d
    12a4:	d00c      	beq.n	12c0 <cbvprintf+0x1a4>
    12a6:	2b30      	cmp	r3, #48	; 0x30
    12a8:	f47f af6d 	bne.w	1186 <cbvprintf+0x6a>
			conv->flag_zero = true;
    12ac:	2201      	movs	r2, #1
	} while (loop);
    12ae:	e75c      	b.n	116a <cbvprintf+0x4e>
			conv->flag_plus = true;
    12b0:	f04f 0c01 	mov.w	ip, #1
    12b4:	e759      	b.n	116a <cbvprintf+0x4e>
			conv->flag_space = true;
    12b6:	f04f 0e01 	mov.w	lr, #1
    12ba:	e756      	b.n	116a <cbvprintf+0x4e>
			conv->flag_hash = true;
    12bc:	2001      	movs	r0, #1
    12be:	e754      	b.n	116a <cbvprintf+0x4e>
		switch (*sp) {
    12c0:	2601      	movs	r6, #1
    12c2:	e752      	b.n	116a <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    12c4:	fb0c 0202 	mla	r2, ip, r2, r0
    12c8:	3a30      	subs	r2, #48	; 0x30
    12ca:	4633      	mov	r3, r6
    12cc:	461e      	mov	r6, r3
    12ce:	f816 0b01 	ldrb.w	r0, [r6], #1
    12d2:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    12d6:	2f09      	cmp	r7, #9
    12d8:	d9f4      	bls.n	12c4 <cbvprintf+0x1a8>
	if (sp != wp) {
    12da:	4299      	cmp	r1, r3
    12dc:	d093      	beq.n	1206 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    12de:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    12e2:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    12e4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    12e6:	f362 0141 	bfi	r1, r2, #1, #1
    12ea:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    12ee:	e78a      	b.n	1206 <cbvprintf+0xea>
    12f0:	460b      	mov	r3, r1
	size_t val = 0;
    12f2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    12f4:	f04f 0c0a 	mov.w	ip, #10
    12f8:	e7e8      	b.n	12cc <cbvprintf+0x1b0>
		conv->prec_star = true;
    12fa:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    12fe:	f042 0204 	orr.w	r2, r2, #4
    1302:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    1306:	3302      	adds	r3, #2
	switch (*sp) {
    1308:	461f      	mov	r7, r3
    130a:	f817 2b01 	ldrb.w	r2, [r7], #1
    130e:	2a6c      	cmp	r2, #108	; 0x6c
    1310:	d041      	beq.n	1396 <cbvprintf+0x27a>
    1312:	d825      	bhi.n	1360 <cbvprintf+0x244>
    1314:	2a68      	cmp	r2, #104	; 0x68
    1316:	d02b      	beq.n	1370 <cbvprintf+0x254>
    1318:	2a6a      	cmp	r2, #106	; 0x6a
    131a:	d046      	beq.n	13aa <cbvprintf+0x28e>
    131c:	2a4c      	cmp	r2, #76	; 0x4c
    131e:	d04c      	beq.n	13ba <cbvprintf+0x29e>
    1320:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    1322:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1326:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    132a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    132e:	2a78      	cmp	r2, #120	; 0x78
    1330:	f200 80d9 	bhi.w	14e6 <cbvprintf+0x3ca>
    1334:	2a57      	cmp	r2, #87	; 0x57
    1336:	d84d      	bhi.n	13d4 <cbvprintf+0x2b8>
    1338:	2a41      	cmp	r2, #65	; 0x41
    133a:	d003      	beq.n	1344 <cbvprintf+0x228>
    133c:	3a45      	subs	r2, #69	; 0x45
    133e:	2a02      	cmp	r2, #2
    1340:	f200 80d1 	bhi.w	14e6 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    1344:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1348:	2204      	movs	r2, #4
    134a:	f362 0302 	bfi	r3, r2, #0, #3
    134e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    1352:	2301      	movs	r3, #1
			break;
    1354:	e09e      	b.n	1494 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    1356:	fb06 2101 	mla	r1, r6, r1, r2
    135a:	3930      	subs	r1, #48	; 0x30
    135c:	4603      	mov	r3, r0
    135e:	e764      	b.n	122a <cbvprintf+0x10e>
	switch (*sp) {
    1360:	2a74      	cmp	r2, #116	; 0x74
    1362:	d026      	beq.n	13b2 <cbvprintf+0x296>
    1364:	2a7a      	cmp	r2, #122	; 0x7a
    1366:	d1db      	bne.n	1320 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    1368:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    136c:	2206      	movs	r2, #6
    136e:	e00d      	b.n	138c <cbvprintf+0x270>
		if (*++sp == 'h') {
    1370:	785a      	ldrb	r2, [r3, #1]
    1372:	2a68      	cmp	r2, #104	; 0x68
    1374:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1378:	d106      	bne.n	1388 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    137a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    137c:	f361 02c6 	bfi	r2, r1, #3, #4
    1380:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    1384:	1c9f      	adds	r7, r3, #2
    1386:	e7cc      	b.n	1322 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    1388:	4613      	mov	r3, r2
    138a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    138c:	f362 03c6 	bfi	r3, r2, #3, #4
    1390:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    1394:	e7c5      	b.n	1322 <cbvprintf+0x206>
		if (*++sp == 'l') {
    1396:	785a      	ldrb	r2, [r3, #1]
    1398:	2a6c      	cmp	r2, #108	; 0x6c
    139a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    139e:	d101      	bne.n	13a4 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    13a0:	2104      	movs	r1, #4
    13a2:	e7eb      	b.n	137c <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    13a4:	4613      	mov	r3, r2
    13a6:	2203      	movs	r2, #3
    13a8:	e7f0      	b.n	138c <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    13aa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    13ae:	2205      	movs	r2, #5
    13b0:	e7ec      	b.n	138c <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    13b2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    13b6:	2207      	movs	r2, #7
    13b8:	e7e8      	b.n	138c <cbvprintf+0x270>
		conv->unsupported = true;
    13ba:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    13be:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    13c2:	f023 0302 	bic.w	r3, r3, #2
    13c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    13ca:	f043 0302 	orr.w	r3, r3, #2
    13ce:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    13d2:	e7a6      	b.n	1322 <cbvprintf+0x206>
	switch (conv->specifier) {
    13d4:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    13d8:	2920      	cmp	r1, #32
    13da:	f200 8084 	bhi.w	14e6 <cbvprintf+0x3ca>
    13de:	a001      	add	r0, pc, #4	; (adr r0, 13e4 <cbvprintf+0x2c8>)
    13e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    13e4:	000014a9 	.word	0x000014a9
    13e8:	000014e7 	.word	0x000014e7
    13ec:	000014e7 	.word	0x000014e7
    13f0:	000014e7 	.word	0x000014e7
    13f4:	000014e7 	.word	0x000014e7
    13f8:	000014e7 	.word	0x000014e7
    13fc:	000014e7 	.word	0x000014e7
    1400:	000014e7 	.word	0x000014e7
    1404:	000014e7 	.word	0x000014e7
    1408:	00001345 	.word	0x00001345
    140c:	000014e7 	.word	0x000014e7
    1410:	000014a9 	.word	0x000014a9
    1414:	00001469 	.word	0x00001469
    1418:	00001345 	.word	0x00001345
    141c:	00001345 	.word	0x00001345
    1420:	00001345 	.word	0x00001345
    1424:	000014e7 	.word	0x000014e7
    1428:	00001469 	.word	0x00001469
    142c:	000014e7 	.word	0x000014e7
    1430:	000014e7 	.word	0x000014e7
    1434:	000014e7 	.word	0x000014e7
    1438:	000014e7 	.word	0x000014e7
    143c:	000014b1 	.word	0x000014b1
    1440:	000014a9 	.word	0x000014a9
    1444:	000014cd 	.word	0x000014cd
    1448:	000014e7 	.word	0x000014e7
    144c:	000014e7 	.word	0x000014e7
    1450:	000014cd 	.word	0x000014cd
    1454:	000014e7 	.word	0x000014e7
    1458:	000014a9 	.word	0x000014a9
    145c:	000014e7 	.word	0x000014e7
    1460:	000014e7 	.word	0x000014e7
    1464:	000014a9 	.word	0x000014a9
		conv->specifier_cat = SPECIFIER_SINT;
    1468:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    146c:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    146e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1472:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1476:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1478:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    147c:	bf02      	ittt	eq
    147e:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    1482:	f041 0101 	orreq.w	r1, r1, #1
    1486:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    148a:	2a63      	cmp	r2, #99	; 0x63
    148c:	d131      	bne.n	14f2 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    148e:	3b00      	subs	r3, #0
    1490:	bf18      	it	ne
    1492:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1494:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1498:	f3c2 0140 	ubfx	r1, r2, #1, #1
    149c:	430b      	orrs	r3, r1
    149e:	f363 0241 	bfi	r2, r3, #1, #1
    14a2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    14a6:	e6d8      	b.n	125a <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    14a8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    14ac:	2002      	movs	r0, #2
    14ae:	e7de      	b.n	146e <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    14b0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    14b4:	f003 0378 	and.w	r3, r3, #120	; 0x78
    14b8:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    14bc:	2103      	movs	r1, #3
    14be:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    14c2:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    14c4:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    14c8:	4143      	adcs	r3, r0
    14ca:	e7e3      	b.n	1494 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    14cc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    14d0:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    14d2:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    14d6:	f361 0202 	bfi	r2, r1, #0, #3
    14da:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    14de:	bf14      	ite	ne
    14e0:	2301      	movne	r3, #1
    14e2:	2300      	moveq	r3, #0
    14e4:	e7d6      	b.n	1494 <cbvprintf+0x378>
		conv->invalid = true;
    14e6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    14ea:	f043 0301 	orr.w	r3, r3, #1
    14ee:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    14f2:	2300      	movs	r3, #0
    14f4:	e7ce      	b.n	1494 <cbvprintf+0x378>
		} else if (conv->width_present) {
    14f6:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    14fa:	2a00      	cmp	r2, #0
			width = conv->width_value;
    14fc:	bfb4      	ite	lt
    14fe:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    1502:	f04f 39ff 	movge.w	r9, #4294967295
    1506:	e6ba      	b.n	127e <cbvprintf+0x162>
		} else if (conv->prec_present) {
    1508:	079b      	lsls	r3, r3, #30
    150a:	f57f aec7 	bpl.w	129c <cbvprintf+0x180>
			precision = conv->prec_value;
    150e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    1512:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    1516:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1518:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    151c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    1520:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1524:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1526:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    152a:	d138      	bne.n	159e <cbvprintf+0x482>
			switch (length_mod) {
    152c:	1ecb      	subs	r3, r1, #3
    152e:	2b04      	cmp	r3, #4
    1530:	d822      	bhi.n	1578 <cbvprintf+0x45c>
    1532:	e8df f003 	tbb	[pc, r3]
    1536:	0903      	.short	0x0903
    1538:	2109      	.short	0x2109
    153a:	21          	.byte	0x21
    153b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    153c:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    1540:	17da      	asrs	r2, r3, #31
    1542:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    1546:	e006      	b.n	1556 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    1548:	3407      	adds	r4, #7
    154a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    154e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1552:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    1556:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    155a:	f013 0603 	ands.w	r6, r3, #3
    155e:	d056      	beq.n	160e <cbvprintf+0x4f2>
			OUTS(sp, fp);
    1560:	9802      	ldr	r0, [sp, #8]
    1562:	463b      	mov	r3, r7
    1564:	4652      	mov	r2, sl
    1566:	4659      	mov	r1, fp
    1568:	f009 fc8f 	bl	ae8a <outs>
    156c:	2800      	cmp	r0, #0
    156e:	f2c0 8142 	blt.w	17f6 <cbvprintf+0x6da>
    1572:	4405      	add	r5, r0
			continue;
    1574:	46ba      	mov	sl, r7
    1576:	e5d9      	b.n	112c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1578:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    157c:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    157e:	ea4f 72e3 	mov.w	r2, r3, asr #31
    1582:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1586:	d105      	bne.n	1594 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    1588:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    158c:	930a      	str	r3, [sp, #40]	; 0x28
    158e:	2300      	movs	r3, #0
    1590:	930b      	str	r3, [sp, #44]	; 0x2c
    1592:	e7e0      	b.n	1556 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    1594:	2902      	cmp	r1, #2
    1596:	d1de      	bne.n	1556 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    1598:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    159c:	e7d0      	b.n	1540 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    159e:	2b02      	cmp	r3, #2
    15a0:	d123      	bne.n	15ea <cbvprintf+0x4ce>
			switch (length_mod) {
    15a2:	1ecb      	subs	r3, r1, #3
    15a4:	2b04      	cmp	r3, #4
    15a6:	d813      	bhi.n	15d0 <cbvprintf+0x4b4>
    15a8:	e8df f003 	tbb	[pc, r3]
    15ac:	120a0a03 	.word	0x120a0a03
    15b0:	12          	.byte	0x12
    15b1:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    15b2:	6822      	ldr	r2, [r4, #0]
    15b4:	920a      	str	r2, [sp, #40]	; 0x28
    15b6:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    15b8:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    15ba:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    15bc:	4604      	mov	r4, r0
    15be:	e7ca      	b.n	1556 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    15c0:	1de0      	adds	r0, r4, #7
    15c2:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    15c6:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    15ca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    15ce:	e7f5      	b.n	15bc <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    15d0:	f854 3b04 	ldr.w	r3, [r4], #4
    15d4:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    15d6:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    15d8:	f04f 0300 	mov.w	r3, #0
    15dc:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    15de:	d0d3      	beq.n	1588 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    15e0:	2902      	cmp	r1, #2
    15e2:	d1b8      	bne.n	1556 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    15e4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    15e8:	e7d0      	b.n	158c <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    15ea:	2b04      	cmp	r3, #4
    15ec:	d109      	bne.n	1602 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    15ee:	1de3      	adds	r3, r4, #7
    15f0:	f023 0307 	bic.w	r3, r3, #7
    15f4:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    15f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    15fc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    1600:	e7a9      	b.n	1556 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1602:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1604:	bf04      	itt	eq
    1606:	f854 3b04 	ldreq.w	r3, [r4], #4
    160a:	930a      	streq	r3, [sp, #40]	; 0x28
    160c:	e7a3      	b.n	1556 <cbvprintf+0x43a>
		switch (conv->specifier) {
    160e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1612:	2878      	cmp	r0, #120	; 0x78
    1614:	d8ae      	bhi.n	1574 <cbvprintf+0x458>
    1616:	2862      	cmp	r0, #98	; 0x62
    1618:	d822      	bhi.n	1660 <cbvprintf+0x544>
    161a:	2825      	cmp	r0, #37	; 0x25
    161c:	f43f ad8f 	beq.w	113e <cbvprintf+0x22>
    1620:	2858      	cmp	r0, #88	; 0x58
    1622:	d1a7      	bne.n	1574 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1624:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1628:	9300      	str	r3, [sp, #0]
    162a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    162e:	ab04      	add	r3, sp, #16
    1630:	aa0c      	add	r2, sp, #48	; 0x30
    1632:	f009 fbe4 	bl	adfe <encode_uint>
    1636:	4682      	mov	sl, r0
			if (precision >= 0) {
    1638:	f1b8 0f00 	cmp.w	r8, #0
    163c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    1640:	db0c      	blt.n	165c <cbvprintf+0x540>
				conv->flag_zero = false;
    1642:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    1646:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    164a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    164e:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1650:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1654:	d902      	bls.n	165c <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    1656:	eba8 0303 	sub.w	r3, r8, r3
    165a:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    165c:	4680      	mov	r8, r0
    165e:	e03d      	b.n	16dc <cbvprintf+0x5c0>
		switch (conv->specifier) {
    1660:	3863      	subs	r0, #99	; 0x63
    1662:	2815      	cmp	r0, #21
    1664:	d886      	bhi.n	1574 <cbvprintf+0x458>
    1666:	a201      	add	r2, pc, #4	; (adr r2, 166c <cbvprintf+0x550>)
    1668:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    166c:	000016ed 	.word	0x000016ed
    1670:	00001751 	.word	0x00001751
    1674:	00001575 	.word	0x00001575
    1678:	00001575 	.word	0x00001575
    167c:	00001575 	.word	0x00001575
    1680:	00001575 	.word	0x00001575
    1684:	00001751 	.word	0x00001751
    1688:	00001575 	.word	0x00001575
    168c:	00001575 	.word	0x00001575
    1690:	00001575 	.word	0x00001575
    1694:	00001575 	.word	0x00001575
    1698:	000017ab 	.word	0x000017ab
    169c:	00001779 	.word	0x00001779
    16a0:	0000177d 	.word	0x0000177d
    16a4:	00001575 	.word	0x00001575
    16a8:	00001575 	.word	0x00001575
    16ac:	000016c5 	.word	0x000016c5
    16b0:	00001575 	.word	0x00001575
    16b4:	00001779 	.word	0x00001779
    16b8:	00001575 	.word	0x00001575
    16bc:	00001575 	.word	0x00001575
    16c0:	00001779 	.word	0x00001779
			if (precision >= 0) {
    16c4:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    16c8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    16cc:	db0a      	blt.n	16e4 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    16ce:	4641      	mov	r1, r8
    16d0:	4650      	mov	r0, sl
    16d2:	f009 ff21 	bl	b518 <strnlen>
			bpe = bps + len;
    16d6:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    16da:	2600      	movs	r6, #0
		if (bps == NULL) {
    16dc:	f1ba 0f00 	cmp.w	sl, #0
    16e0:	d10c      	bne.n	16fc <cbvprintf+0x5e0>
    16e2:	e747      	b.n	1574 <cbvprintf+0x458>
				len = strlen(bps);
    16e4:	4650      	mov	r0, sl
    16e6:	f009 ff10 	bl	b50a <strlen>
    16ea:	e7f4      	b.n	16d6 <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    16ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    16ee:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    16f2:	2600      	movs	r6, #0
			bps = buf;
    16f4:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    16f8:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    16fc:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1700:	b106      	cbz	r6, 1704 <cbvprintf+0x5e8>
			nj_len += 1U;
    1702:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1704:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1708:	06d0      	lsls	r0, r2, #27
    170a:	d568      	bpl.n	17de <cbvprintf+0x6c2>
			nj_len += 2U;
    170c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    170e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1710:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    1712:	bf48      	it	mi
    1714:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    1716:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1718:	bf48      	it	mi
    171a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    171c:	f1b9 0f00 	cmp.w	r9, #0
    1720:	dd76      	ble.n	1810 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    1722:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    1726:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    172a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    172e:	9303      	str	r3, [sp, #12]
    1730:	0753      	lsls	r3, r2, #29
    1732:	d46d      	bmi.n	1810 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    1734:	0650      	lsls	r0, r2, #25
    1736:	d561      	bpl.n	17fc <cbvprintf+0x6e0>
					if (sign != 0) {
    1738:	b146      	cbz	r6, 174c <cbvprintf+0x630>
						OUTC(sign);
    173a:	9b02      	ldr	r3, [sp, #8]
    173c:	4659      	mov	r1, fp
    173e:	4630      	mov	r0, r6
    1740:	4798      	blx	r3
    1742:	2800      	cmp	r0, #0
    1744:	db57      	blt.n	17f6 <cbvprintf+0x6da>
						sign = 0;
    1746:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1748:	3501      	adds	r5, #1
						sign = 0;
    174a:	461e      	mov	r6, r3
					pad = '0';
    174c:	2330      	movs	r3, #48	; 0x30
    174e:	e056      	b.n	17fe <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    1750:	071e      	lsls	r6, r3, #28
    1752:	d40f      	bmi.n	1774 <cbvprintf+0x658>
				sign = ' ';
    1754:	f013 0610 	ands.w	r6, r3, #16
    1758:	bf18      	it	ne
    175a:	2620      	movne	r6, #32
			sint = value->sint;
    175c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    1760:	2b00      	cmp	r3, #0
    1762:	f6bf af5f 	bge.w	1624 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
    1766:	4252      	negs	r2, r2
    1768:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    176c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    1770:	262d      	movs	r6, #45	; 0x2d
    1772:	e757      	b.n	1624 <cbvprintf+0x508>
				sign = '+';
    1774:	262b      	movs	r6, #43	; 0x2b
    1776:	e7f1      	b.n	175c <cbvprintf+0x640>
		switch (conv->specifier) {
    1778:	2600      	movs	r6, #0
    177a:	e753      	b.n	1624 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    177c:	980a      	ldr	r0, [sp, #40]	; 0x28
    177e:	b340      	cbz	r0, 17d2 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1780:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1784:	9300      	str	r3, [sp, #0]
    1786:	aa0c      	add	r2, sp, #48	; 0x30
    1788:	ab04      	add	r3, sp, #16
    178a:	2100      	movs	r1, #0
    178c:	f009 fb37 	bl	adfe <encode_uint>
				conv->altform_0c = true;
    1790:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    1794:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1798:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    179c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    17a0:	4682      	mov	sl, r0
				conv->altform_0c = true;
    17a2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    17a6:	2600      	movs	r6, #0
				goto prec_int_pad0;
    17a8:	e746      	b.n	1638 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    17aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    17ac:	2907      	cmp	r1, #7
    17ae:	f63f aee1 	bhi.w	1574 <cbvprintf+0x458>
    17b2:	e8df f001 	tbb	[pc, r1]
    17b6:	040c      	.short	0x040c
    17b8:	08080c06 	.word	0x08080c06
    17bc:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    17be:	701d      	strb	r5, [r3, #0]
		break;
    17c0:	e6d8      	b.n	1574 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    17c2:	801d      	strh	r5, [r3, #0]
		break;
    17c4:	e6d6      	b.n	1574 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    17c6:	17ea      	asrs	r2, r5, #31
    17c8:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    17cc:	e6d2      	b.n	1574 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    17ce:	601d      	str	r5, [r3, #0]
		break;
    17d0:	e6d0      	b.n	1574 <cbvprintf+0x458>
			bps = "(nil)";
    17d2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 189c <cbvprintf+0x780>
    17d6:	4606      	mov	r6, r0
			bpe = bps + 5;
    17d8:	f10a 0805 	add.w	r8, sl, #5
    17dc:	e78e      	b.n	16fc <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    17de:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    17e0:	bf48      	it	mi
    17e2:	3301      	addmi	r3, #1
    17e4:	e793      	b.n	170e <cbvprintf+0x5f2>
					OUTC(pad);
    17e6:	4618      	mov	r0, r3
    17e8:	9303      	str	r3, [sp, #12]
    17ea:	4659      	mov	r1, fp
    17ec:	9b02      	ldr	r3, [sp, #8]
    17ee:	4798      	blx	r3
    17f0:	2800      	cmp	r0, #0
    17f2:	9b03      	ldr	r3, [sp, #12]
    17f4:	da04      	bge.n	1800 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    17f6:	b011      	add	sp, #68	; 0x44
    17f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    17fc:	2320      	movs	r3, #32
    17fe:	444d      	add	r5, r9
    1800:	464a      	mov	r2, r9
				while (width-- > 0) {
    1802:	2a00      	cmp	r2, #0
    1804:	eba5 0109 	sub.w	r1, r5, r9
    1808:	f109 39ff 	add.w	r9, r9, #4294967295
    180c:	dceb      	bgt.n	17e6 <cbvprintf+0x6ca>
    180e:	460d      	mov	r5, r1
		if (sign != 0) {
    1810:	b136      	cbz	r6, 1820 <cbvprintf+0x704>
			OUTC(sign);
    1812:	9b02      	ldr	r3, [sp, #8]
    1814:	4659      	mov	r1, fp
    1816:	4630      	mov	r0, r6
    1818:	4798      	blx	r3
    181a:	2800      	cmp	r0, #0
    181c:	dbeb      	blt.n	17f6 <cbvprintf+0x6da>
    181e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1820:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1824:	06d9      	lsls	r1, r3, #27
    1826:	d401      	bmi.n	182c <cbvprintf+0x710>
    1828:	071a      	lsls	r2, r3, #28
    182a:	d506      	bpl.n	183a <cbvprintf+0x71e>
				OUTC('0');
    182c:	9b02      	ldr	r3, [sp, #8]
    182e:	4659      	mov	r1, fp
    1830:	2030      	movs	r0, #48	; 0x30
    1832:	4798      	blx	r3
    1834:	2800      	cmp	r0, #0
    1836:	dbde      	blt.n	17f6 <cbvprintf+0x6da>
    1838:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    183a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    183e:	06db      	lsls	r3, r3, #27
    1840:	d507      	bpl.n	1852 <cbvprintf+0x736>
				OUTC(conv->specifier);
    1842:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1846:	9b02      	ldr	r3, [sp, #8]
    1848:	4659      	mov	r1, fp
    184a:	4798      	blx	r3
    184c:	2800      	cmp	r0, #0
    184e:	dbd2      	blt.n	17f6 <cbvprintf+0x6da>
    1850:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1852:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    1854:	442e      	add	r6, r5
    1856:	1b73      	subs	r3, r6, r5
    1858:	2b00      	cmp	r3, #0
    185a:	dc16      	bgt.n	188a <cbvprintf+0x76e>
			OUTS(bps, bpe);
    185c:	9802      	ldr	r0, [sp, #8]
    185e:	4643      	mov	r3, r8
    1860:	4652      	mov	r2, sl
    1862:	4659      	mov	r1, fp
    1864:	f009 fb11 	bl	ae8a <outs>
    1868:	2800      	cmp	r0, #0
    186a:	dbc4      	blt.n	17f6 <cbvprintf+0x6da>
    186c:	4405      	add	r5, r0
		while (width > 0) {
    186e:	44a9      	add	r9, r5
    1870:	eba9 0305 	sub.w	r3, r9, r5
    1874:	2b00      	cmp	r3, #0
    1876:	f77f ae7d 	ble.w	1574 <cbvprintf+0x458>
			OUTC(' ');
    187a:	9b02      	ldr	r3, [sp, #8]
    187c:	4659      	mov	r1, fp
    187e:	2020      	movs	r0, #32
    1880:	4798      	blx	r3
    1882:	2800      	cmp	r0, #0
    1884:	dbb7      	blt.n	17f6 <cbvprintf+0x6da>
    1886:	3501      	adds	r5, #1
			--width;
    1888:	e7f2      	b.n	1870 <cbvprintf+0x754>
				OUTC('0');
    188a:	9b02      	ldr	r3, [sp, #8]
    188c:	4659      	mov	r1, fp
    188e:	2030      	movs	r0, #48	; 0x30
    1890:	4798      	blx	r3
    1892:	2800      	cmp	r0, #0
    1894:	dbaf      	blt.n	17f6 <cbvprintf+0x6da>
    1896:	3501      	adds	r5, #1
    1898:	e7dd      	b.n	1856 <cbvprintf+0x73a>
    189a:	bf00      	nop
    189c:	0000cd13 	.word	0x0000cd13

000018a0 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    18a0:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    18a2:	4910      	ldr	r1, [pc, #64]	; (18e4 <enable_logger+0x44>)
    18a4:	4810      	ldr	r0, [pc, #64]	; (18e8 <enable_logger+0x48>)
{
    18a6:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    18a8:	2200      	movs	r2, #0
    18aa:	f00a fd94 	bl	c3d6 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    18ae:	4d0f      	ldr	r5, [pc, #60]	; (18ec <enable_logger+0x4c>)
    18b0:	490f      	ldr	r1, [pc, #60]	; (18f0 <enable_logger+0x50>)
    18b2:	2200      	movs	r2, #0
    18b4:	2300      	movs	r3, #0
    18b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    18ba:	2400      	movs	r4, #0
    18bc:	230e      	movs	r3, #14
    18be:	e9cd 3403 	strd	r3, r4, [sp, #12]
    18c2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    18c6:	4b0b      	ldr	r3, [pc, #44]	; (18f4 <enable_logger+0x54>)
    18c8:	9400      	str	r4, [sp, #0]
    18ca:	f44f 7240 	mov.w	r2, #768	; 0x300
    18ce:	4628      	mov	r0, r5
    18d0:	f007 fe5c 	bl	958c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    18d4:	4908      	ldr	r1, [pc, #32]	; (18f8 <enable_logger+0x58>)
    18d6:	4628      	mov	r0, r5
    18d8:	f00a fafa 	bl	bed0 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    18dc:	4620      	mov	r0, r4
    18de:	b009      	add	sp, #36	; 0x24
    18e0:	bd30      	pop	{r4, r5, pc}
    18e2:	bf00      	nop
    18e4:	000018fd 	.word	0x000018fd
    18e8:	20000660 	.word	0x20000660
    18ec:	20000698 	.word	0x20000698
    18f0:	20001e00 	.word	0x20001e00
    18f4:	00001b21 	.word	0x00001b21
    18f8:	0000cd19 	.word	0x0000cd19

000018fc <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    18fc:	4801      	ldr	r0, [pc, #4]	; (1904 <log_process_thread_timer_expiry_fn+0x8>)
    18fe:	f007 bfd7 	b.w	98b0 <z_impl_k_sem_give>
    1902:	bf00      	nop
    1904:	20000194 	.word	0x20000194

00001908 <log_format_func_t_get>:
}
    1908:	4b01      	ldr	r3, [pc, #4]	; (1910 <log_format_func_t_get+0x8>)
    190a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    190e:	4770      	bx	lr
    1910:	0000c8b0 	.word	0x0000c8b0

00001914 <log_init>:
{
    1914:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1916:	4b12      	ldr	r3, [pc, #72]	; (1960 <log_init+0x4c>)
    1918:	f3bf 8f5b 	dmb	ish
    191c:	e853 5f00 	ldrex	r5, [r3]
    1920:	1c6a      	adds	r2, r5, #1
    1922:	e843 2100 	strex	r1, r2, [r3]
    1926:	2900      	cmp	r1, #0
    1928:	d1f8      	bne.n	191c <log_init+0x8>
    192a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    192e:	b92d      	cbnz	r5, 193c <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    1930:	4c0c      	ldr	r4, [pc, #48]	; (1964 <log_init+0x50>)
    1932:	4e0d      	ldr	r6, [pc, #52]	; (1968 <log_init+0x54>)
    1934:	1b36      	subs	r6, r6, r4
    1936:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    1938:	42b5      	cmp	r5, r6
    193a:	db00      	blt.n	193e <log_init+0x2a>
}
    193c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    193e:	7b23      	ldrb	r3, [r4, #12]
    1940:	b153      	cbz	r3, 1958 <log_init+0x44>
			if (backend->api->init != NULL) {
    1942:	6823      	ldr	r3, [r4, #0]
    1944:	699b      	ldr	r3, [r3, #24]
    1946:	b10b      	cbz	r3, 194c <log_init+0x38>
				backend->api->init(backend);
    1948:	4620      	mov	r0, r4
    194a:	4798      	blx	r3
			log_backend_enable(backend,
    194c:	6863      	ldr	r3, [r4, #4]
    194e:	2204      	movs	r2, #4
    1950:	6819      	ldr	r1, [r3, #0]
    1952:	4620      	mov	r0, r4
    1954:	f000 f992 	bl	1c7c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1958:	3501      	adds	r5, #1
    195a:	3410      	adds	r4, #16
    195c:	e7ec      	b.n	1938 <log_init+0x24>
    195e:	bf00      	nop
    1960:	20000a4c 	.word	0x20000a4c
    1964:	0000c830 	.word	0x0000c830
    1968:	0000c840 	.word	0x0000c840

0000196c <z_log_notify_backend_enabled>:
{
    196c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    196e:	4c04      	ldr	r4, [pc, #16]	; (1980 <z_log_notify_backend_enabled+0x14>)
    1970:	7823      	ldrb	r3, [r4, #0]
    1972:	b913      	cbnz	r3, 197a <z_log_notify_backend_enabled+0xe>
    1974:	4803      	ldr	r0, [pc, #12]	; (1984 <z_log_notify_backend_enabled+0x18>)
    1976:	f007 ff9b 	bl	98b0 <z_impl_k_sem_give>
	backend_attached = true;
    197a:	2301      	movs	r3, #1
    197c:	7023      	strb	r3, [r4, #0]
}
    197e:	bd10      	pop	{r4, pc}
    1980:	200019b2 	.word	0x200019b2
    1984:	20000194 	.word	0x20000194

00001988 <z_log_dropped>:
    1988:	4b0c      	ldr	r3, [pc, #48]	; (19bc <z_log_dropped+0x34>)
    198a:	f3bf 8f5b 	dmb	ish
    198e:	e853 2f00 	ldrex	r2, [r3]
    1992:	3201      	adds	r2, #1
    1994:	e843 2100 	strex	r1, r2, [r3]
    1998:	2900      	cmp	r1, #0
    199a:	d1f8      	bne.n	198e <z_log_dropped+0x6>
    199c:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    19a0:	b158      	cbz	r0, 19ba <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    19a2:	f3bf 8f5b 	dmb	ish
    19a6:	4b06      	ldr	r3, [pc, #24]	; (19c0 <z_log_dropped+0x38>)
    19a8:	e853 2f00 	ldrex	r2, [r3]
    19ac:	3a01      	subs	r2, #1
    19ae:	e843 2100 	strex	r1, r2, [r3]
    19b2:	2900      	cmp	r1, #0
    19b4:	d1f8      	bne.n	19a8 <z_log_dropped+0x20>
    19b6:	f3bf 8f5b 	dmb	ish
}
    19ba:	4770      	bx	lr
    19bc:	20000a48 	.word	0x20000a48
    19c0:	20000a44 	.word	0x20000a44

000019c4 <z_log_dropped_read_and_clear>:
}
    19c4:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    19c6:	4b06      	ldr	r3, [pc, #24]	; (19e0 <z_log_dropped_read_and_clear+0x1c>)
    19c8:	f3bf 8f5b 	dmb	ish
    19cc:	4602      	mov	r2, r0
    19ce:	e853 0f00 	ldrex	r0, [r3]
    19d2:	e843 2100 	strex	r1, r2, [r3]
    19d6:	2900      	cmp	r1, #0
    19d8:	d1f9      	bne.n	19ce <z_log_dropped_read_and_clear+0xa>
    19da:	f3bf 8f5b 	dmb	ish
    19de:	4770      	bx	lr
    19e0:	20000a48 	.word	0x20000a48

000019e4 <dropped_notify>:
{
    19e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    19e6:	f7ff ffed 	bl	19c4 <z_log_dropped_read_and_clear>
    19ea:	4c0a      	ldr	r4, [pc, #40]	; (1a14 <dropped_notify+0x30>)
    19ec:	4d0a      	ldr	r5, [pc, #40]	; (1a18 <dropped_notify+0x34>)
    19ee:	1b2d      	subs	r5, r5, r4
    19f0:	4607      	mov	r7, r0
    19f2:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    19f4:	2600      	movs	r6, #0
    19f6:	42ae      	cmp	r6, r5
    19f8:	db00      	blt.n	19fc <dropped_notify+0x18>
}
    19fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    19fc:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    19fe:	795b      	ldrb	r3, [r3, #5]
    1a00:	b12b      	cbz	r3, 1a0e <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    1a02:	6823      	ldr	r3, [r4, #0]
    1a04:	691b      	ldr	r3, [r3, #16]
    1a06:	b113      	cbz	r3, 1a0e <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    1a08:	4639      	mov	r1, r7
    1a0a:	4620      	mov	r0, r4
    1a0c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1a0e:	3601      	adds	r6, #1
    1a10:	3410      	adds	r4, #16
    1a12:	e7f0      	b.n	19f6 <dropped_notify+0x12>
    1a14:	0000c830 	.word	0x0000c830
    1a18:	0000c840 	.word	0x0000c840

00001a1c <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    1a1c:	4901      	ldr	r1, [pc, #4]	; (1a24 <z_log_msg2_init+0x8>)
    1a1e:	4802      	ldr	r0, [pc, #8]	; (1a28 <z_log_msg2_init+0xc>)
    1a20:	f009 bafe 	b.w	b020 <mpsc_pbuf_init>
    1a24:	0000c8bc 	.word	0x0000c8bc
    1a28:	20000a50 	.word	0x20000a50

00001a2c <log_core_init>:
	panic_mode = false;
    1a2c:	4a08      	ldr	r2, [pc, #32]	; (1a50 <log_core_init+0x24>)
{
    1a2e:	b508      	push	{r3, lr}
	panic_mode = false;
    1a30:	2300      	movs	r3, #0
    1a32:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1a34:	4a07      	ldr	r2, [pc, #28]	; (1a54 <log_core_init+0x28>)
    1a36:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    1a38:	4b07      	ldr	r3, [pc, #28]	; (1a58 <log_core_init+0x2c>)
    1a3a:	4a08      	ldr	r2, [pc, #32]	; (1a5c <log_core_init+0x30>)
    1a3c:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    1a3e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1a42:	f000 fafb 	bl	203c <log_output_timestamp_freq_set>
}
    1a46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg2_init();
    1a4a:	f7ff bfe7 	b.w	1a1c <z_log_msg2_init>
    1a4e:	bf00      	nop
    1a50:	200019b3 	.word	0x200019b3
    1a54:	20000a48 	.word	0x20000a48
    1a58:	20000004 	.word	0x20000004
    1a5c:	0000b2c9 	.word	0x0000b2c9

00001a60 <z_log_msg2_alloc>:
{
    1a60:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
    1a62:	2200      	movs	r2, #0
    1a64:	4801      	ldr	r0, [pc, #4]	; (1a6c <z_log_msg2_alloc+0xc>)
    1a66:	2300      	movs	r3, #0
    1a68:	f009 bafb 	b.w	b062 <mpsc_pbuf_alloc>
    1a6c:	20000a50 	.word	0x20000a50

00001a70 <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
    1a70:	4801      	ldr	r0, [pc, #4]	; (1a78 <z_log_msg2_claim+0x8>)
    1a72:	f009 bb8c 	b.w	b18e <mpsc_pbuf_claim>
    1a76:	bf00      	nop
    1a78:	20000a50 	.word	0x20000a50

00001a7c <z_log_msg2_free>:
{
    1a7c:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    1a7e:	4801      	ldr	r0, [pc, #4]	; (1a84 <z_log_msg2_free+0x8>)
    1a80:	f009 bbd1 	b.w	b226 <mpsc_pbuf_free>
    1a84:	20000a50 	.word	0x20000a50

00001a88 <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    1a88:	4801      	ldr	r0, [pc, #4]	; (1a90 <z_log_msg2_pending+0x8>)
    1a8a:	f009 bc00 	b.w	b28e <mpsc_pbuf_is_pending>
    1a8e:	bf00      	nop
    1a90:	20000a50 	.word	0x20000a50

00001a94 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    1a94:	4b1d      	ldr	r3, [pc, #116]	; (1b0c <z_impl_log_process+0x78>)
    1a96:	781b      	ldrb	r3, [r3, #0]
{
    1a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a9c:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    1a9e:	b903      	cbnz	r3, 1aa2 <z_impl_log_process+0xe>
    1aa0:	b388      	cbz	r0, 1b06 <z_impl_log_process+0x72>
	msg = get_msg();
    1aa2:	f009 fc26 	bl	b2f2 <get_msg>
	if (msg.msg) {
    1aa6:	4606      	mov	r6, r0
    1aa8:	b118      	cbz	r0, 1ab2 <z_impl_log_process+0x1e>
		if (!bypass) {
    1aaa:	b16d      	cbz	r5, 1ac8 <z_impl_log_process+0x34>
		z_log_msg2_free(msg.msg2);
    1aac:	4630      	mov	r0, r6
    1aae:	f7ff ffe5 	bl	1a7c <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
    1ab2:	b92d      	cbnz	r5, 1ac0 <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
    1ab4:	4b16      	ldr	r3, [pc, #88]	; (1b10 <z_impl_log_process+0x7c>)
	if (!bypass && z_log_dropped_pending()) {
    1ab6:	681b      	ldr	r3, [r3, #0]
    1ab8:	2b00      	cmp	r3, #0
    1aba:	dd01      	ble.n	1ac0 <z_impl_log_process+0x2c>
		dropped_notify();
    1abc:	f7ff ff92 	bl	19e4 <dropped_notify>
}
    1ac0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_log_msg2_pending();
    1ac4:	f7ff bfe0 	b.w	1a88 <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1ac8:	4b12      	ldr	r3, [pc, #72]	; (1b14 <z_impl_log_process+0x80>)
    1aca:	f3bf 8f5b 	dmb	ish
    1ace:	e853 2f00 	ldrex	r2, [r3]
    1ad2:	3a01      	subs	r2, #1
    1ad4:	e843 2100 	strex	r1, r2, [r3]
    1ad8:	2900      	cmp	r1, #0
    1ada:	d1f8      	bne.n	1ace <z_impl_log_process+0x3a>
    1adc:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
    1ae0:	4c0d      	ldr	r4, [pc, #52]	; (1b18 <z_impl_log_process+0x84>)
    1ae2:	4f0e      	ldr	r7, [pc, #56]	; (1b1c <z_impl_log_process+0x88>)
    1ae4:	1b3f      	subs	r7, r7, r4
    1ae6:	113f      	asrs	r7, r7, #4
    1ae8:	46a8      	mov	r8, r5
		for (int i = 0; i < log_backend_count_get(); i++) {
    1aea:	45b8      	cmp	r8, r7
    1aec:	dade      	bge.n	1aac <z_impl_log_process+0x18>
	return backend->cb->active;
    1aee:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    1af0:	795b      	ldrb	r3, [r3, #5]
    1af2:	b123      	cbz	r3, 1afe <z_impl_log_process+0x6a>
	backend->api->process(backend, msg);
    1af4:	6823      	ldr	r3, [r4, #0]
    1af6:	4631      	mov	r1, r6
    1af8:	681b      	ldr	r3, [r3, #0]
    1afa:	4620      	mov	r0, r4
    1afc:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    1afe:	f108 0801 	add.w	r8, r8, #1
    1b02:	3410      	adds	r4, #16
    1b04:	e7f1      	b.n	1aea <z_impl_log_process+0x56>
}
    1b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b0a:	bf00      	nop
    1b0c:	200019b2 	.word	0x200019b2
    1b10:	20000a48 	.word	0x20000a48
    1b14:	20000a44 	.word	0x20000a44
    1b18:	0000c830 	.word	0x0000c830
    1b1c:	0000c840 	.word	0x0000c840

00001b20 <log_process_thread_func>:
{
    1b20:	b510      	push	{r4, lr}
	log_init();
    1b22:	f7ff fef7 	bl	1914 <log_init>
	return z_impl_z_current_get();
    1b26:	f008 fb6b 	bl	a200 <z_impl_z_current_get>
	proc_tid = process_tid;
    1b2a:	4b0c      	ldr	r3, [pc, #48]	; (1b5c <log_process_thread_func+0x3c>)
    1b2c:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1b2e:	b130      	cbz	r0, 1b3e <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1b30:	4b0b      	ldr	r3, [pc, #44]	; (1b60 <log_process_thread_func+0x40>)
	    process_tid &&
    1b32:	681b      	ldr	r3, [r3, #0]
    1b34:	2b09      	cmp	r3, #9
    1b36:	dd02      	ble.n	1b3e <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    1b38:	480a      	ldr	r0, [pc, #40]	; (1b64 <log_process_thread_func+0x44>)
    1b3a:	f007 feb9 	bl	98b0 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    1b3e:	4c09      	ldr	r4, [pc, #36]	; (1b64 <log_process_thread_func+0x44>)
		union { uintptr_t x; bool val; } parm0 = { .val = bypass };
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    1b40:	2000      	movs	r0, #0
    1b42:	f7ff ffa7 	bl	1a94 <z_impl_log_process>
		if (log_process(false) == false) {
    1b46:	2800      	cmp	r0, #0
    1b48:	d1fa      	bne.n	1b40 <log_process_thread_func+0x20>
    1b4a:	f04f 32ff 	mov.w	r2, #4294967295
    1b4e:	f04f 33ff 	mov.w	r3, #4294967295
    1b52:	4620      	mov	r0, r4
    1b54:	f007 fecc 	bl	98f0 <z_impl_k_sem_take>
    1b58:	e7f2      	b.n	1b40 <log_process_thread_func+0x20>
    1b5a:	bf00      	nop
    1b5c:	20000a88 	.word	0x20000a88
    1b60:	20000a44 	.word	0x20000a44
    1b64:	20000194 	.word	0x20000194

00001b68 <z_log_msg_post_finalize>:
{
    1b68:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1b6a:	4b1d      	ldr	r3, [pc, #116]	; (1be0 <z_log_msg_post_finalize+0x78>)
    1b6c:	f3bf 8f5b 	dmb	ish
    1b70:	e853 2f00 	ldrex	r2, [r3]
    1b74:	1c51      	adds	r1, r2, #1
    1b76:	e843 1000 	strex	r0, r1, [r3]
    1b7a:	2800      	cmp	r0, #0
    1b7c:	d1f8      	bne.n	1b70 <z_log_msg_post_finalize+0x8>
    1b7e:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    1b82:	4b18      	ldr	r3, [pc, #96]	; (1be4 <z_log_msg_post_finalize+0x7c>)
    1b84:	781b      	ldrb	r3, [r3, #0]
    1b86:	b183      	cbz	r3, 1baa <z_log_msg_post_finalize+0x42>
    1b88:	f04f 0320 	mov.w	r3, #32
    1b8c:	f3ef 8411 	mrs	r4, BASEPRI
    1b90:	f383 8812 	msr	BASEPRI_MAX, r3
    1b94:	f3bf 8f6f 	isb	sy
    1b98:	2000      	movs	r0, #0
    1b9a:	f7ff ff7b 	bl	1a94 <z_impl_log_process>
	__asm__ volatile(
    1b9e:	f384 8811 	msr	BASEPRI, r4
    1ba2:	f3bf 8f6f 	isb	sy
}
    1ba6:	b002      	add	sp, #8
    1ba8:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
    1baa:	4b0f      	ldr	r3, [pc, #60]	; (1be8 <z_log_msg_post_finalize+0x80>)
    1bac:	681b      	ldr	r3, [r3, #0]
    1bae:	2b00      	cmp	r3, #0
    1bb0:	d0f9      	beq.n	1ba6 <z_log_msg_post_finalize+0x3e>
    1bb2:	b952      	cbnz	r2, 1bca <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
    1bb4:	2200      	movs	r2, #0
    1bb6:	2300      	movs	r3, #0
    1bb8:	e9cd 2300 	strd	r2, r3, [sp]
    1bbc:	480b      	ldr	r0, [pc, #44]	; (1bec <z_log_msg_post_finalize+0x84>)
    1bbe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1bc2:	2300      	movs	r3, #0
    1bc4:	f008 fd1e 	bl	a604 <z_impl_k_timer_start>
    1bc8:	e7ed      	b.n	1ba6 <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    1bca:	2a0a      	cmp	r2, #10
    1bcc:	d1eb      	bne.n	1ba6 <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
    1bce:	4807      	ldr	r0, [pc, #28]	; (1bec <z_log_msg_post_finalize+0x84>)
    1bd0:	f00a fc0d 	bl	c3ee <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1bd4:	4806      	ldr	r0, [pc, #24]	; (1bf0 <z_log_msg_post_finalize+0x88>)
}
    1bd6:	b002      	add	sp, #8
    1bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1bdc:	f007 be68 	b.w	98b0 <z_impl_k_sem_give>
    1be0:	20000a44 	.word	0x20000a44
    1be4:	200019b3 	.word	0x200019b3
    1be8:	20000a88 	.word	0x20000a88
    1bec:	20000660 	.word	0x20000660
    1bf0:	20000194 	.word	0x20000194

00001bf4 <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
    1bf4:	4b06      	ldr	r3, [pc, #24]	; (1c10 <z_log_msg2_commit+0x1c>)
{
    1bf6:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    1bf8:	681b      	ldr	r3, [r3, #0]
{
    1bfa:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1bfc:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    1bfe:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    1c00:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    1c02:	4804      	ldr	r0, [pc, #16]	; (1c14 <z_log_msg2_commit+0x20>)
    1c04:	f009 faa3 	bl	b14e <mpsc_pbuf_commit>
}
    1c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    1c0c:	f7ff bfac 	b.w	1b68 <z_log_msg_post_finalize>
    1c10:	20000004 	.word	0x20000004
    1c14:	20000a50 	.word	0x20000a50

00001c18 <z_impl_log_panic>:
{
    1c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    1c1a:	4f0e      	ldr	r7, [pc, #56]	; (1c54 <z_impl_log_panic+0x3c>)
    1c1c:	783d      	ldrb	r5, [r7, #0]
    1c1e:	b975      	cbnz	r5, 1c3e <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    1c20:	4c0d      	ldr	r4, [pc, #52]	; (1c58 <z_impl_log_panic+0x40>)
    1c22:	4e0e      	ldr	r6, [pc, #56]	; (1c5c <z_impl_log_panic+0x44>)
	log_init();
    1c24:	f7ff fe76 	bl	1914 <log_init>
    1c28:	1b36      	subs	r6, r6, r4
    1c2a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1c2c:	42b5      	cmp	r5, r6
    1c2e:	db07      	blt.n	1c40 <z_impl_log_panic+0x28>
    1c30:	2000      	movs	r0, #0
    1c32:	f7ff ff2f 	bl	1a94 <z_impl_log_process>
		while (log_process(false) == true) {
    1c36:	2800      	cmp	r0, #0
    1c38:	d1fa      	bne.n	1c30 <z_impl_log_panic+0x18>
	panic_mode = true;
    1c3a:	2301      	movs	r3, #1
    1c3c:	703b      	strb	r3, [r7, #0]
}
    1c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    1c40:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1c42:	795b      	ldrb	r3, [r3, #5]
    1c44:	b11b      	cbz	r3, 1c4e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    1c46:	6823      	ldr	r3, [r4, #0]
    1c48:	4620      	mov	r0, r4
    1c4a:	695b      	ldr	r3, [r3, #20]
    1c4c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1c4e:	3501      	adds	r5, #1
    1c50:	3410      	adds	r4, #16
    1c52:	e7eb      	b.n	1c2c <z_impl_log_panic+0x14>
    1c54:	200019b3 	.word	0x200019b3
    1c58:	0000c830 	.word	0x0000c830
    1c5c:	0000c840 	.word	0x0000c840

00001c60 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1c60:	4a04      	ldr	r2, [pc, #16]	; (1c74 <log_source_name_get+0x14>)
    1c62:	4b05      	ldr	r3, [pc, #20]	; (1c78 <log_source_name_get+0x18>)
    1c64:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1c66:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    1c6a:	bf34      	ite	cc
    1c6c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1c70:	2000      	movcs	r0, #0
}
    1c72:	4770      	bx	lr
    1c74:	0000c788 	.word	0x0000c788
    1c78:	0000c830 	.word	0x0000c830

00001c7c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1c7c:	4a05      	ldr	r2, [pc, #20]	; (1c94 <log_backend_enable+0x18>)
	backend->cb->id = id;
    1c7e:	6843      	ldr	r3, [r0, #4]
    1c80:	1a80      	subs	r0, r0, r2
    1c82:	1100      	asrs	r0, r0, #4
    1c84:	3001      	adds	r0, #1
	backend->cb->active = true;
    1c86:	2201      	movs	r2, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
	}

	log_backend_id_set(backend, id);
    1c88:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
    1c8a:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1c8c:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    1c8e:	f7ff be6d 	b.w	196c <z_log_notify_backend_enabled>
    1c92:	bf00      	nop
    1c94:	0000c830 	.word	0x0000c830

00001c98 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1c98:	b40e      	push	{r1, r2, r3}
    1c9a:	b503      	push	{r0, r1, lr}
    1c9c:	ab03      	add	r3, sp, #12
    1c9e:	4601      	mov	r1, r0
    1ca0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1ca4:	4804      	ldr	r0, [pc, #16]	; (1cb8 <print_formatted+0x20>)
	va_start(args, fmt);
    1ca6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1ca8:	f7ff fa38 	bl	111c <cbvprintf>
	va_end(args);

	return length;
}
    1cac:	b002      	add	sp, #8
    1cae:	f85d eb04 	ldr.w	lr, [sp], #4
    1cb2:	b003      	add	sp, #12
    1cb4:	4770      	bx	lr
    1cb6:	bf00      	nop
    1cb8:	0000b333 	.word	0x0000b333

00001cbc <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    1cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1cc0:	461d      	mov	r5, r3
    1cc2:	9b08      	ldr	r3, [sp, #32]
    1cc4:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1cc6:	06da      	lsls	r2, r3, #27
{
    1cc8:	4604      	mov	r4, r0
    1cca:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1ccc:	d405      	bmi.n	1cda <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1cce:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    1cd0:	bf4c      	ite	mi
    1cd2:	492a      	ldrmi	r1, [pc, #168]	; (1d7c <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    1cd4:	492a      	ldrpl	r1, [pc, #168]	; (1d80 <hexdump_line_print+0xc4>)
    1cd6:	f7ff ffdf 	bl	1c98 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    1cda:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1d84 <hexdump_line_print+0xc8>
{
    1cde:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    1ce2:	45a8      	cmp	r8, r5
    1ce4:	db2a      	blt.n	1d3c <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    1ce6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1d88 <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    1cea:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1d8c <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    1cee:	f8df a094 	ldr.w	sl, [pc, #148]	; 1d84 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1cf2:	2500      	movs	r5, #0
		if (i < length) {
    1cf4:	42bd      	cmp	r5, r7
    1cf6:	d22f      	bcs.n	1d58 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    1cf8:	5d72      	ldrb	r2, [r6, r5]
    1cfa:	4649      	mov	r1, r9
    1cfc:	4620      	mov	r0, r4
    1cfe:	f7ff ffcb 	bl	1c98 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1d02:	3501      	adds	r5, #1
    1d04:	2d10      	cmp	r5, #16
    1d06:	d120      	bne.n	1d4a <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    1d08:	4921      	ldr	r1, [pc, #132]	; (1d90 <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    1d0a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1d84 <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    1d0e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1d94 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    1d12:	4620      	mov	r0, r4
    1d14:	f7ff ffc0 	bl	1c98 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1d18:	2500      	movs	r5, #0
		if (i < length) {
    1d1a:	42af      	cmp	r7, r5
    1d1c:	d928      	bls.n	1d70 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    1d1e:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    1d20:	f1a2 0320 	sub.w	r3, r2, #32
    1d24:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    1d26:	bf28      	it	cs
    1d28:	222e      	movcs	r2, #46	; 0x2e
    1d2a:	4649      	mov	r1, r9
    1d2c:	4620      	mov	r0, r4
    1d2e:	f7ff ffb3 	bl	1c98 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1d32:	3501      	adds	r5, #1
    1d34:	2d10      	cmp	r5, #16
    1d36:	d114      	bne.n	1d62 <hexdump_line_print+0xa6>
		}
	}
}
    1d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    1d3c:	4649      	mov	r1, r9
    1d3e:	4620      	mov	r0, r4
    1d40:	f7ff ffaa 	bl	1c98 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1d44:	f108 0801 	add.w	r8, r8, #1
    1d48:	e7cb      	b.n	1ce2 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    1d4a:	076a      	lsls	r2, r5, #29
    1d4c:	d1d2      	bne.n	1cf4 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    1d4e:	4651      	mov	r1, sl
    1d50:	4620      	mov	r0, r4
    1d52:	f7ff ffa1 	bl	1c98 <print_formatted>
    1d56:	e7cd      	b.n	1cf4 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    1d58:	4641      	mov	r1, r8
    1d5a:	4620      	mov	r0, r4
    1d5c:	f7ff ff9c 	bl	1c98 <print_formatted>
    1d60:	e7cf      	b.n	1d02 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    1d62:	076b      	lsls	r3, r5, #29
    1d64:	d1d9      	bne.n	1d1a <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    1d66:	4641      	mov	r1, r8
    1d68:	4620      	mov	r0, r4
    1d6a:	f7ff ff95 	bl	1c98 <print_formatted>
    1d6e:	e7d4      	b.n	1d1a <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    1d70:	4641      	mov	r1, r8
    1d72:	4620      	mov	r0, r4
    1d74:	f7ff ff90 	bl	1c98 <print_formatted>
    1d78:	e7db      	b.n	1d32 <hexdump_line_print+0x76>
    1d7a:	bf00      	nop
    1d7c:	0000cd26 	.word	0x0000cd26
    1d80:	0000cd25 	.word	0x0000cd25
    1d84:	0000cd30 	.word	0x0000cd30
    1d88:	0000cd2e 	.word	0x0000cd2e
    1d8c:	0000cd28 	.word	0x0000cd28
    1d90:	0000cd32 	.word	0x0000cd32
    1d94:	0000cd34 	.word	0x0000cd34

00001d98 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    1d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d9c:	b087      	sub	sp, #28
    1d9e:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1da0:	f001 0301 	and.w	r3, r1, #1
{
    1da4:	9205      	str	r2, [sp, #20]
    1da6:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    1daa:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1dae:	9304      	str	r3, [sp, #16]
{
    1db0:	4607      	mov	r7, r0
    1db2:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1db4:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1db8:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    1dbc:	f009 fa9d 	bl	b2fa <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    1dc0:	4602      	mov	r2, r0
    1dc2:	2800      	cmp	r0, #0
    1dc4:	d044      	beq.n	1e50 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    1dc6:	493a      	ldr	r1, [pc, #232]	; (1eb0 <prefix_print+0x118>)
    1dc8:	4638      	mov	r0, r7
    1dca:	f7ff ff65 	bl	1c98 <print_formatted>
    1dce:	4605      	mov	r5, r0
	}

	if (stamp) {
    1dd0:	f1bb 0f00 	cmp.w	fp, #0
    1dd4:	d008      	beq.n	1de8 <prefix_print+0x50>
	if (!format) {
    1dd6:	f018 0f44 	tst.w	r8, #68	; 0x44
    1dda:	d13b      	bne.n	1e54 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    1ddc:	4935      	ldr	r1, [pc, #212]	; (1eb4 <prefix_print+0x11c>)
    1dde:	4622      	mov	r2, r4
    1de0:	4638      	mov	r0, r7
    1de2:	f7ff ff59 	bl	1c98 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    1de6:	4405      	add	r5, r0
	if (color) {
    1de8:	9b04      	ldr	r3, [sp, #16]
    1dea:	b153      	cbz	r3, 1e02 <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    1dec:	4b32      	ldr	r3, [pc, #200]	; (1eb8 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    1dee:	4933      	ldr	r1, [pc, #204]	; (1ebc <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    1df0:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    1df4:	4b32      	ldr	r3, [pc, #200]	; (1ec0 <prefix_print+0x128>)
    1df6:	4638      	mov	r0, r7
    1df8:	2a00      	cmp	r2, #0
    1dfa:	bf08      	it	eq
    1dfc:	461a      	moveq	r2, r3
    1dfe:	f7ff ff4b 	bl	1c98 <print_formatted>
	if (level_on) {
    1e02:	b13e      	cbz	r6, 1e14 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    1e04:	4b2f      	ldr	r3, [pc, #188]	; (1ec4 <prefix_print+0x12c>)
    1e06:	4930      	ldr	r1, [pc, #192]	; (1ec8 <prefix_print+0x130>)
    1e08:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    1e0c:	4638      	mov	r0, r7
    1e0e:	f7ff ff43 	bl	1c98 <print_formatted>
    1e12:	4606      	mov	r6, r0
	if (source_id >= 0) {
    1e14:	f1ba 0f00 	cmp.w	sl, #0
    1e18:	db16      	blt.n	1e48 <prefix_print+0xb0>
		total += print_formatted(output,
    1e1a:	9b05      	ldr	r3, [sp, #20]
    1e1c:	2b00      	cmp	r3, #0
    1e1e:	d045      	beq.n	1eac <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1e20:	2301      	movs	r3, #1
    1e22:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    1e26:	4b29      	ldr	r3, [pc, #164]	; (1ecc <prefix_print+0x134>)
    1e28:	4c29      	ldr	r4, [pc, #164]	; (1ed0 <prefix_print+0x138>)
    1e2a:	f019 0f10 	tst.w	r9, #16
    1e2e:	bf18      	it	ne
    1e30:	461c      	movne	r4, r3
    1e32:	4651      	mov	r1, sl
    1e34:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    1e38:	f7ff ff12 	bl	1c60 <log_source_name_get>
    1e3c:	4621      	mov	r1, r4
    1e3e:	4602      	mov	r2, r0
    1e40:	4638      	mov	r0, r7
    1e42:	f7ff ff29 	bl	1c98 <print_formatted>
    1e46:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    1e48:	1970      	adds	r0, r6, r5
    1e4a:	b007      	add	sp, #28
    1e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    1e50:	4605      	mov	r5, r0
    1e52:	e7bd      	b.n	1dd0 <prefix_print+0x38>
	} else if (freq != 0U) {
    1e54:	4b1f      	ldr	r3, [pc, #124]	; (1ed4 <prefix_print+0x13c>)
    1e56:	6818      	ldr	r0, [r3, #0]
    1e58:	2800      	cmp	r0, #0
    1e5a:	d0c4      	beq.n	1de6 <prefix_print+0x4e>
		timestamp /= timestamp_div;
    1e5c:	4b1e      	ldr	r3, [pc, #120]	; (1ed8 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    1e5e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1e62:	681b      	ldr	r3, [r3, #0]
    1e64:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    1e68:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    1e6c:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    1e70:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    1e74:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    1e78:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    1e7c:	fbb3 f2f1 	udiv	r2, r3, r1
    1e80:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1e84:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    1e88:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1e8c:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    1e90:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1e94:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    1e98:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1e9a:	fbb4 f0f0 	udiv	r0, r4, r0
				length = print_formatted(output,
    1e9e:	490f      	ldr	r1, [pc, #60]	; (1edc <prefix_print+0x144>)
    1ea0:	e9cd e001 	strd	lr, r0, [sp, #4]
    1ea4:	4638      	mov	r0, r7
    1ea6:	f7ff fef7 	bl	1c98 <print_formatted>
    1eaa:	e79c      	b.n	1de6 <prefix_print+0x4e>
		total += print_formatted(output,
    1eac:	4c08      	ldr	r4, [pc, #32]	; (1ed0 <prefix_print+0x138>)
    1eae:	e7c0      	b.n	1e32 <prefix_print+0x9a>
    1eb0:	0000cd45 	.word	0x0000cd45
    1eb4:	0000cd49 	.word	0x0000cd49
    1eb8:	0000c8d0 	.word	0x0000c8d0
    1ebc:	0000d835 	.word	0x0000d835
    1ec0:	0000cd37 	.word	0x0000cd37
    1ec4:	0000c8e4 	.word	0x0000c8e4
    1ec8:	0000cd6e 	.word	0x0000cd6e
    1ecc:	0000cd41 	.word	0x0000cd41
    1ed0:	0000cd3c 	.word	0x0000cd3c
    1ed4:	20000a8c 	.word	0x20000a8c
    1ed8:	20000a90 	.word	0x20000a90
    1edc:	0000cd52 	.word	0x0000cd52

00001ee0 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    1ee0:	b538      	push	{r3, r4, r5, lr}
    1ee2:	460c      	mov	r4, r1
	if (color) {
    1ee4:	07e1      	lsls	r1, r4, #31
{
    1ee6:	4605      	mov	r5, r0
	if (color) {
    1ee8:	d503      	bpl.n	1ef2 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    1eea:	4a08      	ldr	r2, [pc, #32]	; (1f0c <postfix_print+0x2c>)
    1eec:	4908      	ldr	r1, [pc, #32]	; (1f10 <postfix_print+0x30>)
    1eee:	f7ff fed3 	bl	1c98 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1ef2:	06e2      	lsls	r2, r4, #27
    1ef4:	d408      	bmi.n	1f08 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1ef6:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    1ef8:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    1efa:	bf4c      	ite	mi
    1efc:	4905      	ldrmi	r1, [pc, #20]	; (1f14 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    1efe:	4906      	ldrpl	r1, [pc, #24]	; (1f18 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    1f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    1f04:	f7ff bec8 	b.w	1c98 <print_formatted>
}
    1f08:	bd38      	pop	{r3, r4, r5, pc}
    1f0a:	bf00      	nop
    1f0c:	0000cd37 	.word	0x0000cd37
    1f10:	0000d835 	.word	0x0000d835
    1f14:	0000cd26 	.word	0x0000cd26
    1f18:	0000cd25 	.word	0x0000cd25

00001f1c <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    1f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    1f20:	880b      	ldrh	r3, [r1, #0]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    1f22:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    1f26:	4606      	mov	r6, r0
    1f28:	460c      	mov	r4, r1
    1f2a:	4690      	mov	r8, r2
    1f2c:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    1f30:	d04d      	beq.n	1fce <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
    1f32:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    1f34:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    1f36:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    1f3a:	2b00      	cmp	r3, #0
    1f3c:	d044      	beq.n	1fc8 <log_output_msg2_process+0xac>
    1f3e:	4925      	ldr	r1, [pc, #148]	; (1fd4 <log_output_msg2_process+0xb8>)
    1f40:	1a5b      	subs	r3, r3, r1
    1f42:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    1f46:	e9cd 2301 	strd	r2, r3, [sp, #4]
    1f4a:	f8cd 9000 	str.w	r9, [sp]
    1f4e:	68a3      	ldr	r3, [r4, #8]
    1f50:	2200      	movs	r2, #0
    1f52:	4641      	mov	r1, r8
    1f54:	4630      	mov	r0, r6
    1f56:	f7ff ff1f 	bl	1d98 <prefix_print>
    1f5a:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    1f5c:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    1f5e:	f855 3b10 	ldr.w	r3, [r5], #16
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    1f62:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1f66:	b153      	cbz	r3, 1f7e <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    1f68:	4f1b      	ldr	r7, [pc, #108]	; (1fd8 <log_output_msg2_process+0xbc>)
    1f6a:	481c      	ldr	r0, [pc, #112]	; (1fdc <log_output_msg2_process+0xc0>)
    1f6c:	491c      	ldr	r1, [pc, #112]	; (1fe0 <log_output_msg2_process+0xc4>)
    1f6e:	462b      	mov	r3, r5
    1f70:	4632      	mov	r2, r6
    1f72:	f1b9 0f00 	cmp.w	r9, #0
    1f76:	bf08      	it	eq
    1f78:	4638      	moveq	r0, r7
    1f7a:	f008 fbf0 	bl	a75e <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
    1f7e:	8867      	ldrh	r7, [r4, #2]
    1f80:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    1f84:	b197      	cbz	r7, 1fac <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
    1f86:	6823      	ldr	r3, [r4, #0]
    1f88:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1f8c:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1f8e:	2f10      	cmp	r7, #16
    1f90:	463c      	mov	r4, r7
    1f92:	bf28      	it	cs
    1f94:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    1f96:	4629      	mov	r1, r5
    1f98:	f8cd 8000 	str.w	r8, [sp]
    1f9c:	4653      	mov	r3, sl
    1f9e:	4622      	mov	r2, r4
    1fa0:	4630      	mov	r0, r6
    1fa2:	f7ff fe8b 	bl	1cbc <hexdump_line_print>
	} while (len);
    1fa6:	1b3f      	subs	r7, r7, r4
		data += length;
    1fa8:	4425      	add	r5, r4
	} while (len);
    1faa:	d1f0      	bne.n	1f8e <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    1fac:	f1b9 0f00 	cmp.w	r9, #0
    1fb0:	d004      	beq.n	1fbc <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
    1fb2:	464a      	mov	r2, r9
    1fb4:	4641      	mov	r1, r8
    1fb6:	4630      	mov	r0, r6
    1fb8:	f7ff ff92 	bl	1ee0 <postfix_print>
	}

	log_output_flush(output);
    1fbc:	4630      	mov	r0, r6
}
    1fbe:	b004      	add	sp, #16
    1fc0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    1fc4:	f009 b9a8 	b.w	b318 <log_output_flush>
		int16_t source_id = source ?
    1fc8:	f04f 33ff 	mov.w	r3, #4294967295
    1fcc:	e7bb      	b.n	1f46 <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    1fce:	46ca      	mov	sl, r9
    1fd0:	e7c4      	b.n	1f5c <log_output_msg2_process+0x40>
    1fd2:	bf00      	nop
    1fd4:	0000c788 	.word	0x0000c788
    1fd8:	0000b369 	.word	0x0000b369
    1fdc:	0000b333 	.word	0x0000b333
    1fe0:	0000111d 	.word	0x0000111d

00001fe4 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    1fe4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1fe6:	f242 730f 	movw	r3, #9999	; 0x270f
    1fea:	428b      	cmp	r3, r1
    1fec:	bf28      	it	cs
    1fee:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    1ff0:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1ff2:	4a0f      	ldr	r2, [pc, #60]	; (2030 <CONFIG_USB_DEVICE_VID+0x32>)
{
    1ff4:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1ff6:	2105      	movs	r1, #5
    1ff8:	4668      	mov	r0, sp
    1ffa:	f008 fc1d 	bl	a838 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1ffe:	6863      	ldr	r3, [r4, #4]
    2000:	490c      	ldr	r1, [pc, #48]	; (2034 <CONFIG_USB_DEVICE_VID+0x36>)
    2002:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2004:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2006:	220b      	movs	r2, #11
    2008:	4628      	mov	r0, r5
    200a:	f009 f978 	bl	b2fe <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    200e:	6863      	ldr	r3, [r4, #4]
    2010:	4632      	mov	r2, r6
    2012:	4669      	mov	r1, sp
    2014:	4628      	mov	r0, r5
    2016:	685b      	ldr	r3, [r3, #4]
    2018:	f009 f971 	bl	b2fe <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    201c:	6863      	ldr	r3, [r4, #4]
    201e:	4906      	ldr	r1, [pc, #24]	; (2038 <CONFIG_USB_DEVICE_VID+0x3a>)
    2020:	685b      	ldr	r3, [r3, #4]
    2022:	221b      	movs	r2, #27
    2024:	4628      	mov	r0, r5
    2026:	f009 f96a 	bl	b2fe <buffer_write>
		     output->control_block->ctx);
}
    202a:	b002      	add	sp, #8
    202c:	bd70      	pop	{r4, r5, r6, pc}
    202e:	bf00      	nop
    2030:	0000d5b3 	.word	0x0000d5b3
    2034:	0000cdb0 	.word	0x0000cdb0
    2038:	0000cd94 	.word	0x0000cd94

0000203c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    203c:	4a08      	ldr	r2, [pc, #32]	; (2060 <log_output_timestamp_freq_set+0x24>)
{
    203e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    2040:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2042:	4c08      	ldr	r4, [pc, #32]	; (2064 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    2044:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    2046:	2100      	movs	r1, #0
    2048:	42a0      	cmp	r0, r4
    204a:	d804      	bhi.n	2056 <log_output_timestamp_freq_set+0x1a>
    204c:	b101      	cbz	r1, 2050 <log_output_timestamp_freq_set+0x14>
    204e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    2050:	4b05      	ldr	r3, [pc, #20]	; (2068 <log_output_timestamp_freq_set+0x2c>)
    2052:	6018      	str	r0, [r3, #0]
}
    2054:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    2056:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2058:	005b      	lsls	r3, r3, #1
    205a:	2101      	movs	r1, #1
    205c:	e7f4      	b.n	2048 <log_output_timestamp_freq_set+0xc>
    205e:	bf00      	nop
    2060:	20000a90 	.word	0x20000a90
    2064:	000f4240 	.word	0x000f4240
    2068:	20000a8c 	.word	0x20000a8c

0000206c <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    206c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2070:	b087      	sub	sp, #28
    2072:	e9dd 5711 	ldrd	r5, r7, [sp, #68]	; 0x44
    2076:	469a      	mov	sl, r3
    2078:	9b10      	ldr	r3, [sp, #64]	; 0x40
    207a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    207e:	9303      	str	r3, [sp, #12]
    2080:	4604      	mov	r4, r0
    2082:	4689      	mov	r9, r1
    2084:	4690      	mov	r8, r2
	int plen;

	if (fmt) {
    2086:	b3cf      	cbz	r7, 20fc <z_impl_z_log_msg2_runtime_vcreate+0x90>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    2088:	f8cd b000 	str.w	fp, [sp]
    208c:	463b      	mov	r3, r7
    208e:	462a      	mov	r2, r5
    2090:	2110      	movs	r1, #16
    2092:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    2094:	f8cd b014 	str.w	fp, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    2098:	f7fe fbba 	bl	810 <cbvprintf_package>
    209c:	4606      	mov	r6, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    209e:	9a03      	ldr	r2, [sp, #12]
    20a0:	f008 0307 	and.w	r3, r8, #7
    20a4:	f004 0807 	and.w	r8, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    20a8:	f102 0017 	add.w	r0, r2, #23
	struct log_msg2_desc desc =
    20ac:	4c14      	ldr	r4, [pc, #80]	; (2100 <z_impl_z_log_msg2_runtime_vcreate+0x94>)
    20ae:	ea4f 08c8 	mov.w	r8, r8, lsl #3
    20b2:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    20b6:	4430      	add	r0, r6
	struct log_msg2_desc desc =
    20b8:	4b12      	ldr	r3, [pc, #72]	; (2104 <z_impl_z_log_msg2_runtime_vcreate+0x98>)
    20ba:	ea04 2446 	and.w	r4, r4, r6, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    20be:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg2_desc desc =
    20c2:	ea48 0804 	orr.w	r8, r8, r4
    20c6:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg2_alloc(msg_wlen);
    20ca:	0880      	lsrs	r0, r0, #2
	struct log_msg2_desc desc =
    20cc:	ea48 0803 	orr.w	r8, r8, r3
		msg = z_log_msg2_alloc(msg_wlen);
    20d0:	f7ff fcc6 	bl	1a60 <z_log_msg2_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    20d4:	4604      	mov	r4, r0
    20d6:	b140      	cbz	r0, 20ea <z_impl_z_log_msg2_runtime_vcreate+0x7e>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    20d8:	b13f      	cbz	r7, 20ea <z_impl_z_log_msg2_runtime_vcreate+0x7e>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    20da:	f8cd b000 	str.w	fp, [sp]
    20de:	463b      	mov	r3, r7
    20e0:	462a      	mov	r2, r5
    20e2:	4631      	mov	r1, r6
    20e4:	3010      	adds	r0, #16
    20e6:	f7fe fb93 	bl	810 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    20ea:	4653      	mov	r3, sl
    20ec:	4642      	mov	r2, r8
    20ee:	4649      	mov	r1, r9
    20f0:	4620      	mov	r0, r4
	}
}
    20f2:	b007      	add	sp, #28
    20f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg2_finalize(msg, source, desc, data);
    20f8:	f009 b943 	b.w	b382 <z_log_msg2_finalize>
		plen = 0;
    20fc:	463e      	mov	r6, r7
    20fe:	e7ce      	b.n	209e <z_impl_z_log_msg2_runtime_vcreate+0x32>
    2100:	0007fe00 	.word	0x0007fe00
    2104:	7ff80000 	.word	0x7ff80000

00002108 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2108:	4b01      	ldr	r3, [pc, #4]	; (2110 <log_backend_rtt_init+0x8>)
    210a:	2201      	movs	r2, #1
    210c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    210e:	4770      	bx	lr
    2110:	200019c4 	.word	0x200019c4

00002114 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2114:	4b01      	ldr	r3, [pc, #4]	; (211c <format_set+0x8>)
	return 0;
}
    2116:	2000      	movs	r0, #0
	log_format_current = log_type;
    2118:	6019      	str	r1, [r3, #0]
}
    211a:	4770      	bx	lr
    211c:	20000a9c 	.word	0x20000a9c

00002120 <panic>:
	panic_mode = true;
    2120:	4b02      	ldr	r3, [pc, #8]	; (212c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    2122:	4803      	ldr	r0, [pc, #12]	; (2130 <panic+0x10>)
    2124:	2201      	movs	r2, #1
    2126:	701a      	strb	r2, [r3, #0]
    2128:	f009 b8f6 	b.w	b318 <log_output_flush>
    212c:	200019c5 	.word	0x200019c5
    2130:	0000c918 	.word	0x0000c918

00002134 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    2134:	4801      	ldr	r0, [pc, #4]	; (213c <dropped+0x8>)
    2136:	f7ff bf55 	b.w	1fe4 <log_output_dropped_process>
    213a:	bf00      	nop
    213c:	0000c918 	.word	0x0000c918

00002140 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2140:	4b06      	ldr	r3, [pc, #24]	; (215c <process+0x1c>)
{
    2142:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2144:	6818      	ldr	r0, [r3, #0]
{
    2146:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2148:	f7ff fbde 	bl	1908 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    214c:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    214e:	4603      	mov	r3, r0
}
    2150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    2154:	4802      	ldr	r0, [pc, #8]	; (2160 <process+0x20>)
    2156:	220f      	movs	r2, #15
    2158:	4718      	bx	r3
    215a:	bf00      	nop
    215c:	20000a9c 	.word	0x20000a9c
    2160:	0000c918 	.word	0x0000c918

00002164 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    2164:	4b05      	ldr	r3, [pc, #20]	; (217c <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    2166:	781b      	ldrb	r3, [r3, #0]
    2168:	b11b      	cbz	r3, 2172 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    216a:	f241 3088 	movw	r0, #5000	; 0x1388
    216e:	f00a b903 	b.w	c378 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    2172:	20a4      	movs	r0, #164	; 0xa4
    2174:	2100      	movs	r1, #0
    2176:	f008 b829 	b.w	a1cc <z_impl_k_sleep>
    217a:	bf00      	nop
    217c:	200019c5 	.word	0x200019c5

00002180 <data_out_block_mode>:
{
    2180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    2184:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2214 <data_out_block_mode+0x94>
	return z_impl_k_mutex_lock(mutex, timeout);
    2188:	f8df a08c 	ldr.w	sl, [pc, #140]	; 2218 <data_out_block_mode+0x98>
{
    218c:	4680      	mov	r8, r0
    218e:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    2190:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    2192:	f899 5000 	ldrb.w	r5, [r9]
    2196:	b9cd      	cbnz	r5, 21cc <data_out_block_mode+0x4c>
    2198:	f04f 33ff 	mov.w	r3, #4294967295
    219c:	f04f 32ff 	mov.w	r2, #4294967295
    21a0:	4650      	mov	r0, sl
    21a2:	f007 fa97 	bl	96d4 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    21a6:	463a      	mov	r2, r7
    21a8:	4641      	mov	r1, r8
    21aa:	4628      	mov	r0, r5
    21ac:	f006 ff56 	bl	905c <SEGGER_RTT_WriteSkipNoLock>
    21b0:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    21b2:	4650      	mov	r0, sl
    21b4:	f007 fb06 	bl	97c4 <z_impl_k_mutex_unlock>
		if (ret) {
    21b8:	4d18      	ldr	r5, [pc, #96]	; (221c <data_out_block_mode+0x9c>)
    21ba:	b1fe      	cbz	r6, 21fc <data_out_block_mode+0x7c>
	host_present = true;
    21bc:	2301      	movs	r3, #1
    21be:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    21c0:	f899 3000 	ldrb.w	r3, [r9]
    21c4:	b96b      	cbnz	r3, 21e2 <data_out_block_mode+0x62>
}
    21c6:	4638      	mov	r0, r7
    21c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    21cc:	463a      	mov	r2, r7
    21ce:	4641      	mov	r1, r8
    21d0:	2000      	movs	r0, #0
    21d2:	f006 ff43 	bl	905c <SEGGER_RTT_WriteSkipNoLock>
    21d6:	4606      	mov	r6, r0
    21d8:	e7ee      	b.n	21b8 <data_out_block_mode+0x38>
	if (retry_cnt == 0) {
    21da:	b95c      	cbnz	r4, 21f4 <data_out_block_mode+0x74>
		host_present = false;
    21dc:	702c      	strb	r4, [r5, #0]
    21de:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    21e2:	2000      	movs	r0, #0
    21e4:	f006 ffb6 	bl	9154 <SEGGER_RTT_HasDataUp>
    21e8:	2800      	cmp	r0, #0
    21ea:	d0ec      	beq.n	21c6 <data_out_block_mode+0x46>
    21ec:	782b      	ldrb	r3, [r5, #0]
    21ee:	2b00      	cmp	r3, #0
    21f0:	d1f3      	bne.n	21da <data_out_block_mode+0x5a>
    21f2:	e7e8      	b.n	21c6 <data_out_block_mode+0x46>
			on_failed_write(retry_cnt--);
    21f4:	3c01      	subs	r4, #1
    21f6:	f7ff ffb5 	bl	2164 <on_failed_write.part.0>
    21fa:	e7f2      	b.n	21e2 <data_out_block_mode+0x62>
		} else if (host_present) {
    21fc:	782b      	ldrb	r3, [r5, #0]
    21fe:	b113      	cbz	r3, 2206 <data_out_block_mode+0x86>
	if (retry_cnt == 0) {
    2200:	3c01      	subs	r4, #1
    2202:	d104      	bne.n	220e <data_out_block_mode+0x8e>
		host_present = false;
    2204:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    2206:	782b      	ldrb	r3, [r5, #0]
    2208:	2b00      	cmp	r3, #0
    220a:	d1c2      	bne.n	2192 <data_out_block_mode+0x12>
    220c:	e7db      	b.n	21c6 <data_out_block_mode+0x46>
    220e:	f7ff ffa9 	bl	2164 <on_failed_write.part.0>
    2212:	e7f8      	b.n	2206 <data_out_block_mode+0x86>
    2214:	200019c5 	.word	0x200019c5
    2218:	2000016c 	.word	0x2000016c
    221c:	200019c4 	.word	0x200019c4

00002220 <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2220:	4b0c      	ldr	r3, [pc, #48]	; (2254 <class_handler+0x34>)
{
    2222:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2224:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2226:	4e0c      	ldr	r6, [pc, #48]	; (2258 <class_handler+0x38>)
    2228:	4b0c      	ldr	r3, [pc, #48]	; (225c <class_handler+0x3c>)
    222a:	42b3      	cmp	r3, r6
    222c:	d303      	bcc.n	2236 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    222e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2232:	bcf0      	pop	{r4, r5, r6, r7}
    2234:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    2236:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2238:	42bd      	cmp	r5, r7
    223a:	d309      	bcc.n	2250 <class_handler+0x30>
		if (iface->class_handler &&
    223c:	691c      	ldr	r4, [r3, #16]
    223e:	b13c      	cbz	r4, 2250 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    2240:	f895 c002 	ldrb.w	ip, [r5, #2]
    2244:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    2246:	45ac      	cmp	ip, r5
    2248:	d102      	bne.n	2250 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    224a:	4623      	mov	r3, r4
}
    224c:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    224e:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2250:	3324      	adds	r3, #36	; 0x24
    2252:	e7ea      	b.n	222a <class_handler+0xa>
    2254:	20000aac 	.word	0x20000aac
    2258:	2000025c 	.word	0x2000025c
    225c:	20000238 	.word	0x20000238

00002260 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    2260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2264:	4c13      	ldr	r4, [pc, #76]	; (22b4 <custom_handler+0x54>)
    2266:	f8df 8050 	ldr.w	r8, [pc, #80]	; 22b8 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    226a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 22bc <custom_handler+0x5c>
{
    226e:	4605      	mov	r5, r0
    2270:	460e      	mov	r6, r1
    2272:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2274:	4544      	cmp	r4, r8
    2276:	d303      	bcc.n	2280 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    2278:	f06f 0085 	mvn.w	r0, #133	; 0x85
    227c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    2280:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2282:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    2286:	429a      	cmp	r2, r3
    2288:	d312      	bcc.n	22b0 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    228a:	69a3      	ldr	r3, [r4, #24]
    228c:	b183      	cbz	r3, 22b0 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    228e:	7890      	ldrb	r0, [r2, #2]
    2290:	7929      	ldrb	r1, [r5, #4]
    2292:	4288      	cmp	r0, r1
    2294:	d105      	bne.n	22a2 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    2296:	463a      	mov	r2, r7
    2298:	4631      	mov	r1, r6
    229a:	4628      	mov	r0, r5
}
    229c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    22a0:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    22a2:	7952      	ldrb	r2, [r2, #5]
    22a4:	2a01      	cmp	r2, #1
    22a6:	d103      	bne.n	22b0 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    22a8:	463a      	mov	r2, r7
    22aa:	4631      	mov	r1, r6
    22ac:	4628      	mov	r0, r5
    22ae:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    22b0:	3424      	adds	r4, #36	; 0x24
    22b2:	e7df      	b.n	2274 <custom_handler+0x14>
    22b4:	20000238 	.word	0x20000238
    22b8:	2000025c 	.word	0x2000025c
    22bc:	20000aac 	.word	0x20000aac

000022c0 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    22c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    22c4:	4c0b      	ldr	r4, [pc, #44]	; (22f4 <vendor_handler+0x34>)
    22c6:	f8df 8030 	ldr.w	r8, [pc, #48]	; 22f8 <vendor_handler+0x38>
{
    22ca:	4605      	mov	r5, r0
    22cc:	460e      	mov	r6, r1
    22ce:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    22d0:	4544      	cmp	r4, r8
    22d2:	d302      	bcc.n	22da <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    22d4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    22d8:	e009      	b.n	22ee <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    22da:	6963      	ldr	r3, [r4, #20]
    22dc:	b90b      	cbnz	r3, 22e2 <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    22de:	3424      	adds	r4, #36	; 0x24
    22e0:	e7f6      	b.n	22d0 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    22e2:	463a      	mov	r2, r7
    22e4:	4631      	mov	r1, r6
    22e6:	4628      	mov	r0, r5
    22e8:	4798      	blx	r3
    22ea:	2800      	cmp	r0, #0
    22ec:	d1f7      	bne.n	22de <vendor_handler+0x1e>
}
    22ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    22f2:	bf00      	nop
    22f4:	20000238 	.word	0x20000238
    22f8:	2000025c 	.word	0x2000025c

000022fc <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    22fc:	4802      	ldr	r0, [pc, #8]	; (2308 <usb_reset_alt_setting+0xc>)
    22fe:	2208      	movs	r2, #8
    2300:	2100      	movs	r1, #0
    2302:	f009 b929 	b.w	b558 <memset>
    2306:	bf00      	nop
    2308:	20000b67 	.word	0x20000b67

0000230c <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    230c:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    230e:	4b0b      	ldr	r3, [pc, #44]	; (233c <is_ep_valid.part.0+0x30>)
    2310:	4c0b      	ldr	r4, [pc, #44]	; (2340 <is_ep_valid.part.0+0x34>)
    2312:	42a3      	cmp	r3, r4
    2314:	d301      	bcc.n	231a <is_ep_valid.part.0+0xe>
	return false;
    2316:	2000      	movs	r0, #0
}
    2318:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    231a:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    231c:	7f1e      	ldrb	r6, [r3, #28]
    231e:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    2320:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2322:	b2d5      	uxtb	r5, r2
    2324:	42ae      	cmp	r6, r5
    2326:	d801      	bhi.n	232c <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2328:	3324      	adds	r3, #36	; 0x24
    232a:	e7f2      	b.n	2312 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    232c:	3201      	adds	r2, #1
    232e:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    2332:	4285      	cmp	r5, r0
    2334:	d1f5      	bne.n	2322 <is_ep_valid.part.0+0x16>
				return true;
    2336:	2001      	movs	r0, #1
    2338:	e7ee      	b.n	2318 <is_ep_valid.part.0+0xc>
    233a:	bf00      	nop
    233c:	20000238 	.word	0x20000238
    2340:	2000025c 	.word	0x2000025c

00002344 <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
    2344:	4809      	ldr	r0, [pc, #36]	; (236c <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
    2346:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
    2348:	7803      	ldrb	r3, [r0, #0]
    234a:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    234e:	330a      	adds	r3, #10
    2350:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    2354:	b13b      	cbz	r3, 2366 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    2356:	f100 0208 	add.w	r2, r0, #8
    235a:	f100 0110 	add.w	r1, r0, #16
    235e:	4798      	blx	r3
    2360:	43c0      	mvns	r0, r0
    2362:	0fc0      	lsrs	r0, r0, #31
}
    2364:	bd08      	pop	{r3, pc}
		return false;
    2366:	4618      	mov	r0, r3
    2368:	e7fc      	b.n	2364 <usb_handle_request.constprop.0+0x20>
    236a:	bf00      	nop
    236c:	20000aac 	.word	0x20000aac

00002370 <usb_device_init.part.0>:

/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
    2370:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
	if (!device_descriptor) {
		LOG_ERR("Failed to configure USB device stack");
    2372:	4b08      	ldr	r3, [pc, #32]	; (2394 <usb_device_init.part.0+0x24>)
    2374:	9305      	str	r3, [sp, #20]
    2376:	2302      	movs	r3, #2
    2378:	9304      	str	r3, [sp, #16]
    237a:	4807      	ldr	r0, [pc, #28]	; (2398 <usb_device_init.part.0+0x28>)
    237c:	2300      	movs	r3, #0
    237e:	aa04      	add	r2, sp, #16
    2380:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2384:	f009 f818 	bl	b3b8 <z_impl_z_log_msg2_static_create>
	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
}
    2388:	f04f 30ff 	mov.w	r0, #4294967295
    238c:	b007      	add	sp, #28
    238e:	f85d fb04 	ldr.w	pc, [sp], #4
    2392:	bf00      	nop
    2394:	0000cdcc 	.word	0x0000cdcc
    2398:	0000c808 	.word	0x0000c808

0000239c <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    239c:	2804      	cmp	r0, #4
{
    239e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    23a2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 242c <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x28>
    23a6:	4604      	mov	r4, r0
    23a8:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
    23aa:	d10e      	bne.n	23ca <forward_status_cb+0x2e>
		usb_reset_alt_setting();
    23ac:	f7ff ffa6 	bl	22fc <usb_reset_alt_setting>
		if (usb_dev.configured) {
    23b0:	f8df 907c 	ldr.w	r9, [pc, #124]	; 2430 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x2c>
    23b4:	f899 30b9 	ldrb.w	r3, [r9, #185]	; 0xb9
    23b8:	b15b      	cbz	r3, 23d2 <forward_status_cb+0x36>
			usb_cancel_transfers();
    23ba:	f000 fe0f 	bl	2fdc <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    23be:	2c04      	cmp	r4, #4
    23c0:	d001      	beq.n	23c6 <forward_status_cb+0x2a>
    23c2:	2c01      	cmp	r4, #1
    23c4:	d105      	bne.n	23d2 <forward_status_cb+0x36>
    23c6:	4d1b      	ldr	r5, [pc, #108]	; (2434 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x30>)
    23c8:	e016      	b.n	23f8 <forward_status_cb+0x5c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
    23ca:	2805      	cmp	r0, #5
    23cc:	d0f0      	beq.n	23b0 <forward_status_cb+0x14>
    23ce:	2801      	cmp	r0, #1
    23d0:	d0ee      	beq.n	23b0 <forward_status_cb+0x14>
    23d2:	4d18      	ldr	r5, [pc, #96]	; (2434 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x30>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    23d4:	4545      	cmp	r5, r8
    23d6:	d31e      	bcc.n	2416 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x12>
	if (usb_dev.user_status_callback) {
    23d8:	4b15      	ldr	r3, [pc, #84]	; (2430 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x2c>)
    23da:	6a1b      	ldr	r3, [r3, #32]
    23dc:	b31b      	cbz	r3, 2426 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x22>
		usb_dev.user_status_callback(status, param);
    23de:	4631      	mov	r1, r6
    23e0:	4620      	mov	r0, r4
}
    23e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
    23e6:	4718      	bx	r3
		ep_data = cfg_data->endpoint;
    23e8:	f8d5 a020 	ldr.w	sl, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    23ec:	2700      	movs	r7, #0
    23ee:	7f2a      	ldrb	r2, [r5, #28]
    23f0:	b2fb      	uxtb	r3, r7
    23f2:	429a      	cmp	r2, r3
    23f4:	d803      	bhi.n	23fe <forward_status_cb+0x62>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    23f6:	3524      	adds	r5, #36	; 0x24
    23f8:	4545      	cmp	r5, r8
    23fa:	d3f5      	bcc.n	23e8 <forward_status_cb+0x4c>
    23fc:	e007      	b.n	240e <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0xa>
	return usb_dc_ep_disable(ep_data->ep_addr);
    23fe:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
			if (ret < 0) {
    2402:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
    2404:	7918      	ldrb	r0, [r3, #4]
    2406:	f002 fcd1 	bl	4dac <usb_dc_ep_disable>
			if (ret < 0) {
    240a:	2800      	cmp	r0, #0
    240c:	daef      	bge.n	23ee <forward_status_cb+0x52>
				usb_dev.configured = false;
    240e:	2300      	movs	r3, #0
    2410:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
    2414:	e7dd      	b.n	23d2 <forward_status_cb+0x36>
		if (cfg_data->cb_usb_status) {
    2416:	68eb      	ldr	r3, [r5, #12]
    2418:	b11b      	cbz	r3, 2422 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x1e>
			cfg_data->cb_usb_status(cfg_data, status, param);
    241a:	4632      	mov	r2, r6
    241c:	4621      	mov	r1, r4
    241e:	4628      	mov	r0, r5
    2420:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2422:	3524      	adds	r5, #36	; 0x24
    2424:	e7d6      	b.n	23d4 <forward_status_cb+0x38>
}
    2426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    242a:	bf00      	nop
    242c:	2000025c 	.word	0x2000025c
    2430:	20000aac 	.word	0x20000aac
    2434:	20000238 	.word	0x20000238

00002438 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    2438:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    243a:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    243c:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    243e:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    2440:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    2444:	d007      	beq.n	2456 <usb_halt_endpoint_req.isra.0+0x1e>
    2446:	4620      	mov	r0, r4
    2448:	f7ff ff60 	bl	230c <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    244c:	b188      	cbz	r0, 2472 <usb_halt_endpoint_req.isra.0+0x3a>
	return (usb_dev.configuration != 0);
    244e:	4b0f      	ldr	r3, [pc, #60]	; (248c <usb_halt_endpoint_req.isra.0+0x54>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    2450:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    2454:	b168      	cbz	r0, 2472 <usb_halt_endpoint_req.isra.0+0x3a>
		if (halt) {
    2456:	4e0d      	ldr	r6, [pc, #52]	; (248c <usb_halt_endpoint_req.isra.0+0x54>)
			usb_dc_ep_set_stall(ep);
    2458:	4620      	mov	r0, r4
		if (halt) {
    245a:	b165      	cbz	r5, 2476 <usb_halt_endpoint_req.isra.0+0x3e>
			usb_dc_ep_set_stall(ep);
    245c:	f002 fc08 	bl	4c70 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    2460:	69f3      	ldr	r3, [r6, #28]
    2462:	b90b      	cbnz	r3, 2468 <usb_halt_endpoint_req.isra.0+0x30>
		return true;
    2464:	2001      	movs	r0, #1
    2466:	e004      	b.n	2472 <usb_halt_endpoint_req.isra.0+0x3a>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    2468:	2008      	movs	r0, #8
    246a:	f10d 0107 	add.w	r1, sp, #7
    246e:	4798      	blx	r3
		return true;
    2470:	4628      	mov	r0, r5
}
    2472:	b002      	add	sp, #8
    2474:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
    2476:	f002 fc33 	bl	4ce0 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    247a:	69f3      	ldr	r3, [r6, #28]
    247c:	2b00      	cmp	r3, #0
    247e:	d0f1      	beq.n	2464 <usb_halt_endpoint_req.isra.0+0x2c>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    2480:	f10d 0107 	add.w	r1, sp, #7
    2484:	2009      	movs	r0, #9
    2486:	4798      	blx	r3
    2488:	e7ec      	b.n	2464 <usb_halt_endpoint_req.isra.0+0x2c>
    248a:	bf00      	nop
    248c:	20000aac 	.word	0x20000aac

00002490 <set_endpoint>:
{
    2490:	b590      	push	{r4, r7, lr}
    2492:	b083      	sub	sp, #12
    2494:	af00      	add	r7, sp, #0
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    2496:	7883      	ldrb	r3, [r0, #2]
    2498:	703b      	strb	r3, [r7, #0]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    249a:	7903      	ldrb	r3, [r0, #4]
    249c:	7942      	ldrb	r2, [r0, #5]
    249e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    24a2:	807b      	strh	r3, [r7, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    24a4:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
    24a6:	4638      	mov	r0, r7
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    24a8:	f003 0303 	and.w	r3, r3, #3
    24ac:	713b      	strb	r3, [r7, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
    24ae:	f002 fbad 	bl	4c0c <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    24b2:	f110 0f78 	cmn.w	r0, #120	; 0x78
	ret = usb_dc_ep_configure(&ep_cfg);
    24b6:	4603      	mov	r3, r0
	if (ret == -EALREADY) {
    24b8:	7838      	ldrb	r0, [r7, #0]
    24ba:	d014      	beq.n	24e6 <set_endpoint+0x56>
	} else if (ret) {
    24bc:	b19b      	cbz	r3, 24e6 <set_endpoint+0x56>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    24be:	4b13      	ldr	r3, [pc, #76]	; (250c <set_endpoint+0x7c>)
    24c0:	466c      	mov	r4, sp
    24c2:	b088      	sub	sp, #32
    24c4:	466a      	mov	r2, sp
    24c6:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    24ca:	2303      	movs	r3, #3
    24cc:	f842 3f10 	str.w	r3, [r2, #16]!
    24d0:	480f      	ldr	r0, [pc, #60]	; (2510 <set_endpoint+0x80>)
    24d2:	2300      	movs	r3, #0
    24d4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    24d8:	f008 ff6e 	bl	b3b8 <z_impl_z_log_msg2_static_create>
		return false;
    24dc:	2000      	movs	r0, #0
    24de:	46a5      	mov	sp, r4
}
    24e0:	370c      	adds	r7, #12
    24e2:	46bd      	mov	sp, r7
    24e4:	bd90      	pop	{r4, r7, pc}
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    24e6:	f002 fc37 	bl	4d58 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    24ea:	f110 0f78 	cmn.w	r0, #120	; 0x78
    24ee:	d008      	beq.n	2502 <set_endpoint+0x72>
	} else if (ret) {
    24f0:	b138      	cbz	r0, 2502 <set_endpoint+0x72>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    24f2:	783b      	ldrb	r3, [r7, #0]
    24f4:	4907      	ldr	r1, [pc, #28]	; (2514 <set_endpoint+0x84>)
    24f6:	466c      	mov	r4, sp
    24f8:	b088      	sub	sp, #32
    24fa:	466a      	mov	r2, sp
    24fc:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2500:	e7e3      	b.n	24ca <set_endpoint+0x3a>
	usb_dev.configured = true;
    2502:	4b05      	ldr	r3, [pc, #20]	; (2518 <set_endpoint+0x88>)
    2504:	2001      	movs	r0, #1
    2506:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
    250a:	e7e9      	b.n	24e0 <set_endpoint+0x50>
    250c:	0000cdf1 	.word	0x0000cdf1
    2510:	0000c808 	.word	0x0000c808
    2514:	0000ce15 	.word	0x0000ce15
    2518:	20000aac 	.word	0x20000aac

0000251c <usb_handle_standard_request>:
{
    251c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (usb_dev.custom_req_handler &&
    2520:	4ead      	ldr	r6, [pc, #692]	; (27d8 <usb_handle_standard_request+0x2bc>)
{
    2522:	b083      	sub	sp, #12
	if (usb_dev.custom_req_handler &&
    2524:	69b3      	ldr	r3, [r6, #24]
{
    2526:	af00      	add	r7, sp, #0
    2528:	4604      	mov	r4, r0
    252a:	4688      	mov	r8, r1
    252c:	4691      	mov	r9, r2
	if (usb_dev.custom_req_handler &&
    252e:	b963      	cbnz	r3, 254a <usb_handle_standard_request+0x2e>
	switch (setup->RequestType.recipient) {
    2530:	7820      	ldrb	r0, [r4, #0]
    2532:	f000 001f 	and.w	r0, r0, #31
    2536:	2801      	cmp	r0, #1
    2538:	f000 80ac 	beq.w	2694 <usb_handle_standard_request+0x178>
    253c:	2802      	cmp	r0, #2
    253e:	f000 812b 	beq.w	2798 <usb_handle_standard_request+0x27c>
    2542:	b138      	cbz	r0, 2554 <usb_handle_standard_request+0x38>
		switch (setup->bRequest) {
    2544:	f06f 0015 	mvn.w	r0, #21
    2548:	e099      	b.n	267e <usb_handle_standard_request+0x162>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    254a:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    254c:	2800      	cmp	r0, #0
    254e:	d1ef      	bne.n	2530 <usb_handle_standard_request+0x14>
	int rc = 0;
    2550:	2000      	movs	r0, #0
    2552:	e094      	b.n	267e <usb_handle_standard_request+0x162>
	if (usb_reqtype_is_to_host(setup)) {
    2554:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    2558:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    255a:	2a00      	cmp	r2, #0
    255c:	da32      	bge.n	25c4 <usb_handle_standard_request+0xa8>
		switch (setup->bRequest) {
    255e:	2b06      	cmp	r3, #6
	uint8_t *data = *data_buf;
    2560:	f8d9 2000 	ldr.w	r2, [r9]
		switch (setup->bRequest) {
    2564:	d010      	beq.n	2588 <usb_handle_standard_request+0x6c>
    2566:	2b08      	cmp	r3, #8
    2568:	d025      	beq.n	25b6 <usb_handle_standard_request+0x9a>
    256a:	2b00      	cmp	r3, #0
    256c:	d1ea      	bne.n	2544 <usb_handle_standard_request+0x28>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    256e:	2101      	movs	r1, #1
	data[1] = 0U;
    2570:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    2572:	7011      	strb	r1, [r2, #0]
		data[0] |= (usb_dev.remote_wakeup ?
    2574:	f896 10c3 	ldrb.w	r1, [r6, #195]	; 0xc3
    2578:	2900      	cmp	r1, #0
    257a:	bf18      	it	ne
    257c:	2302      	movne	r3, #2
    257e:	f043 0301 	orr.w	r3, r3, #1
    2582:	7013      	strb	r3, [r2, #0]
		*len = 2;
    2584:	2302      	movs	r3, #2
    2586:	e01a      	b.n	25be <usb_handle_standard_request+0xa2>
			return usb_get_descriptor(setup, len, data_buf);
    2588:	8863      	ldrh	r3, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    258a:	0a1a      	lsrs	r2, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    258c:	1f11      	subs	r1, r2, #4
    258e:	2901      	cmp	r1, #1
    2590:	d9d8      	bls.n	2544 <usb_handle_standard_request+0x28>
    2592:	2a07      	cmp	r2, #7
    2594:	d8d6      	bhi.n	2544 <usb_handle_standard_request+0x28>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    2596:	b2d9      	uxtb	r1, r3
	p = (uint8_t *)usb_dev.descriptors;
    2598:	6a73      	ldr	r3, [r6, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
    259a:	781c      	ldrb	r4, [r3, #0]
    259c:	2c00      	cmp	r4, #0
    259e:	d0d1      	beq.n	2544 <usb_handle_standard_request+0x28>
		if (p[DESC_bDescriptorType] == type) {
    25a0:	785d      	ldrb	r5, [r3, #1]
    25a2:	4295      	cmp	r5, r2
    25a4:	d103      	bne.n	25ae <usb_handle_standard_request+0x92>
			if (cur_index == index) {
    25a6:	4281      	cmp	r1, r0
    25a8:	f000 8134 	beq.w	2814 <usb_handle_standard_request+0x2f8>
			cur_index++;
    25ac:	3001      	adds	r0, #1
		p += p[DESC_bLength];
    25ae:	4423      	add	r3, r4
    25b0:	e7f3      	b.n	259a <usb_handle_standard_request+0x7e>
			*len = p[DESC_bLength];
    25b2:	781b      	ldrb	r3, [r3, #0]
    25b4:	e134      	b.n	2820 <usb_handle_standard_request+0x304>
			data[0] = usb_dev.configuration;
    25b6:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    25ba:	7013      	strb	r3, [r2, #0]
			*len = 1;
    25bc:	2301      	movs	r3, #1
		*len = 2;
    25be:	f8c8 3000 	str.w	r3, [r8]
		return true;
    25c2:	e05c      	b.n	267e <usb_handle_standard_request+0x162>
		switch (setup->bRequest) {
    25c4:	3b01      	subs	r3, #1
    25c6:	2b08      	cmp	r3, #8
    25c8:	d8bc      	bhi.n	2544 <usb_handle_standard_request+0x28>
    25ca:	a201      	add	r2, pc, #4	; (adr r2, 25d0 <usb_handle_standard_request+0xb4>)
    25cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    25d0:	00002671 	.word	0x00002671
    25d4:	00002545 	.word	0x00002545
    25d8:	00002687 	.word	0x00002687
    25dc:	00002545 	.word	0x00002545
    25e0:	000025f5 	.word	0x000025f5
    25e4:	00002545 	.word	0x00002545
    25e8:	00002545 	.word	0x00002545
    25ec:	00002545 	.word	0x00002545
    25f0:	00002601 	.word	0x00002601
			return !usb_dc_set_address(setup->wValue);
    25f4:	78a0      	ldrb	r0, [r4, #2]
    25f6:	f002 facd 	bl	4b94 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    25fa:	2800      	cmp	r0, #0
    25fc:	d0a8      	beq.n	2550 <usb_handle_standard_request+0x34>
    25fe:	e7a1      	b.n	2544 <usb_handle_standard_request+0x28>
	if (setup->wValue == 0U) {
    2600:	8865      	ldrh	r5, [r4, #2]
    2602:	b155      	cbz	r5, 261a <usb_handle_standard_request+0xfe>
	uint8_t cur_config = 0xFF;
    2604:	f04f 09ff 	mov.w	r9, #255	; 0xff
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2608:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
	bool found = false;
    260c:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    260e:	46ca      	mov	sl, r9
	while (p[DESC_bLength] != 0U) {
    2610:	f898 5000 	ldrb.w	r5, [r8]
    2614:	b96d      	cbnz	r5, 2632 <usb_handle_standard_request+0x116>
	if (found) {
    2616:	2800      	cmp	r0, #0
    2618:	d094      	beq.n	2544 <usb_handle_standard_request+0x28>
		usb_reset_alt_setting();
    261a:	f7ff fe6f 	bl	22fc <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    261e:	8863      	ldrh	r3, [r4, #2]
    2620:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    2624:	69f3      	ldr	r3, [r6, #28]
    2626:	2b00      	cmp	r3, #0
    2628:	d092      	beq.n	2550 <usb_handle_standard_request+0x34>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    262a:	496c      	ldr	r1, [pc, #432]	; (27dc <usb_handle_standard_request+0x2c0>)
    262c:	2003      	movs	r0, #3
    262e:	4798      	blx	r3
    2630:	e78e      	b.n	2550 <usb_handle_standard_request+0x34>
		switch (p[DESC_bDescriptorType]) {
    2632:	f898 3001 	ldrb.w	r3, [r8, #1]
    2636:	2b04      	cmp	r3, #4
    2638:	d00d      	beq.n	2656 <usb_handle_standard_request+0x13a>
    263a:	2b05      	cmp	r3, #5
    263c:	d00e      	beq.n	265c <usb_handle_standard_request+0x140>
    263e:	2b02      	cmp	r3, #2
    2640:	d105      	bne.n	264e <usb_handle_standard_request+0x132>
			cur_config = p[CONF_DESC_bConfigurationValue];
    2642:	f898 9005 	ldrb.w	r9, [r8, #5]
			if (cur_config == setup->wValue) {
    2646:	8862      	ldrh	r2, [r4, #2]
				found = true;
    2648:	454a      	cmp	r2, r9
    264a:	bf08      	it	eq
    264c:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    264e:	f898 3000 	ldrb.w	r3, [r8]
    2652:	4498      	add	r8, r3
    2654:	e7dc      	b.n	2610 <usb_handle_standard_request+0xf4>
			cur_alt_setting =
    2656:	f898 a003 	ldrb.w	sl, [r8, #3]
			break;
    265a:	e7f8      	b.n	264e <usb_handle_standard_request+0x132>
			if ((cur_config != setup->wValue) ||
    265c:	8863      	ldrh	r3, [r4, #2]
    265e:	454b      	cmp	r3, r9
    2660:	d1f5      	bne.n	264e <usb_handle_standard_request+0x132>
    2662:	f1ba 0f00 	cmp.w	sl, #0
    2666:	d1f2      	bne.n	264e <usb_handle_standard_request+0x132>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    2668:	4640      	mov	r0, r8
    266a:	f7ff ff11 	bl	2490 <set_endpoint>
			break;
    266e:	e7ee      	b.n	264e <usb_handle_standard_request+0x132>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    2670:	8863      	ldrh	r3, [r4, #2]
    2672:	2b01      	cmp	r3, #1
    2674:	f47f af66 	bne.w	2544 <usb_handle_standard_request+0x28>
					usb_dev.remote_wakeup = false;
    2678:	2000      	movs	r0, #0
    267a:	f886 00c3 	strb.w	r0, [r6, #195]	; 0xc3
}
    267e:	370c      	adds	r7, #12
    2680:	46bd      	mov	sp, r7
    2682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    2686:	8863      	ldrh	r3, [r4, #2]
    2688:	2b01      	cmp	r3, #1
    268a:	f47f af5b 	bne.w	2544 <usb_handle_standard_request+0x28>
					usb_dev.remote_wakeup = true;
    268e:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    2692:	e75d      	b.n	2550 <usb_handle_standard_request+0x34>
	if (!is_device_configured() ||
    2694:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    2698:	2b00      	cmp	r3, #0
    269a:	f43f af53 	beq.w	2544 <usb_handle_standard_request+0x28>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    269e:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    26a0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    26a4:	7920      	ldrb	r0, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    26a6:	462b      	mov	r3, r5
	while (p[DESC_bLength] != 0U) {
    26a8:	781a      	ldrb	r2, [r3, #0]
    26aa:	2a00      	cmp	r2, #0
    26ac:	f43f af4a 	beq.w	2544 <usb_handle_standard_request+0x28>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    26b0:	7859      	ldrb	r1, [r3, #1]
    26b2:	2902      	cmp	r1, #2
    26b4:	d104      	bne.n	26c0 <usb_handle_standard_request+0x1a4>
			if (interface < cfg_descr->bNumInterfaces) {
    26b6:	f893 e004 	ldrb.w	lr, [r3, #4]
    26ba:	4586      	cmp	lr, r0
    26bc:	f200 80b3 	bhi.w	2826 <usb_handle_standard_request+0x30a>
		p += p[DESC_bLength];
    26c0:	4413      	add	r3, r2
    26c2:	e7f1      	b.n	26a8 <usb_handle_standard_request+0x18c>
			data[0] = 0U;
    26c4:	7010      	strb	r0, [r2, #0]
			data[1] = 0U;
    26c6:	7050      	strb	r0, [r2, #1]
			*len = 2;
    26c8:	f8c8 1000 	str.w	r1, [r8]
			return true;
    26cc:	e7d7      	b.n	267e <usb_handle_standard_request+0x162>
		p += p[DESC_bLength];
    26ce:	440d      	add	r5, r1
    26d0:	e0b7      	b.n	2842 <usb_handle_standard_request+0x326>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    26d2:	280b      	cmp	r0, #11
    26d4:	f47f af36 	bne.w	2544 <usb_handle_standard_request+0x28>
	bool ret = false;
    26d8:	f04f 0b00 	mov.w	fp, #0
	uint8_t cur_iface = 0xFF;
    26dc:	f04f 0aff 	mov.w	sl, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    26e0:	46d0      	mov	r8, sl
	const uint8_t *if_desc = NULL;
    26e2:	46d9      	mov	r9, fp
    26e4:	e006      	b.n	26f4 <usb_handle_standard_request+0x1d8>
		switch (p[DESC_bDescriptorType]) {
    26e6:	786b      	ldrb	r3, [r5, #1]
    26e8:	2b04      	cmp	r3, #4
    26ea:	d010      	beq.n	270e <usb_handle_standard_request+0x1f2>
    26ec:	2b05      	cmp	r3, #5
    26ee:	d024      	beq.n	273a <usb_handle_standard_request+0x21e>
		p += p[DESC_bLength];
    26f0:	782b      	ldrb	r3, [r5, #0]
    26f2:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    26f4:	782b      	ldrb	r3, [r5, #0]
    26f6:	2b00      	cmp	r3, #0
    26f8:	d1f5      	bne.n	26e6 <usb_handle_standard_request+0x1ca>
	if (usb_dev.status_callback) {
    26fa:	69f3      	ldr	r3, [r6, #28]
    26fc:	b113      	cbz	r3, 2704 <usb_handle_standard_request+0x1e8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    26fe:	4649      	mov	r1, r9
    2700:	2007      	movs	r0, #7
    2702:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    2704:	f1bb 0f00 	cmp.w	fp, #0
    2708:	f47f af22 	bne.w	2550 <usb_handle_standard_request+0x34>
    270c:	e71a      	b.n	2544 <usb_handle_standard_request+0x28>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    270e:	f895 a002 	ldrb.w	sl, [r5, #2]
			if (cur_iface == setup->wIndex &&
    2712:	88a2      	ldrh	r2, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    2714:	f895 8003 	ldrb.w	r8, [r5, #3]
			if (cur_iface == setup->wIndex &&
    2718:	4592      	cmp	sl, r2
    271a:	4653      	mov	r3, sl
    271c:	d1e8      	bne.n	26f0 <usb_handle_standard_request+0x1d4>
			    cur_alt_setting == setup->wValue) {
    271e:	8861      	ldrh	r1, [r4, #2]
			if (cur_iface == setup->wIndex &&
    2720:	4588      	cmp	r8, r1
    2722:	fa1f f288 	uxth.w	r2, r8
    2726:	d1e3      	bne.n	26f0 <usb_handle_standard_request+0x1d4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    2728:	2b07      	cmp	r3, #7
    272a:	d833      	bhi.n	2794 <usb_handle_standard_request+0x278>
		usb_dev.alt_setting[iface] = alt_setting;
    272c:	4433      	add	r3, r6
		return true;
    272e:	46a9      	mov	r9, r5
				ret = usb_set_alt_setting(setup->wIndex,
    2730:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	return true;
    2734:	f04f 0b01 	mov.w	fp, #1
    2738:	e7da      	b.n	26f0 <usb_handle_standard_request+0x1d4>
			if (cur_iface == setup->wIndex) {
    273a:	88a3      	ldrh	r3, [r4, #4]
    273c:	4553      	cmp	r3, sl
    273e:	d1d7      	bne.n	26f0 <usb_handle_standard_request+0x1d4>
	if (cur_alt_setting != alt_setting) {
    2740:	78a3      	ldrb	r3, [r4, #2]
    2742:	4543      	cmp	r3, r8
    2744:	d021      	beq.n	278a <usb_handle_standard_request+0x26e>
		ret = reset_endpoint(ep_desc);
    2746:	78ab      	ldrb	r3, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    2748:	607b      	str	r3, [r7, #4]
    274a:	4618      	mov	r0, r3
    274c:	f000 fc28 	bl	2fa0 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    2750:	687b      	ldr	r3, [r7, #4]
    2752:	4618      	mov	r0, r3
    2754:	f002 fb2a 	bl	4dac <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    2758:	f110 0f78 	cmn.w	r0, #120	; 0x78
    275c:	d0ea      	beq.n	2734 <usb_handle_standard_request+0x218>
	} else if (ret) {
    275e:	687b      	ldr	r3, [r7, #4]
    2760:	2800      	cmp	r0, #0
    2762:	d0e7      	beq.n	2734 <usb_handle_standard_request+0x218>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    2764:	491e      	ldr	r1, [pc, #120]	; (27e0 <usb_handle_standard_request+0x2c4>)
    2766:	46eb      	mov	fp, sp
    2768:	b088      	sub	sp, #32
    276a:	466a      	mov	r2, sp
    276c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2770:	2303      	movs	r3, #3
    2772:	f842 3f10 	str.w	r3, [r2, #16]!
    2776:	481b      	ldr	r0, [pc, #108]	; (27e4 <usb_handle_standard_request+0x2c8>)
    2778:	2300      	movs	r3, #0
    277a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    277e:	f008 fe1b 	bl	b3b8 <z_impl_z_log_msg2_static_create>
    2782:	46dd      	mov	sp, fp
	return false;
    2784:	f04f 0b00 	mov.w	fp, #0
    2788:	e7b2      	b.n	26f0 <usb_handle_standard_request+0x1d4>
		ret = set_endpoint(ep_desc);
    278a:	4628      	mov	r0, r5
    278c:	f7ff fe80 	bl	2490 <set_endpoint>
    2790:	4683      	mov	fp, r0
    2792:	e7ad      	b.n	26f0 <usb_handle_standard_request+0x1d4>
    2794:	46a9      	mov	r9, r5
    2796:	e7f5      	b.n	2784 <usb_handle_standard_request+0x268>
	if (usb_reqtype_is_to_host(setup)) {
    2798:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    279c:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    279e:	2a00      	cmp	r2, #0
    27a0:	da22      	bge.n	27e8 <usb_handle_standard_request+0x2cc>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    27a2:	2b00      	cmp	r3, #0
    27a4:	f47f aece 	bne.w	2544 <usb_handle_standard_request+0x28>
	uint8_t ep = setup->wIndex;
    27a8:	7924      	ldrb	r4, [r4, #4]
	if (USB_EP_GET_IDX(ep) == 0) {
    27aa:	0663      	lsls	r3, r4, #25
    27ac:	d00a      	beq.n	27c4 <usb_handle_standard_request+0x2a8>
    27ae:	4620      	mov	r0, r4
    27b0:	f7ff fdac 	bl	230c <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    27b4:	2800      	cmp	r0, #0
    27b6:	f43f aec5 	beq.w	2544 <usb_handle_standard_request+0x28>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    27ba:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    27be:	2b00      	cmp	r3, #0
    27c0:	f43f aec0 	beq.w	2544 <usb_handle_standard_request+0x28>
    27c4:	f8d9 5000 	ldr.w	r5, [r9]
		usb_dc_ep_is_stalled(ep, &data[0]);
    27c8:	4620      	mov	r0, r4
    27ca:	4629      	mov	r1, r5
    27cc:	f002 faa8 	bl	4d20 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    27d0:	2000      	movs	r0, #0
    27d2:	7068      	strb	r0, [r5, #1]
    27d4:	e6d6      	b.n	2584 <usb_handle_standard_request+0x68>
    27d6:	bf00      	nop
    27d8:	20000aac 	.word	0x20000aac
    27dc:	20000b66 	.word	0x20000b66
    27e0:	0000ce36 	.word	0x0000ce36
    27e4:	0000c808 	.word	0x0000c808
		switch (setup->bRequest) {
    27e8:	2b01      	cmp	r3, #1
    27ea:	d008      	beq.n	27fe <usb_handle_standard_request+0x2e2>
    27ec:	2b03      	cmp	r3, #3
    27ee:	f47f aea9 	bne.w	2544 <usb_handle_standard_request+0x28>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    27f2:	8863      	ldrh	r3, [r4, #2]
    27f4:	2b00      	cmp	r3, #0
    27f6:	f47f aea5 	bne.w	2544 <usb_handle_standard_request+0x28>
				return usb_halt_endpoint_req(setup, true);
    27fa:	2101      	movs	r1, #1
    27fc:	e003      	b.n	2806 <usb_handle_standard_request+0x2ea>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    27fe:	8861      	ldrh	r1, [r4, #2]
    2800:	2900      	cmp	r1, #0
    2802:	f47f ae9f 	bne.w	2544 <usb_handle_standard_request+0x28>
				return usb_halt_endpoint_req(setup, true);
    2806:	88a0      	ldrh	r0, [r4, #4]
    2808:	f7ff fe16 	bl	2438 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    280c:	2800      	cmp	r0, #0
    280e:	f47f ae9f 	bne.w	2550 <usb_handle_standard_request+0x34>
    2812:	e697      	b.n	2544 <usb_handle_standard_request+0x28>
		if (type == USB_DESC_CONFIGURATION) {
    2814:	2a02      	cmp	r2, #2
		*data = p;
    2816:	f8c9 3000 	str.w	r3, [r9]
		if (type == USB_DESC_CONFIGURATION) {
    281a:	f47f aeca 	bne.w	25b2 <usb_handle_standard_request+0x96>
			*len = (p[CONF_DESC_wTotalLength]) |
    281e:	885b      	ldrh	r3, [r3, #2]
				*len = 1;
    2820:	f8c8 3000 	str.w	r3, [r8]
    2824:	e694      	b.n	2550 <usb_handle_standard_request+0x34>
	if (usb_reqtype_is_to_host(setup)) {
    2826:	f994 3000 	ldrsb.w	r3, [r4]
		switch (setup->bRequest) {
    282a:	7860      	ldrb	r0, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    282c:	2b00      	cmp	r3, #0
    282e:	f6bf af50 	bge.w	26d2 <usb_handle_standard_request+0x1b6>
    2832:	f8d9 2000 	ldr.w	r2, [r9]
		switch (setup->bRequest) {
    2836:	2800      	cmp	r0, #0
    2838:	f43f af44 	beq.w	26c4 <usb_handle_standard_request+0x1a8>
    283c:	280a      	cmp	r0, #10
    283e:	f47f ae81 	bne.w	2544 <usb_handle_standard_request+0x28>
	while (p[DESC_bLength] != 0U) {
    2842:	7829      	ldrb	r1, [r5, #0]
    2844:	2900      	cmp	r1, #0
    2846:	f43f ae7d 	beq.w	2544 <usb_handle_standard_request+0x28>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    284a:	786b      	ldrb	r3, [r5, #1]
    284c:	2b04      	cmp	r3, #4
    284e:	f47f af3e 	bne.w	26ce <usb_handle_standard_request+0x1b2>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    2852:	78ab      	ldrb	r3, [r5, #2]
			if (cur_iface == setup->wIndex) {
    2854:	459c      	cmp	ip, r3
    2856:	f47f af3a 	bne.w	26ce <usb_handle_standard_request+0x1b2>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    285a:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    285c:	bf96      	itet	ls
    285e:	199b      	addls	r3, r3, r6
	return 0;
    2860:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    2862:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    2866:	7013      	strb	r3, [r2, #0]
				*len = 1;
    2868:	2301      	movs	r3, #1
    286a:	e7d9      	b.n	2820 <usb_handle_standard_request+0x304>

0000286c <usb_data_to_host>:
{
    286c:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    286e:	4c13      	ldr	r4, [pc, #76]	; (28bc <usb_data_to_host+0x50>)
    2870:	7d23      	ldrb	r3, [r4, #20]
    2872:	b9cb      	cbnz	r3, 28a8 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    2874:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    2876:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    2878:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    287a:	ab01      	add	r3, sp, #4
    287c:	2080      	movs	r0, #128	; 0x80
    287e:	f008 fde0 	bl	b442 <usb_write>
		usb_dev.data_buf += chunk;
    2882:	9a01      	ldr	r2, [sp, #4]
    2884:	68a3      	ldr	r3, [r4, #8]
    2886:	4413      	add	r3, r2
    2888:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    288a:	68e3      	ldr	r3, [r4, #12]
    288c:	1a9b      	subs	r3, r3, r2
    288e:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    2890:	b943      	cbnz	r3, 28a4 <usb_data_to_host+0x38>
    2892:	b13a      	cbz	r2, 28a4 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    2894:	6923      	ldr	r3, [r4, #16]
    2896:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    2898:	429a      	cmp	r2, r3
    289a:	dd03      	ble.n	28a4 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    289c:	069b      	lsls	r3, r3, #26
    289e:	d101      	bne.n	28a4 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    28a0:	2301      	movs	r3, #1
    28a2:	7523      	strb	r3, [r4, #20]
}
    28a4:	b002      	add	sp, #8
    28a6:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    28a8:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    28aa:	461a      	mov	r2, r3
    28ac:	4619      	mov	r1, r3
    28ae:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    28b0:	7523      	strb	r3, [r4, #20]
}
    28b2:	b002      	add	sp, #8
    28b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    28b8:	f002 ba9e 	b.w	4df8 <usb_dc_ep_write>
    28bc:	20000aac 	.word	0x20000aac

000028c0 <usb_handle_control_transfer>:
{
    28c0:	b570      	push	{r4, r5, r6, lr}
    28c2:	b08a      	sub	sp, #40	; 0x28
	uint32_t chunk = 0U;
    28c4:	2300      	movs	r3, #0
{
    28c6:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    28c8:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    28ca:	4606      	mov	r6, r0
    28cc:	2800      	cmp	r0, #0
    28ce:	d16f      	bne.n	29b0 <usb_handle_control_transfer+0xf0>
    28d0:	2900      	cmp	r1, #0
    28d2:	d147      	bne.n	2964 <usb_handle_control_transfer+0xa4>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    28d4:	2208      	movs	r2, #8
    28d6:	460b      	mov	r3, r1
    28d8:	eb0d 0102 	add.w	r1, sp, r2
    28dc:	f008 fe93 	bl	b606 <usb_dc_ep_read>
    28e0:	2800      	cmp	r0, #0
    28e2:	da04      	bge.n	28ee <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    28e4:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    28e6:	f002 f9c3 	bl	4c70 <usb_dc_ep_set_stall>
}
    28ea:	b00a      	add	sp, #40	; 0x28
    28ec:	bd70      	pop	{r4, r5, r6, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    28ee:	4c35      	ldr	r4, [pc, #212]	; (29c4 <usb_handle_control_transfer+0x104>)
		setup->bRequest = setup_raw.bRequest;
    28f0:	f89d 3009 	ldrb.w	r3, [sp, #9]
		setup->bmRequestType = setup_raw.bmRequestType;
    28f4:	f89d 2008 	ldrb.w	r2, [sp, #8]
		setup->bRequest = setup_raw.bRequest;
    28f8:	7063      	strb	r3, [r4, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    28fa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    28fe:	8063      	strh	r3, [r4, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    2900:	f8bd 300c 	ldrh.w	r3, [sp, #12]
		setup->bmRequestType = setup_raw.bmRequestType;
    2904:	7022      	strb	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    2906:	80a3      	strh	r3, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    2908:	f104 0138 	add.w	r1, r4, #56	; 0x38
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    290c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    2910:	80e3      	strh	r3, [r4, #6]
		if (usb_reqtype_is_to_device(setup)) {
    2912:	0612      	lsls	r2, r2, #24
		usb_dev.data_buf_residue = 0;
    2914:	e9c4 5503 	strd	r5, r5, [r4, #12]
		usb_dev.data_buf = usb_dev.req_data;
    2918:	60a1      	str	r1, [r4, #8]
		usb_dev.zlp_flag = false;
    291a:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    291c:	d415      	bmi.n	294a <usb_handle_control_transfer+0x8a>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    291e:	2b80      	cmp	r3, #128	; 0x80
    2920:	d90f      	bls.n	2942 <usb_handle_control_transfer+0x82>
				LOG_ERR("Request buffer too small");
    2922:	4b29      	ldr	r3, [pc, #164]	; (29c8 <usb_handle_control_transfer+0x108>)
    2924:	9309      	str	r3, [sp, #36]	; 0x24
    2926:	2302      	movs	r3, #2
    2928:	9308      	str	r3, [sp, #32]
    292a:	4828      	ldr	r0, [pc, #160]	; (29cc <usb_handle_control_transfer+0x10c>)
    292c:	462b      	mov	r3, r5
    292e:	aa08      	add	r2, sp, #32
    2930:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2934:	f008 fd40 	bl	b3b8 <z_impl_z_log_msg2_static_create>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2938:	2080      	movs	r0, #128	; 0x80
    293a:	f002 f999 	bl	4c70 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    293e:	4628      	mov	r0, r5
    2940:	e7d1      	b.n	28e6 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    2942:	b113      	cbz	r3, 294a <usb_handle_control_transfer+0x8a>
				usb_dev.data_buf_residue = setup->wLength;
    2944:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    2948:	e7cf      	b.n	28ea <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    294a:	f7ff fcfb 	bl	2344 <usb_handle_request.constprop.0>
    294e:	2800      	cmp	r0, #0
    2950:	d0c8      	beq.n	28e4 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    2952:	88e2      	ldrh	r2, [r4, #6]
    2954:	6923      	ldr	r3, [r4, #16]
    2956:	429a      	cmp	r2, r3
    2958:	bfd4      	ite	le
    295a:	60e2      	strle	r2, [r4, #12]
    295c:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    295e:	f7ff ff85 	bl	286c <usb_data_to_host>
    2962:	e7c2      	b.n	28ea <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    2964:	4c17      	ldr	r4, [pc, #92]	; (29c4 <usb_handle_control_transfer+0x104>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2966:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    296a:	2a00      	cmp	r2, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    296c:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
    296e:	dc05      	bgt.n	297c <usb_handle_control_transfer+0xbc>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2970:	4602      	mov	r2, r0
    2972:	f008 fe48 	bl	b606 <usb_dc_ep_read>
    2976:	2800      	cmp	r0, #0
    2978:	dab7      	bge.n	28ea <usb_handle_control_transfer+0x2a>
    297a:	e7b3      	b.n	28e4 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    297c:	f008 fe43 	bl	b606 <usb_dc_ep_read>
    2980:	2800      	cmp	r0, #0
    2982:	da04      	bge.n	298e <usb_handle_control_transfer+0xce>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2984:	2080      	movs	r0, #128	; 0x80
    2986:	f002 f973 	bl	4c70 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    298a:	4630      	mov	r0, r6
    298c:	e7ab      	b.n	28e6 <usb_handle_control_transfer+0x26>
		usb_dev.data_buf += chunk;
    298e:	9901      	ldr	r1, [sp, #4]
    2990:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    2992:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
    2994:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
    2996:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
    2998:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    299a:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    299c:	2b00      	cmp	r3, #0
    299e:	d1a4      	bne.n	28ea <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    29a0:	f104 0338 	add.w	r3, r4, #56	; 0x38
    29a4:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    29a6:	f7ff fccd 	bl	2344 <usb_handle_request.constprop.0>
    29aa:	2800      	cmp	r0, #0
    29ac:	d1d7      	bne.n	295e <usb_handle_control_transfer+0x9e>
    29ae:	e799      	b.n	28e4 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    29b0:	2880      	cmp	r0, #128	; 0x80
    29b2:	d19a      	bne.n	28ea <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    29b4:	4b03      	ldr	r3, [pc, #12]	; (29c4 <usb_handle_control_transfer+0x104>)
    29b6:	68da      	ldr	r2, [r3, #12]
    29b8:	2a00      	cmp	r2, #0
    29ba:	d1d0      	bne.n	295e <usb_handle_control_transfer+0x9e>
    29bc:	7d1b      	ldrb	r3, [r3, #20]
    29be:	2b00      	cmp	r3, #0
    29c0:	d1cd      	bne.n	295e <usb_handle_control_transfer+0x9e>
    29c2:	e792      	b.n	28ea <usb_handle_control_transfer+0x2a>
    29c4:	20000aac 	.word	0x20000aac
    29c8:	0000ce58 	.word	0x0000ce58
    29cc:	0000c808 	.word	0x0000c808

000029d0 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    29d0:	4b05      	ldr	r3, [pc, #20]	; (29e8 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    29d2:	4a06      	ldr	r2, [pc, #24]	; (29ec <usb_set_config+0x1c>)
    29d4:	629a      	str	r2, [r3, #40]	; 0x28
    29d6:	4a06      	ldr	r2, [pc, #24]	; (29f0 <usb_set_config+0x20>)
    29d8:	62da      	str	r2, [r3, #44]	; 0x2c
    29da:	4a06      	ldr	r2, [pc, #24]	; (29f4 <usb_set_config+0x24>)
    29dc:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    29de:	4a06      	ldr	r2, [pc, #24]	; (29f8 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    29e0:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    29e2:	619a      	str	r2, [r3, #24]
}
    29e4:	2000      	movs	r0, #0
    29e6:	4770      	bx	lr
    29e8:	20000aac 	.word	0x20000aac
    29ec:	0000251d 	.word	0x0000251d
    29f0:	00002221 	.word	0x00002221
    29f4:	000022c1 	.word	0x000022c1
    29f8:	00002261 	.word	0x00002261

000029fc <usb_device_init>:
	if (usb_dev.enabled == true) {
    29fc:	4b09      	ldr	r3, [pc, #36]	; (2a24 <usb_device_init+0x28>)
{
    29fe:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
    2a00:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    2a04:	b954      	cbnz	r4, 2a1c <usb_device_init+0x20>
	device_descriptor = usb_get_device_descriptor();
    2a06:	f000 f9e7 	bl	2dd8 <usb_get_device_descriptor>
	if (!device_descriptor) {
    2a0a:	b918      	cbnz	r0, 2a14 <usb_device_init+0x18>
}
    2a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2a10:	f7ff bcae 	b.w	2370 <usb_device_init.part.0>
	usb_set_config(device_descriptor);
    2a14:	f7ff ffdc 	bl	29d0 <usb_set_config>
	return 0;
    2a18:	4620      	mov	r0, r4
}
    2a1a:	bd10      	pop	{r4, pc}
		return -EALREADY;
    2a1c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    2a20:	e7fb      	b.n	2a1a <usb_device_init+0x1e>
    2a22:	bf00      	nop
    2a24:	20000aac 	.word	0x20000aac

00002a28 <usb_enable>:
{
    2a28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2a2c:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
    2a2e:	4d35      	ldr	r5, [pc, #212]	; (2b04 <usb_enable+0xdc>)
	return z_impl_k_mutex_lock(mutex, timeout);
    2a30:	4835      	ldr	r0, [pc, #212]	; (2b08 <usb_enable+0xe0>)
    2a32:	f04f 32ff 	mov.w	r2, #4294967295
    2a36:	f04f 33ff 	mov.w	r3, #4294967295
    2a3a:	f006 fe4b 	bl	96d4 <z_impl_k_mutex_lock>
    2a3e:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    2a42:	2e00      	cmp	r6, #0
    2a44:	d15b      	bne.n	2afe <usb_enable+0xd6>
	usb_dev.status_callback = cb;
    2a46:	4831      	ldr	r0, [pc, #196]	; (2b0c <usb_enable+0xe4>)
	usb_dev.user_status_callback = status_cb;
    2a48:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    2a4a:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    2a4c:	f002 fb44 	bl	50d8 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    2a50:	f002 f862 	bl	4b18 <usb_dc_attach>
	if (ret < 0) {
    2a54:	1e04      	subs	r4, r0, #0
    2a56:	db36      	blt.n	2ac6 <usb_enable+0x9e>
	ret = usb_transfer_init();
    2a58:	f000 fae8 	bl	302c <usb_transfer_init>
	if (ret < 0) {
    2a5c:	1e04      	subs	r4, r0, #0
    2a5e:	db32      	blt.n	2ac6 <usb_enable+0x9e>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    2a60:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    2a62:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    2a64:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    2a68:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    2a6c:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    2a70:	f002 f8cc 	bl	4c0c <usb_dc_ep_configure>
	if (ret < 0) {
    2a74:	1e04      	subs	r4, r0, #0
    2a76:	db26      	blt.n	2ac6 <usb_enable+0x9e>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    2a78:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    2a7a:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    2a7c:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    2a80:	f002 f8c4 	bl	4c0c <usb_dc_ep_configure>
	if (ret < 0) {
    2a84:	1e04      	subs	r4, r0, #0
    2a86:	db1e      	blt.n	2ac6 <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    2a88:	4921      	ldr	r1, [pc, #132]	; (2b10 <usb_enable+0xe8>)
    2a8a:	4630      	mov	r0, r6
    2a8c:	f002 fb10 	bl	50b0 <usb_dc_ep_set_callback>
	if (ret < 0) {
    2a90:	1e04      	subs	r4, r0, #0
    2a92:	db18      	blt.n	2ac6 <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    2a94:	491e      	ldr	r1, [pc, #120]	; (2b10 <usb_enable+0xe8>)
    2a96:	4638      	mov	r0, r7
    2a98:	f002 fb0a 	bl	50b0 <usb_dc_ep_set_callback>
	if (ret < 0) {
    2a9c:	1e04      	subs	r4, r0, #0
    2a9e:	db12      	blt.n	2ac6 <usb_enable+0x9e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2aa0:	4c1c      	ldr	r4, [pc, #112]	; (2b14 <usb_enable+0xec>)
    2aa2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2b18 <usb_enable+0xf0>
    2aa6:	4544      	cmp	r4, r8
    2aa8:	d314      	bcc.n	2ad4 <usb_enable+0xac>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    2aaa:	2000      	movs	r0, #0
    2aac:	f002 f954 	bl	4d58 <usb_dc_ep_enable>
	if (ret < 0) {
    2ab0:	1e04      	subs	r4, r0, #0
    2ab2:	db08      	blt.n	2ac6 <usb_enable+0x9e>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    2ab4:	2080      	movs	r0, #128	; 0x80
    2ab6:	f002 f94f 	bl	4d58 <usb_dc_ep_enable>
	if (ret < 0) {
    2aba:	1e04      	subs	r4, r0, #0
    2abc:	db03      	blt.n	2ac6 <usb_enable+0x9e>
	usb_dev.enabled = true;
    2abe:	2301      	movs	r3, #1
    2ac0:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    2ac4:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    2ac6:	4810      	ldr	r0, [pc, #64]	; (2b08 <usb_enable+0xe0>)
    2ac8:	f006 fe7c 	bl	97c4 <z_impl_k_mutex_unlock>
}
    2acc:	4620      	mov	r0, r4
    2ace:	b002      	add	sp, #8
    2ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
    2ad4:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2ad6:	2600      	movs	r6, #0
    2ad8:	7f22      	ldrb	r2, [r4, #28]
    2ada:	b2f3      	uxtb	r3, r6
    2adc:	429a      	cmp	r2, r3
    2ade:	d801      	bhi.n	2ae4 <usb_enable+0xbc>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2ae0:	3424      	adds	r4, #36	; 0x24
    2ae2:	e7e0      	b.n	2aa6 <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    2ae4:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    2ae8:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    2aec:	7910      	ldrb	r0, [r2, #4]
    2aee:	f002 fadf 	bl	50b0 <usb_dc_ep_set_callback>
    2af2:	3601      	adds	r6, #1
    2af4:	2800      	cmp	r0, #0
    2af6:	d0ef      	beq.n	2ad8 <usb_enable+0xb0>
    2af8:	f04f 34ff 	mov.w	r4, #4294967295
    2afc:	e7e3      	b.n	2ac6 <usb_enable+0x9e>
		ret = -EALREADY;
    2afe:	f06f 0477 	mvn.w	r4, #119	; 0x77
    2b02:	e7e0      	b.n	2ac6 <usb_enable+0x9e>
    2b04:	20000aac 	.word	0x20000aac
    2b08:	20000180 	.word	0x20000180
    2b0c:	0000239d 	.word	0x0000239d
    2b10:	000028c1 	.word	0x000028c1
    2b14:	20000238 	.word	0x20000238
    2b18:	2000025c 	.word	0x2000025c

00002b1c <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    2b1c:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    2b1e:	4b1f      	ldr	r3, [pc, #124]	; (2b9c <usb_update_sn_string_descriptor+0x80>)
{
    2b20:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    2b22:	aa05      	add	r2, sp, #20
    2b24:	f103 0510 	add.w	r5, r3, #16
    2b28:	6818      	ldr	r0, [r3, #0]
    2b2a:	6859      	ldr	r1, [r3, #4]
    2b2c:	4614      	mov	r4, r2
    2b2e:	c403      	stmia	r4!, {r0, r1}
    2b30:	3308      	adds	r3, #8
    2b32:	42ab      	cmp	r3, r5
    2b34:	4622      	mov	r2, r4
    2b36:	d1f7      	bne.n	2b28 <usb_update_sn_string_descriptor+0xc>
    2b38:	781b      	ldrb	r3, [r3, #0]
    2b3a:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    2b3c:	2210      	movs	r2, #16
    2b3e:	2100      	movs	r1, #0
    2b40:	a801      	add	r0, sp, #4
    2b42:	f008 fd09 	bl	b558 <memset>
	memset(sn, 0, sizeof(sn));
    2b46:	2212      	movs	r2, #18
    2b48:	2100      	movs	r1, #0
    2b4a:	4815      	ldr	r0, [pc, #84]	; (2ba0 <usb_update_sn_string_descriptor+0x84>)
    2b4c:	f008 fd04 	bl	b558 <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    2b50:	2110      	movs	r1, #16
    2b52:	a801      	add	r0, sp, #4
    2b54:	f008 fed1 	bl	b8fa <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    2b58:	2800      	cmp	r0, #0
    2b5a:	dd1b      	ble.n	2b94 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    2b5c:	2808      	cmp	r0, #8
    2b5e:	bfb8      	it	lt
    2b60:	2008      	movlt	r0, #8
    2b62:	3808      	subs	r0, #8
    2b64:	ab01      	add	r3, sp, #4
    2b66:	4a0e      	ldr	r2, [pc, #56]	; (2ba0 <usb_update_sn_string_descriptor+0x84>)
    2b68:	4418      	add	r0, r3
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    2b6a:	2100      	movs	r1, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2b6c:	f810 3b01 	ldrb.w	r3, [r0], #1
    2b70:	ac0a      	add	r4, sp, #40	; 0x28
    2b72:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2b76:	f003 030f 	and.w	r3, r3, #15
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2b7a:	f814 4c14 	ldrb.w	r4, [r4, #-20]
    2b7e:	7014      	strb	r4, [r2, #0]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2b80:	ac0a      	add	r4, sp, #40	; 0x28
    2b82:	4423      	add	r3, r4
		for (int i = 0; i < usblen; i++) {
    2b84:	3101      	adds	r1, #1
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2b86:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    2b8a:	7053      	strb	r3, [r2, #1]
		for (int i = 0; i < usblen; i++) {
    2b8c:	2908      	cmp	r1, #8
    2b8e:	f102 0202 	add.w	r2, r2, #2
    2b92:	d1eb      	bne.n	2b6c <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    2b94:	4802      	ldr	r0, [pc, #8]	; (2ba0 <usb_update_sn_string_descriptor+0x84>)
    2b96:	b00b      	add	sp, #44	; 0x2c
    2b98:	bd30      	pop	{r4, r5, pc}
    2b9a:	bf00      	nop
    2b9c:	0000ce7c 	.word	0x0000ce7c
    2ba0:	200019c6 	.word	0x200019c6

00002ba4 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    2ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ba8:	b08b      	sub	sp, #44	; 0x2c
    2baa:	4604      	mov	r4, r0
    2bac:	af00      	add	r7, sp, #0
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
    2bae:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    2bb0:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    2bb4:	46b2      	mov	sl, r6
	struct usb_cfg_data *cfg_data = NULL;
    2bb6:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    2bb8:	46b0      	mov	r8, r6

	while (head->bLength != 0U) {
    2bba:	7820      	ldrb	r0, [r4, #0]
    2bbc:	b938      	cbnz	r0, 2bce <usb_fix_descriptor+0x2a>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
    2bbe:	4b7c      	ldr	r3, [pc, #496]	; (2db0 <usb_fix_descriptor+0x20c>)
    2bc0:	3402      	adds	r4, #2
    2bc2:	429c      	cmp	r4, r3
    2bc4:	d1f3      	bne.n	2bae <usb_fix_descriptor+0xa>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
}
    2bc6:	372c      	adds	r7, #44	; 0x2c
    2bc8:	46bd      	mov	sp, r7
    2bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (head->bDescriptorType) {
    2bce:	7863      	ldrb	r3, [r4, #1]
    2bd0:	2b05      	cmp	r3, #5
    2bd2:	d805      	bhi.n	2be0 <usb_fix_descriptor+0x3c>
    2bd4:	e8df f003 	tbb	[pc, r3]
    2bd8:	97030497 	.word	0x97030497
    2bdc:	2c07      	.short	0x2c07
    2bde:	46a0      	mov	r8, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    2be0:	7823      	ldrb	r3, [r4, #0]
    2be2:	441c      	add	r4, r3
    2be4:	e7e9      	b.n	2bba <usb_fix_descriptor+0x16>
			if (if_descr->bAlternateSetting) {
    2be6:	78e3      	ldrb	r3, [r4, #3]
    2be8:	2b00      	cmp	r3, #0
    2bea:	d1f9      	bne.n	2be0 <usb_fix_descriptor+0x3c>
			if (if_descr->bInterfaceNumber == 0U) {
    2bec:	78a3      	ldrb	r3, [r4, #2]
    2bee:	b1e3      	cbz	r3, 2c2a <usb_fix_descriptor+0x86>
			numof_ifaces++;
    2bf0:	f10a 0a01 	add.w	sl, sl, #1
    2bf4:	fa5f fa8a 	uxtb.w	sl, sl
			break;
    2bf8:	e7f2      	b.n	2be0 <usb_fix_descriptor+0x3c>
		if (cfg_data->interface_descriptor == iface) {
    2bfa:	686a      	ldr	r2, [r5, #4]
    2bfc:	4294      	cmp	r4, r2
    2bfe:	f000 80ce 	beq.w	2d9e <usb_fix_descriptor+0x1fa>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2c02:	3524      	adds	r5, #36	; 0x24
    2c04:	429d      	cmp	r5, r3
    2c06:	d3f8      	bcc.n	2bfa <usb_fix_descriptor+0x56>
					LOG_ERR("There is no usb_cfg_data "
    2c08:	4b6a      	ldr	r3, [pc, #424]	; (2db4 <usb_fix_descriptor+0x210>)
    2c0a:	466d      	mov	r5, sp
    2c0c:	b088      	sub	sp, #32
    2c0e:	466a      	mov	r2, sp
    2c10:	e9c2 3405 	strd	r3, r4, [r2, #20]
    2c14:	2303      	movs	r3, #3
    2c16:	f842 3f10 	str.w	r3, [r2, #16]!
    2c1a:	4867      	ldr	r0, [pc, #412]	; (2db8 <usb_fix_descriptor+0x214>)
    2c1c:	2300      	movs	r3, #0
    2c1e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2c22:	f008 fbc9 	bl	b3b8 <z_impl_z_log_msg2_static_create>
    2c26:	46ad      	mov	sp, r5
    2c28:	e010      	b.n	2c4c <usb_fix_descriptor+0xa8>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2c2a:	4d64      	ldr	r5, [pc, #400]	; (2dbc <usb_fix_descriptor+0x218>)
    2c2c:	4b64      	ldr	r3, [pc, #400]	; (2dc0 <usb_fix_descriptor+0x21c>)
    2c2e:	e7e9      	b.n	2c04 <usb_fix_descriptor+0x60>
			if (!cfg_data) {
    2c30:	2d00      	cmp	r5, #0
    2c32:	d166      	bne.n	2d02 <usb_fix_descriptor+0x15e>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    2c34:	4b63      	ldr	r3, [pc, #396]	; (2dc4 <usb_fix_descriptor+0x220>)
				LOG_ERR("Failed to validate endpoints");
    2c36:	627b      	str	r3, [r7, #36]	; 0x24
    2c38:	2302      	movs	r3, #2
    2c3a:	623b      	str	r3, [r7, #32]
    2c3c:	2300      	movs	r3, #0
    2c3e:	485e      	ldr	r0, [pc, #376]	; (2db8 <usb_fix_descriptor+0x214>)
    2c40:	f107 0220 	add.w	r2, r7, #32
    2c44:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2c48:	f008 fbb6 	bl	b3b8 <z_impl_z_log_msg2_static_create>
					return -1;
    2c4c:	f04f 30ff 	mov.w	r0, #4294967295
    2c50:	e7b9      	b.n	2bc6 <usb_fix_descriptor+0x22>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    2c52:	6a29      	ldr	r1, [r5, #32]
    2c54:	78a0      	ldrb	r0, [r4, #2]
    2c56:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    2c5a:	790b      	ldrb	r3, [r1, #4]
    2c5c:	4298      	cmp	r0, r3
    2c5e:	d005      	beq.n	2c6c <usb_fix_descriptor+0xc8>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    2c60:	3201      	adds	r2, #1
    2c62:	7f2b      	ldrb	r3, [r5, #28]
    2c64:	429a      	cmp	r2, r3
    2c66:	d3f4      	bcc.n	2c52 <usb_fix_descriptor+0xae>
				LOG_ERR("Failed to validate endpoints");
    2c68:	4b57      	ldr	r3, [pc, #348]	; (2dc8 <usb_fix_descriptor+0x224>)
    2c6a:	e7e4      	b.n	2c36 <usb_fix_descriptor+0x92>
    2c6c:	f04f 0901 	mov.w	r9, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    2c70:	78e0      	ldrb	r0, [r4, #3]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    2c72:	f894 c005 	ldrb.w	ip, [r4, #5]
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    2c76:	f000 0003 	and.w	r0, r0, #3
    2c7a:	7538      	strb	r0, [r7, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    2c7c:	7920      	ldrb	r0, [r4, #4]
    2c7e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    2c82:	8278      	strh	r0, [r7, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    2c84:	f994 0002 	ldrsb.w	r0, [r4, #2]
    2c88:	2800      	cmp	r0, #0
    2c8a:	fa5f f389 	uxtb.w	r3, r9
    2c8e:	da2a      	bge.n	2ce6 <usb_fix_descriptor+0x142>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    2c90:	f109 0010 	add.w	r0, r9, #16
    2c94:	f04f 0c01 	mov.w	ip, #1
    2c98:	fa0c f000 	lsl.w	r0, ip, r0
    2c9c:	ea10 0f0b 	tst.w	r0, fp
    2ca0:	d129      	bne.n	2cf6 <usb_fix_descriptor+0x152>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    2ca2:	f063 007f 	orn	r0, r3, #127	; 0x7f
    2ca6:	7438      	strb	r0, [r7, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    2ca8:	f107 0010 	add.w	r0, r7, #16
    2cac:	e9c7 3101 	strd	r3, r1, [r7, #4]
    2cb0:	60fa      	str	r2, [r7, #12]
    2cb2:	f001 ff81 	bl	4bb8 <usb_dc_ep_check_cap>
    2cb6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    2cba:	687b      	ldr	r3, [r7, #4]
    2cbc:	b9d8      	cbnz	r0, 2cf6 <usb_fix_descriptor+0x152>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    2cbe:	7c3a      	ldrb	r2, [r7, #16]
    2cc0:	70a2      	strb	r2, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    2cc2:	f012 0f80 	tst.w	r2, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    2cc6:	bf1c      	itt	ne
    2cc8:	3310      	addne	r3, #16
    2cca:	b2db      	uxtbne	r3, r3
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    2ccc:	710a      	strb	r2, [r1, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    2cce:	f04f 0201 	mov.w	r2, #1
					*requested_ep |= (1U << (idx + 16U));
    2cd2:	bf15      	itete	ne
    2cd4:	fa02 f303 	lslne.w	r3, r2, r3
					*requested_ep |= (1U << idx);
    2cd8:	fa02 f209 	lsleq.w	r2, r2, r9
					*requested_ep |= (1U << (idx + 16U));
    2cdc:	ea4b 0b03 	orrne.w	fp, fp, r3
					*requested_ep |= (1U << idx);
    2ce0:	ea4b 0b02 	orreq.w	fp, fp, r2
				return 0;
    2ce4:	e77c      	b.n	2be0 <usb_fix_descriptor+0x3c>
				if ((*requested_ep & (1U << (idx)))) {
    2ce6:	2001      	movs	r0, #1
    2ce8:	fa00 f009 	lsl.w	r0, r0, r9
    2cec:	ea10 0f0b 	tst.w	r0, fp
    2cf0:	d101      	bne.n	2cf6 <usb_fix_descriptor+0x152>
				ep_cfg.ep_addr = idx;
    2cf2:	743b      	strb	r3, [r7, #16]
    2cf4:	e7d8      	b.n	2ca8 <usb_fix_descriptor+0x104>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    2cf6:	f109 0901 	add.w	r9, r9, #1
    2cfa:	f1b9 0f10 	cmp.w	r9, #16
    2cfe:	d1b7      	bne.n	2c70 <usb_fix_descriptor+0xcc>
    2d00:	e7ae      	b.n	2c60 <usb_fix_descriptor+0xbc>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    2d02:	2200      	movs	r2, #0
    2d04:	e7ad      	b.n	2c62 <usb_fix_descriptor+0xbe>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    2d06:	2e03      	cmp	r6, #3
    2d08:	d12a      	bne.n	2d60 <usb_fix_descriptor+0x1bc>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    2d0a:	f7ff ff07 	bl	2b1c <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    2d0e:	4681      	mov	r9, r0
    2d10:	b1a8      	cbz	r0, 2d3e <usb_fix_descriptor+0x19a>
	runtime_sn_len = strlen(runtime_sn);
    2d12:	f008 fbfa 	bl	b50a <strlen>
	if (!runtime_sn_len) {
    2d16:	60f8      	str	r0, [r7, #12]
    2d18:	b188      	cbz	r0, 2d3e <usb_fix_descriptor+0x19a>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    2d1a:	482c      	ldr	r0, [pc, #176]	; (2dcc <usb_fix_descriptor+0x228>)
    2d1c:	f008 fbf5 	bl	b50a <strlen>
	if (runtime_sn_len != default_sn_len) {
    2d20:	68fa      	ldr	r2, [r7, #12]
    2d22:	4282      	cmp	r2, r0
    2d24:	d017      	beq.n	2d56 <usb_fix_descriptor+0x1b2>
		LOG_ERR("the new SN descriptor doesn't have the same "
    2d26:	4b2a      	ldr	r3, [pc, #168]	; (2dd0 <usb_fix_descriptor+0x22c>)
    2d28:	627b      	str	r3, [r7, #36]	; 0x24
    2d2a:	2302      	movs	r3, #2
    2d2c:	623b      	str	r3, [r7, #32]
    2d2e:	4822      	ldr	r0, [pc, #136]	; (2db8 <usb_fix_descriptor+0x214>)
    2d30:	2300      	movs	r3, #0
    2d32:	f107 0220 	add.w	r2, r7, #32
    2d36:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2d3a:	f008 fb3d 	bl	b3b8 <z_impl_z_log_msg2_static_create>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    2d3e:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    2d40:	f06f 0102 	mvn.w	r1, #2
    2d44:	18e2      	adds	r2, r4, r3
    2d46:	1b09      	subs	r1, r1, r4
    2d48:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    2d4c:	42d1      	cmn	r1, r2
    2d4e:	d512      	bpl.n	2d76 <usb_fix_descriptor+0x1d2>
			str_descr_idx += 1U;
    2d50:	3601      	adds	r6, #1
    2d52:	b2f6      	uxtb	r6, r6
			break;
    2d54:	e744      	b.n	2be0 <usb_fix_descriptor+0x3c>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    2d56:	4649      	mov	r1, r9
    2d58:	1ca0      	adds	r0, r4, #2
    2d5a:	f008 fbf2 	bl	b542 <memcpy>
    2d5e:	e7ee      	b.n	2d3e <usb_fix_descriptor+0x19a>
			if (str_descr_idx) {
    2d60:	2e00      	cmp	r6, #0
    2d62:	d1ec      	bne.n	2d3e <usb_fix_descriptor+0x19a>
				if (!cfg_descr) {
    2d64:	f1b8 0f00 	cmp.w	r8, #0
    2d68:	d10e      	bne.n	2d88 <usb_fix_descriptor+0x1e4>
					LOG_ERR("Incomplete device descriptor");
    2d6a:	4b1a      	ldr	r3, [pc, #104]	; (2dd4 <usb_fix_descriptor+0x230>)
    2d6c:	627b      	str	r3, [r7, #36]	; 0x24
    2d6e:	2302      	movs	r3, #2
    2d70:	623b      	str	r3, [r7, #32]
    2d72:	4643      	mov	r3, r8
    2d74:	e763      	b.n	2c3e <usb_fix_descriptor+0x9a>
		buf[i] = 0U;
    2d76:	f04f 0000 	mov.w	r0, #0
    2d7a:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    2d7e:	f813 0901 	ldrb.w	r0, [r3], #-1
    2d82:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    2d86:	e7e1      	b.n	2d4c <usb_fix_descriptor+0x1a8>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    2d88:	eba4 0308 	sub.w	r3, r4, r8
    2d8c:	f888 3002 	strb.w	r3, [r8, #2]
	dst[1] = val >> 8;
    2d90:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2d94:	f888 3003 	strb.w	r3, [r8, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    2d98:	f888 a004 	strb.w	sl, [r8, #4]
    2d9c:	e7d8      	b.n	2d50 <usb_fix_descriptor+0x1ac>
				if (cfg_data->interface_config) {
    2d9e:	68ab      	ldr	r3, [r5, #8]
    2da0:	2b00      	cmp	r3, #0
    2da2:	f43f af25 	beq.w	2bf0 <usb_fix_descriptor+0x4c>
					cfg_data->interface_config(head,
    2da6:	4651      	mov	r1, sl
    2da8:	4620      	mov	r0, r4
    2daa:	4798      	blx	r3
    2dac:	e720      	b.n	2bf0 <usb_fix_descriptor+0x4c>
    2dae:	bf00      	nop
    2db0:	20000236 	.word	0x20000236
    2db4:	0000cf53 	.word	0x0000cf53
    2db8:	0000c800 	.word	0x0000c800
    2dbc:	20000238 	.word	0x20000238
    2dc0:	2000025c 	.word	0x2000025c
    2dc4:	0000ce8d 	.word	0x0000ce8d
    2dc8:	0000cece 	.word	0x0000cece
    2dcc:	0000ce7c 	.word	0x0000ce7c
    2dd0:	0000ceeb 	.word	0x0000ceeb
    2dd4:	0000cf36 	.word	0x0000cf36

00002dd8 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    2dd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    2dda:	480a      	ldr	r0, [pc, #40]	; (2e04 <usb_get_device_descriptor+0x2c>)
    2ddc:	f7ff fee2 	bl	2ba4 <usb_fix_descriptor>
    2de0:	b170      	cbz	r0, 2e00 <usb_get_device_descriptor+0x28>
		LOG_ERR("Failed to fixup USB descriptor");
    2de2:	4b09      	ldr	r3, [pc, #36]	; (2e08 <usb_get_device_descriptor+0x30>)
    2de4:	9305      	str	r3, [sp, #20]
    2de6:	2302      	movs	r3, #2
    2de8:	9304      	str	r3, [sp, #16]
    2dea:	4808      	ldr	r0, [pc, #32]	; (2e0c <usb_get_device_descriptor+0x34>)
    2dec:	2300      	movs	r3, #0
    2dee:	aa04      	add	r2, sp, #16
    2df0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2df4:	f008 fae0 	bl	b3b8 <z_impl_z_log_msg2_static_create>
		return NULL;
    2df8:	2000      	movs	r0, #0
	}

	return (uint8_t *) __usb_descriptor_start;
}
    2dfa:	b007      	add	sp, #28
    2dfc:	f85d fb04 	ldr.w	pc, [sp], #4
	return (uint8_t *) __usb_descriptor_start;
    2e00:	4800      	ldr	r0, [pc, #0]	; (2e04 <usb_get_device_descriptor+0x2c>)
    2e02:	e7fa      	b.n	2dfa <usb_get_device_descriptor+0x22>
    2e04:	200001b4 	.word	0x200001b4
    2e08:	0000cf73 	.word	0x0000cf73
    2e0c:	0000c800 	.word	0x0000c800

00002e10 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    2e10:	b510      	push	{r4, lr}
    2e12:	4b09      	ldr	r3, [pc, #36]	; (2e38 <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2e14:	2100      	movs	r1, #0
    2e16:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    2e18:	781c      	ldrb	r4, [r3, #0]
    2e1a:	4284      	cmp	r4, r0
    2e1c:	d104      	bne.n	2e28 <usb_ep_get_transfer+0x18>
    2e1e:	685c      	ldr	r4, [r3, #4]
    2e20:	b114      	cbz	r4, 2e28 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
    2e22:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
    2e26:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2e28:	3101      	adds	r1, #1
    2e2a:	2904      	cmp	r1, #4
    2e2c:	f103 0340 	add.w	r3, r3, #64	; 0x40
    2e30:	d1f2      	bne.n	2e18 <usb_ep_get_transfer+0x8>
	return NULL;
    2e32:	2000      	movs	r0, #0
    2e34:	e7f7      	b.n	2e26 <usb_ep_get_transfer+0x16>
    2e36:	bf00      	nop
    2e38:	20000b70 	.word	0x20000b70

00002e3c <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    2e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2e40:	b083      	sub	sp, #12
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    2e42:	f850 3c28 	ldr.w	r3, [r0, #-40]
	ep = trans->ep;
    2e46:	f810 5c2c 	ldrb.w	r5, [r0, #-44]
	if (trans->status != -EBUSY) {
    2e4a:	3310      	adds	r3, #16
{
    2e4c:	af00      	add	r7, sp, #0
    2e4e:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    2e50:	d111      	bne.n	2e76 <usb_transfer_work+0x3a>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    2e52:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    2e54:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
    2e58:	f013 0602 	ands.w	r6, r3, #2
    2e5c:	d04e      	beq.n	2efc <usb_transfer_work+0xc0>
		if (!trans->bsize) {
    2e5e:	bb0a      	cbnz	r2, 2ea4 <usb_transfer_work+0x68>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    2e60:	f013 0304 	ands.w	r3, r3, #4
    2e64:	d104      	bne.n	2e70 <usb_transfer_work+0x34>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    2e66:	461a      	mov	r2, r3
    2e68:	4619      	mov	r1, r3
    2e6a:	4628      	mov	r0, r5
    2e6c:	f008 fae9 	bl	b442 <usb_write>
			}
			trans->status = 0;
    2e70:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    2e72:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    2e76:	f854 3c28 	ldr.w	r3, [r4, #-40]
    2e7a:	3310      	adds	r3, #16
    2e7c:	d00e      	beq.n	2e9c <usb_transfer_work+0x60>
    2e7e:	f854 6c18 	ldr.w	r6, [r4, #-24]
    2e82:	b15e      	cbz	r6, 2e9c <usb_transfer_work+0x60>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    2e84:	f854 8c1c 	ldr.w	r8, [r4, #-28]
		void *priv = trans->priv;
    2e88:	f854 9c14 	ldr.w	r9, [r4, #-20]

		if (k_is_in_isr()) {
    2e8c:	f009 f81a 	bl	bec4 <k_is_in_isr>
    2e90:	2800      	cmp	r0, #0
    2e92:	d06f      	beq.n	2f74 <usb_transfer_work+0x138>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2e94:	483f      	ldr	r0, [pc, #252]	; (2f94 <usb_transfer_work+0x158>)
    2e96:	4621      	mov	r1, r4
    2e98:	f009 f8f4 	bl	c084 <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
    2e9c:	370c      	adds	r7, #12
    2e9e:	46bd      	mov	sp, r7
    2ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    2ea4:	f850 1c24 	ldr.w	r1, [r0, #-36]
    2ea8:	1d3b      	adds	r3, r7, #4
    2eaa:	4628      	mov	r0, r5
    2eac:	f008 fac9 	bl	b442 <usb_write>
		if (ret) {
    2eb0:	b198      	cbz	r0, 2eda <usb_transfer_work+0x9e>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    2eb2:	4b39      	ldr	r3, [pc, #228]	; (2f98 <usb_transfer_work+0x15c>)
    2eb4:	466e      	mov	r6, sp
    2eb6:	b088      	sub	sp, #32
    2eb8:	466a      	mov	r2, sp
    2eba:	e9c2 3005 	strd	r3, r0, [r2, #20]
    2ebe:	2304      	movs	r3, #4
    2ec0:	61d5      	str	r5, [r2, #28]
    2ec2:	f842 3f10 	str.w	r3, [r2, #16]!
    2ec6:	4835      	ldr	r0, [pc, #212]	; (2f9c <usb_transfer_work+0x160>)
    2ec8:	2300      	movs	r3, #0
    2eca:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    2ece:	f008 fa73 	bl	b3b8 <z_impl_z_log_msg2_static_create>
    2ed2:	46b5      	mov	sp, r6
			trans->status = -EINVAL;
    2ed4:	f06f 0315 	mvn.w	r3, #21
    2ed8:	e7cb      	b.n	2e72 <usb_transfer_work+0x36>
		trans->buffer += bytes;
    2eda:	687a      	ldr	r2, [r7, #4]
    2edc:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2ee0:	4413      	add	r3, r2
    2ee2:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    2ee6:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2eea:	1a9b      	subs	r3, r3, r2
    2eec:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2ef0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2ef4:	4413      	add	r3, r2
    2ef6:	f844 3c1c 	str.w	r3, [r4, #-28]
    2efa:	e7bc      	b.n	2e76 <usb_transfer_work+0x3a>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    2efc:	f850 1c24 	ldr.w	r1, [r0, #-36]
    2f00:	1d3b      	adds	r3, r7, #4
    2f02:	4628      	mov	r0, r5
    2f04:	f002 f816 	bl	4f34 <usb_dc_ep_read_wait>
		if (ret) {
    2f08:	b188      	cbz	r0, 2f2e <usb_transfer_work+0xf2>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    2f0a:	4b23      	ldr	r3, [pc, #140]	; (2f98 <usb_transfer_work+0x15c>)
    2f0c:	46e8      	mov	r8, sp
    2f0e:	b088      	sub	sp, #32
    2f10:	466a      	mov	r2, sp
    2f12:	e9c2 3005 	strd	r3, r0, [r2, #20]
    2f16:	2304      	movs	r3, #4
    2f18:	61d5      	str	r5, [r2, #28]
    2f1a:	f842 3f10 	str.w	r3, [r2, #16]!
    2f1e:	481f      	ldr	r0, [pc, #124]	; (2f9c <usb_transfer_work+0x160>)
    2f20:	4633      	mov	r3, r6
    2f22:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    2f26:	f008 fa47 	bl	b3b8 <z_impl_z_log_msg2_static_create>
    2f2a:	46c5      	mov	sp, r8
			trans->status = -EINVAL;
    2f2c:	e7d2      	b.n	2ed4 <usb_transfer_work+0x98>
		trans->buffer += bytes;
    2f2e:	687e      	ldr	r6, [r7, #4]
    2f30:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2f34:	4433      	add	r3, r6
    2f36:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    2f3a:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2f3e:	1b9b      	subs	r3, r3, r6
    2f40:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2f44:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2f48:	4433      	add	r3, r6
    2f4a:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    2f4e:	2e00      	cmp	r6, #0
    2f50:	d08e      	beq.n	2e70 <usb_transfer_work+0x34>
    2f52:	4628      	mov	r0, r5
    2f54:	f002 f8c6 	bl	50e4 <usb_dc_ep_mps>
    2f58:	fbb6 f3f0 	udiv	r3, r6, r0
    2f5c:	fb03 6610 	mls	r6, r3, r0, r6
    2f60:	2e00      	cmp	r6, #0
    2f62:	d185      	bne.n	2e70 <usb_transfer_work+0x34>
    2f64:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2f68:	2b00      	cmp	r3, #0
    2f6a:	d081      	beq.n	2e70 <usb_transfer_work+0x34>
		usb_dc_ep_read_continue(ep);
    2f6c:	4628      	mov	r0, r5
    2f6e:	f002 f847 	bl	5000 <usb_dc_ep_read_continue>
    2f72:	e780      	b.n	2e76 <usb_transfer_work+0x3a>
		trans->cb = NULL;
    2f74:	f844 0c18 	str.w	r0, [r4, #-24]
	z_impl_k_sem_give(sem);
    2f78:	f1a4 0010 	sub.w	r0, r4, #16
    2f7c:	f006 fc98 	bl	98b0 <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
    2f80:	f854 3c28 	ldr.w	r3, [r4, #-40]
    2f84:	338c      	adds	r3, #140	; 0x8c
    2f86:	d089      	beq.n	2e9c <usb_transfer_work+0x60>
			cb(ep, tsize, priv);
    2f88:	464a      	mov	r2, r9
    2f8a:	4641      	mov	r1, r8
    2f8c:	4628      	mov	r0, r5
    2f8e:	47b0      	blx	r6
    2f90:	e784      	b.n	2e9c <usb_transfer_work+0x60>
    2f92:	bf00      	nop
    2f94:	20000948 	.word	0x20000948
    2f98:	0000cfa1 	.word	0x0000cfa1
    2f9c:	0000c820 	.word	0x0000c820

00002fa0 <usb_cancel_transfer>:
	irq_unlock(key);
	return ret;
}

void usb_cancel_transfer(uint8_t ep)
{
    2fa0:	b510      	push	{r4, lr}
	__asm__ volatile(
    2fa2:	f04f 0320 	mov.w	r3, #32
    2fa6:	f3ef 8411 	mrs	r4, BASEPRI
    2faa:	f383 8812 	msr	BASEPRI_MAX, r3
    2fae:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    2fb2:	f7ff ff2d 	bl	2e10 <usb_ep_get_transfer>
	if (!trans) {
    2fb6:	b150      	cbz	r0, 2fce <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    2fb8:	6843      	ldr	r3, [r0, #4]
    2fba:	3310      	adds	r3, #16
    2fbc:	d107      	bne.n	2fce <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    2fbe:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    2fc2:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2fc4:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    2fc8:	4803      	ldr	r0, [pc, #12]	; (2fd8 <usb_cancel_transfer+0x38>)
    2fca:	f009 f85b 	bl	c084 <k_work_submit_to_queue>
	__asm__ volatile(
    2fce:	f384 8811 	msr	BASEPRI, r4
    2fd2:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    2fd6:	bd10      	pop	{r4, pc}
    2fd8:	20000948 	.word	0x20000948

00002fdc <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    2fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2fe0:	4c10      	ldr	r4, [pc, #64]	; (3024 <usb_cancel_transfers+0x48>)

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2fe2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 3028 <usb_cancel_transfers+0x4c>
{
    2fe6:	2504      	movs	r5, #4
			trans->status = -ECANCELED;
    2fe8:	f06f 078b 	mvn.w	r7, #139	; 0x8b
	__asm__ volatile(
    2fec:	f04f 0320 	mov.w	r3, #32
    2ff0:	f3ef 8611 	mrs	r6, BASEPRI
    2ff4:	f383 8812 	msr	BASEPRI_MAX, r3
    2ff8:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    2ffc:	6863      	ldr	r3, [r4, #4]
    2ffe:	3310      	adds	r3, #16
    3000:	d105      	bne.n	300e <usb_cancel_transfers+0x32>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3002:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    3006:	4640      	mov	r0, r8
			trans->status = -ECANCELED;
    3008:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    300a:	f009 f83b 	bl	c084 <k_work_submit_to_queue>
	__asm__ volatile(
    300e:	f386 8811 	msr	BASEPRI, r6
    3012:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3016:	3d01      	subs	r5, #1
    3018:	f104 0440 	add.w	r4, r4, #64	; 0x40
    301c:	d1e6      	bne.n	2fec <usb_cancel_transfers+0x10>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    301e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3022:	bf00      	nop
    3024:	20000b70 	.word	0x20000b70
    3028:	20000948 	.word	0x20000948

0000302c <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    302c:	b570      	push	{r4, r5, r6, lr}
    302e:	4c0a      	ldr	r4, [pc, #40]	; (3058 <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    3030:	4e0a      	ldr	r6, [pc, #40]	; (305c <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3032:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    3034:	4631      	mov	r1, r6
    3036:	4620      	mov	r0, r4
    3038:	f009 f81b 	bl	c072 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    303c:	2201      	movs	r2, #1
    303e:	f1a4 0010 	sub.w	r0, r4, #16
    3042:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3044:	3501      	adds	r5, #1
    3046:	f008 ffd7 	bl	bff8 <z_impl_k_sem_init>
    304a:	2d04      	cmp	r5, #4
    304c:	f104 0440 	add.w	r4, r4, #64	; 0x40
    3050:	d1f0      	bne.n	3034 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    3052:	2000      	movs	r0, #0
    3054:	bd70      	pop	{r4, r5, r6, pc}
    3056:	bf00      	nop
    3058:	20000b9c 	.word	0x20000b9c
    305c:	00002e3d 	.word	0x00002e3d

00003060 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    3060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3064:	4605      	mov	r5, r0
	__asm__ volatile(
    3066:	f04f 0320 	mov.w	r3, #32
    306a:	f3ef 8611 	mrs	r6, BASEPRI
    306e:	f383 8812 	msr	BASEPRI_MAX, r3
    3072:	f3bf 8f6f 	isb	sy
	return list->head;
    3076:	4b0e      	ldr	r3, [pc, #56]	; (30b0 <pm_state_notify+0x50>)
    3078:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    307a:	b19c      	cbz	r4, 30a4 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    307c:	4f0d      	ldr	r7, [pc, #52]	; (30b4 <pm_state_notify+0x54>)
    307e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 30b8 <pm_state_notify+0x58>
    3082:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    3086:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    308a:	2d00      	cmp	r5, #0
    308c:	bf08      	it	eq
    308e:	4613      	moveq	r3, r2
		if (callback) {
    3090:	b12b      	cbz	r3, 309e <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3092:	f898 2014 	ldrb.w	r2, [r8, #20]
    3096:	fb09 f202 	mul.w	r2, r9, r2
    309a:	5cb8      	ldrb	r0, [r7, r2]
    309c:	4798      	blx	r3
	return node->next;
    309e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    30a0:	2c00      	cmp	r4, #0
    30a2:	d1f0      	bne.n	3086 <pm_state_notify+0x26>
	__asm__ volatile(
    30a4:	f386 8811 	msr	BASEPRI, r6
    30a8:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    30ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    30b0:	20000c70 	.word	0x20000c70
    30b4:	20000c78 	.word	0x20000c78
    30b8:	20001970 	.word	0x20001970

000030bc <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    30bc:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    30be:	2301      	movs	r3, #1
    30c0:	f000 001f 	and.w	r0, r0, #31
    30c4:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    30c8:	4b07      	ldr	r3, [pc, #28]	; (30e8 <atomic_clear_bit.constprop.0+0x2c>)
    30ca:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    30ce:	43c0      	mvns	r0, r0
    30d0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    30d4:	e853 2f00 	ldrex	r2, [r3]
    30d8:	4002      	ands	r2, r0
    30da:	e843 2100 	strex	r1, r2, [r3]
    30de:	2900      	cmp	r1, #0
    30e0:	d1f8      	bne.n	30d4 <atomic_clear_bit.constprop.0+0x18>
    30e2:	f3bf 8f5b 	dmb	ish
}
    30e6:	4770      	bx	lr
    30e8:	20000c84 	.word	0x20000c84

000030ec <pm_system_resume>:

void pm_system_resume(void)
{
    30ec:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    30ee:	4b1a      	ldr	r3, [pc, #104]	; (3158 <pm_system_resume+0x6c>)
    30f0:	7d1c      	ldrb	r4, [r3, #20]
    30f2:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    30f6:	f004 031f 	and.w	r3, r4, #31
    30fa:	2201      	movs	r2, #1
    30fc:	409a      	lsls	r2, r3
    30fe:	4b17      	ldr	r3, [pc, #92]	; (315c <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3100:	0961      	lsrs	r1, r4, #5
    3102:	43d0      	mvns	r0, r2
    3104:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3108:	e853 1f00 	ldrex	r1, [r3]
    310c:	ea01 0500 	and.w	r5, r1, r0
    3110:	e843 5c00 	strex	ip, r5, [r3]
    3114:	f1bc 0f00 	cmp.w	ip, #0
    3118:	d1f6      	bne.n	3108 <pm_system_resume+0x1c>
    311a:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    311e:	4211      	tst	r1, r2
    3120:	d013      	beq.n	314a <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    3122:	4b0f      	ldr	r3, [pc, #60]	; (3160 <pm_system_resume+0x74>)
    3124:	4d0f      	ldr	r5, [pc, #60]	; (3164 <pm_system_resume+0x78>)
    3126:	b18b      	cbz	r3, 314c <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    3128:	230c      	movs	r3, #12
    312a:	4363      	muls	r3, r4
    312c:	18ea      	adds	r2, r5, r3
    312e:	5ce8      	ldrb	r0, [r5, r3]
    3130:	7851      	ldrb	r1, [r2, #1]
    3132:	f008 fa37 	bl	b5a4 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    3136:	2000      	movs	r0, #0
    3138:	f7ff ff92 	bl	3060 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    313c:	230c      	movs	r3, #12
    313e:	435c      	muls	r4, r3
    3140:	192a      	adds	r2, r5, r4
    3142:	2300      	movs	r3, #0
    3144:	512b      	str	r3, [r5, r4]
    3146:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    314a:	bd38      	pop	{r3, r4, r5, pc}
    314c:	f383 8811 	msr	BASEPRI, r3
    3150:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3154:	e7ef      	b.n	3136 <pm_system_resume+0x4a>
    3156:	bf00      	nop
    3158:	20001970 	.word	0x20001970
    315c:	20000c88 	.word	0x20000c88
    3160:	0000b5a5 	.word	0x0000b5a5
    3164:	20000c78 	.word	0x20000c78

00003168 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    3168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    316c:	4b32      	ldr	r3, [pc, #200]	; (3238 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    316e:	4a33      	ldr	r2, [pc, #204]	; (323c <pm_system_suspend+0xd4>)
    3170:	7d1c      	ldrb	r4, [r3, #20]
    3172:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    3176:	0963      	lsrs	r3, r4, #5
    3178:	ea4f 0983 	mov.w	r9, r3, lsl #2
    317c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3180:	4e2f      	ldr	r6, [pc, #188]	; (3240 <pm_system_suspend+0xd8>)
    3182:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    3186:	f004 081f 	and.w	r8, r4, #31
    318a:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    318e:	f013 0f01 	tst.w	r3, #1
{
    3192:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    3194:	d10a      	bne.n	31ac <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    3196:	4601      	mov	r1, r0
    3198:	4620      	mov	r0, r4
    319a:	f000 f869 	bl	3270 <pm_policy_next_state>
		if (info != NULL) {
    319e:	b128      	cbz	r0, 31ac <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    31a0:	c807      	ldmia	r0, {r0, r1, r2}
    31a2:	230c      	movs	r3, #12
    31a4:	fb03 6304 	mla	r3, r3, r4, r6
    31a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    31ac:	230c      	movs	r3, #12
    31ae:	4363      	muls	r3, r4
    31b0:	18f2      	adds	r2, r6, r3
    31b2:	5cf5      	ldrb	r5, [r6, r3]
    31b4:	b92d      	cbnz	r5, 31c2 <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    31b6:	4620      	mov	r0, r4
    31b8:	f7ff ff80 	bl	30bc <atomic_clear_bit.constprop.0>
		ret = false;
    31bc:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    31be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    31c2:	1c7b      	adds	r3, r7, #1
    31c4:	d00f      	beq.n	31e6 <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    31c6:	f8d2 c008 	ldr.w	ip, [r2, #8]
    31ca:	481e      	ldr	r0, [pc, #120]	; (3244 <pm_system_suspend+0xdc>)
    31cc:	4a1e      	ldr	r2, [pc, #120]	; (3248 <pm_system_suspend+0xe0>)
    31ce:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    31d2:	2100      	movs	r1, #0
    31d4:	2300      	movs	r3, #0
    31d6:	fbec 0105 	umlal	r0, r1, ip, r5
    31da:	f7fc ff81 	bl	e0 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    31de:	2101      	movs	r1, #1
    31e0:	1a38      	subs	r0, r7, r0
    31e2:	f009 f8ab 	bl	c33c <z_set_timeout_expiry>
	k_sched_lock();
    31e6:	f006 fd71 	bl	9ccc <k_sched_lock>
	pm_state_notify(true);
    31ea:	2001      	movs	r0, #1
    31ec:	f7ff ff38 	bl	3060 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    31f0:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    31f4:	2301      	movs	r3, #1
    31f6:	fa03 f808 	lsl.w	r8, r3, r8
    31fa:	4b14      	ldr	r3, [pc, #80]	; (324c <pm_system_suspend+0xe4>)
    31fc:	4499      	add	r9, r3
    31fe:	e859 3f00 	ldrex	r3, [r9]
    3202:	ea43 0308 	orr.w	r3, r3, r8
    3206:	e849 3200 	strex	r2, r3, [r9]
    320a:	2a00      	cmp	r2, #0
    320c:	d1f7      	bne.n	31fe <pm_system_suspend+0x96>
    320e:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    3212:	4b0f      	ldr	r3, [pc, #60]	; (3250 <pm_system_suspend+0xe8>)
    3214:	b133      	cbz	r3, 3224 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    3216:	230c      	movs	r3, #12
    3218:	4363      	muls	r3, r4
    321a:	18f2      	adds	r2, r6, r3
    321c:	5cf0      	ldrb	r0, [r6, r3]
    321e:	7851      	ldrb	r1, [r2, #1]
    3220:	f008 f9b4 	bl	b58c <pm_state_set>
	pm_system_resume();
    3224:	f7ff ff62 	bl	30ec <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    3228:	4620      	mov	r0, r4
    322a:	f7ff ff47 	bl	30bc <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    322e:	f006 ff1d 	bl	a06c <k_sched_unlock>
	bool ret = true;
    3232:	2001      	movs	r0, #1
    3234:	e7c3      	b.n	31be <pm_system_suspend+0x56>
    3236:	bf00      	nop
    3238:	20001970 	.word	0x20001970
    323c:	20000c84 	.word	0x20000c84
    3240:	20000c78 	.word	0x20000c78
    3244:	000f423f 	.word	0x000f423f
    3248:	000f4240 	.word	0x000f4240
    324c:	20000c88 	.word	0x20000c88
    3250:	0000b58d 	.word	0x0000b58d

00003254 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3254:	4b05      	ldr	r3, [pc, #20]	; (326c <pm_policy_state_lock_is_active+0x18>)
    3256:	f3bf 8f5b 	dmb	ish
    325a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    325e:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    3262:	3800      	subs	r0, #0
    3264:	bf18      	it	ne
    3266:	2001      	movne	r0, #1
    3268:	4770      	bx	lr
    326a:	bf00      	nop
    326c:	20000c8c 	.word	0x20000c8c

00003270 <pm_policy_next_state>:
{
    3270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3274:	b085      	sub	sp, #20
    3276:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    3278:	a903      	add	r1, sp, #12
    327a:	f000 f847 	bl	330c <pm_state_cpu_get_all>
    327e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 3300 <pm_policy_next_state+0x90>
    3282:	f8df a080 	ldr.w	sl, [pc, #128]	; 3304 <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3286:	1e44      	subs	r4, r0, #1
    3288:	b224      	sxth	r4, r4
    328a:	f04f 0b00 	mov.w	fp, #0
    328e:	1c63      	adds	r3, r4, #1
    3290:	d104      	bne.n	329c <pm_policy_next_state+0x2c>
	return NULL;
    3292:	2600      	movs	r6, #0
}
    3294:	4630      	mov	r0, r6
    3296:	b005      	add	sp, #20
    3298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    329c:	9a03      	ldr	r2, [sp, #12]
    329e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    32a2:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    32a6:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    32aa:	f7ff ffd3 	bl	3254 <pm_policy_state_lock_is_active>
    32ae:	4605      	mov	r5, r0
    32b0:	bb10      	cbnz	r0, 32f8 <pm_policy_next_state+0x88>
    32b2:	6870      	ldr	r0, [r6, #4]
    32b4:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    32b8:	46c4      	mov	ip, r8
    32ba:	4629      	mov	r1, r5
    32bc:	fbe0 c109 	umlal	ip, r1, r0, r9
    32c0:	4652      	mov	r2, sl
    32c2:	465b      	mov	r3, fp
    32c4:	4660      	mov	r0, ip
    32c6:	f7fc ff0b 	bl	e0 <__aeabi_uldivmod>
    32ca:	9001      	str	r0, [sp, #4]
    32cc:	68b0      	ldr	r0, [r6, #8]
    32ce:	46c4      	mov	ip, r8
    32d0:	4629      	mov	r1, r5
    32d2:	fbe0 c109 	umlal	ip, r1, r0, r9
    32d6:	465b      	mov	r3, fp
    32d8:	4652      	mov	r2, sl
    32da:	4660      	mov	r0, ip
    32dc:	f7fc ff00 	bl	e0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    32e0:	4b09      	ldr	r3, [pc, #36]	; (3308 <pm_policy_next_state+0x98>)
    32e2:	681b      	ldr	r3, [r3, #0]
    32e4:	1c59      	adds	r1, r3, #1
    32e6:	d001      	beq.n	32ec <pm_policy_next_state+0x7c>
    32e8:	4283      	cmp	r3, r0
    32ea:	d905      	bls.n	32f8 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    32ec:	1c7a      	adds	r2, r7, #1
    32ee:	d0d1      	beq.n	3294 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    32f0:	9b01      	ldr	r3, [sp, #4]
    32f2:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    32f4:	42b8      	cmp	r0, r7
    32f6:	d9cd      	bls.n	3294 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    32f8:	3c01      	subs	r4, #1
    32fa:	b224      	sxth	r4, r4
    32fc:	e7c7      	b.n	328e <pm_policy_next_state+0x1e>
    32fe:	bf00      	nop
    3300:	000f423f 	.word	0x000f423f
    3304:	000f4240 	.word	0x000f4240
    3308:	20000008 	.word	0x20000008

0000330c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    330c:	b908      	cbnz	r0, 3312 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    330e:	4b02      	ldr	r3, [pc, #8]	; (3318 <pm_state_cpu_get_all+0xc>)
    3310:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    3312:	2000      	movs	r0, #0
    3314:	4770      	bx	lr
    3316:	bf00      	nop
    3318:	0000c928 	.word	0x0000c928

0000331c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    331c:	4901      	ldr	r1, [pc, #4]	; (3324 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    331e:	2210      	movs	r2, #16
	str	r2, [r1]
    3320:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3322:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3324:	e000ed10 	.word	0xe000ed10

00003328 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3328:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    332a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    332c:	f380 8811 	msr	BASEPRI, r0
	isb
    3330:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3334:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3338:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    333a:	b662      	cpsie	i
	isb
    333c:	f3bf 8f6f 	isb	sy

	bx	lr
    3340:	4770      	bx	lr
    3342:	bf00      	nop

00003344 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3344:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3346:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3348:	f381 8811 	msr	BASEPRI, r1

	wfe
    334c:	bf20      	wfe

	msr	BASEPRI, r0
    334e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3352:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3354:	4770      	bx	lr
    3356:	bf00      	nop

00003358 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    335c:	4681      	mov	r9, r0
    335e:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    3360:	460c      	mov	r4, r1
    3362:	2900      	cmp	r1, #0
    3364:	d04c      	beq.n	3400 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3366:	466e      	mov	r6, sp
    3368:	b08a      	sub	sp, #40	; 0x28
    336a:	466d      	mov	r5, sp
    336c:	e9d1 1200 	ldrd	r1, r2, [r1]
    3370:	68a3      	ldr	r3, [r4, #8]
    3372:	4827      	ldr	r0, [pc, #156]	; (3410 <z_arm_fatal_error+0xb8>)
    3374:	46a8      	mov	r8, r5
    3376:	f04f 0a05 	mov.w	sl, #5
    337a:	e9c5 0105 	strd	r0, r1, [r5, #20]
    337e:	e9c5 2307 	strd	r2, r3, [r5, #28]
    3382:	f848 af10 	str.w	sl, [r8, #16]!
    3386:	4823      	ldr	r0, [pc, #140]	; (3414 <z_arm_fatal_error+0xbc>)
    3388:	4642      	mov	r2, r8
    338a:	2300      	movs	r3, #0
    338c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    3390:	f008 f812 	bl	b3b8 <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3394:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    3398:	6963      	ldr	r3, [r4, #20]
    339a:	481f      	ldr	r0, [pc, #124]	; (3418 <z_arm_fatal_error+0xc0>)
    339c:	f8c5 a010 	str.w	sl, [r5, #16]
    33a0:	46b5      	mov	sp, r6
    33a2:	e9c5 0105 	strd	r0, r1, [r5, #20]
    33a6:	46ad      	mov	sp, r5
    33a8:	e9c5 2307 	strd	r2, r3, [r5, #28]
    33ac:	4819      	ldr	r0, [pc, #100]	; (3414 <z_arm_fatal_error+0xbc>)
    33ae:	4642      	mov	r2, r8
    33b0:	2300      	movs	r3, #0
    33b2:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    33b6:	f007 ffff 	bl	b3b8 <z_impl_z_log_msg2_static_create>
    33ba:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    33bc:	b088      	sub	sp, #32
    33be:	466d      	mov	r5, sp
    33c0:	69e3      	ldr	r3, [r4, #28]
    33c2:	4a16      	ldr	r2, [pc, #88]	; (341c <z_arm_fatal_error+0xc4>)
    33c4:	46a8      	mov	r8, r5
    33c6:	f04f 0a03 	mov.w	sl, #3
    33ca:	e9c5 2305 	strd	r2, r3, [r5, #20]
    33ce:	f848 af10 	str.w	sl, [r8, #16]!
    33d2:	4810      	ldr	r0, [pc, #64]	; (3414 <z_arm_fatal_error+0xbc>)
    33d4:	4642      	mov	r2, r8
    33d6:	2300      	movs	r3, #0
    33d8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    33dc:	f007 ffec 	bl	b3b8 <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    33e0:	4a0f      	ldr	r2, [pc, #60]	; (3420 <z_arm_fatal_error+0xc8>)
    33e2:	69a3      	ldr	r3, [r4, #24]
    33e4:	f8c5 a010 	str.w	sl, [r5, #16]
    33e8:	46b5      	mov	sp, r6
    33ea:	e9c5 2305 	strd	r2, r3, [r5, #20]
    33ee:	46ad      	mov	sp, r5
    33f0:	4808      	ldr	r0, [pc, #32]	; (3414 <z_arm_fatal_error+0xbc>)
    33f2:	2300      	movs	r3, #0
    33f4:	4642      	mov	r2, r8
    33f6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    33fa:	f007 ffdd 	bl	b3b8 <z_impl_z_log_msg2_static_create>
    33fe:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3400:	4621      	mov	r1, r4
    3402:	4648      	mov	r0, r9
    3404:	f005 fefa 	bl	91fc <z_fatal_error>
}
    3408:	46bd      	mov	sp, r7
    340a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    340e:	bf00      	nop
    3410:	0000cfce 	.word	0x0000cfce
    3414:	0000c7c0 	.word	0x0000c7c0
    3418:	0000cffd 	.word	0x0000cffd
    341c:	0000d02c 	.word	0x0000d02c
    3420:	0000d03b 	.word	0x0000d03b

00003424 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3424:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3426:	2b00      	cmp	r3, #0
    3428:	db08      	blt.n	343c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    342a:	2201      	movs	r2, #1
    342c:	f000 001f 	and.w	r0, r0, #31
    3430:	fa02 f000 	lsl.w	r0, r2, r0
    3434:	095b      	lsrs	r3, r3, #5
    3436:	4a02      	ldr	r2, [pc, #8]	; (3440 <arch_irq_enable+0x1c>)
    3438:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    343c:	4770      	bx	lr
    343e:	bf00      	nop
    3440:	e000e100 	.word	0xe000e100

00003444 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    3444:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3446:	2b00      	cmp	r3, #0
    3448:	db0d      	blt.n	3466 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    344a:	2201      	movs	r2, #1
    344c:	095b      	lsrs	r3, r3, #5
    344e:	f000 001f 	and.w	r0, r0, #31
    3452:	fa02 f000 	lsl.w	r0, r2, r0
    3456:	3320      	adds	r3, #32
    3458:	4a03      	ldr	r2, [pc, #12]	; (3468 <arch_irq_disable+0x24>)
    345a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    345e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3462:	f3bf 8f6f 	isb	sy
}
    3466:	4770      	bx	lr
    3468:	e000e100 	.word	0xe000e100

0000346c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    346c:	4b05      	ldr	r3, [pc, #20]	; (3484 <arch_irq_is_enabled+0x18>)
    346e:	0942      	lsrs	r2, r0, #5
    3470:	f000 001f 	and.w	r0, r0, #31
    3474:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3478:	2301      	movs	r3, #1
    347a:	fa03 f000 	lsl.w	r0, r3, r0
}
    347e:	4010      	ands	r0, r2
    3480:	4770      	bx	lr
    3482:	bf00      	nop
    3484:	e000e100 	.word	0xe000e100

00003488 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3488:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    348a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    348c:	bfa8      	it	ge
    348e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    3492:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3496:	bfb8      	it	lt
    3498:	4b06      	ldrlt	r3, [pc, #24]	; (34b4 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    349a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    349e:	bfac      	ite	ge
    34a0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    34a4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    34a8:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    34aa:	bfb4      	ite	lt
    34ac:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    34ae:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    34b2:	4770      	bx	lr
    34b4:	e000ed14 	.word	0xe000ed14

000034b8 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    34b8:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    34ba:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    34bc:	4b04      	ldr	r3, [pc, #16]	; (34d0 <_arch_isr_direct_pm+0x18>)
    34be:	699a      	ldr	r2, [r3, #24]
    34c0:	b11a      	cbz	r2, 34ca <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    34c2:	2200      	movs	r2, #0
    34c4:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    34c6:	f008 fd0a 	bl	bede <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    34ca:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    34cc:	bd08      	pop	{r3, pc}
    34ce:	bf00      	nop
    34d0:	20001970 	.word	0x20001970

000034d4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    34d4:	bf30      	wfi
    b z_SysNmiOnReset
    34d6:	f7ff bffd 	b.w	34d4 <z_SysNmiOnReset>
    34da:	bf00      	nop

000034dc <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    34dc:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    34de:	4b08      	ldr	r3, [pc, #32]	; (3500 <z_arm_prep_c+0x24>)
    34e0:	4a08      	ldr	r2, [pc, #32]	; (3504 <z_arm_prep_c+0x28>)
    34e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    34e6:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    34e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    34ec:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    34f0:	f005 ff1c 	bl	932c <z_bss_zero>
	z_data_copy();
    34f4:	f006 feee 	bl	a2d4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    34f8:	f000 fb94 	bl	3c24 <z_arm_interrupt_init>
	z_cstart();
    34fc:	f005 ff5a 	bl	93b4 <z_cstart>
    3500:	00000000 	.word	0x00000000
    3504:	e000ed00 	.word	0xe000ed00

00003508 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3508:	4a09      	ldr	r2, [pc, #36]	; (3530 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    350a:	490a      	ldr	r1, [pc, #40]	; (3534 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    350c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    350e:	6809      	ldr	r1, [r1, #0]
    3510:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3512:	4909      	ldr	r1, [pc, #36]	; (3538 <arch_swap+0x30>)
	_current->arch.basepri = key;
    3514:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3516:	684b      	ldr	r3, [r1, #4]
    3518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    351c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    351e:	2300      	movs	r3, #0
    3520:	f383 8811 	msr	BASEPRI, r3
    3524:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3528:	6893      	ldr	r3, [r2, #8]
}
    352a:	6f98      	ldr	r0, [r3, #120]	; 0x78
    352c:	4770      	bx	lr
    352e:	bf00      	nop
    3530:	20001970 	.word	0x20001970
    3534:	0000cb48 	.word	0x0000cb48
    3538:	e000ed00 	.word	0xe000ed00

0000353c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    353c:	4912      	ldr	r1, [pc, #72]	; (3588 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    353e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3540:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3544:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3546:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    354a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    354e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3550:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3554:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3558:	4f0c      	ldr	r7, [pc, #48]	; (358c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    355a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    355e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    3560:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3562:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3564:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    3566:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3568:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    356a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    356e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3570:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    3572:	f000 fbf3 	bl	3d5c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    3576:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    357a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    357e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3582:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3586:	4770      	bx	lr
    ldr r1, =_kernel
    3588:	20001970 	.word	0x20001970
    ldr v4, =_SCS_ICSR
    358c:	e000ed04 	.word	0xe000ed04

00003590 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3590:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3594:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3596:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    359a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    359e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    35a0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    35a4:	2902      	cmp	r1, #2
    beq _oops
    35a6:	d0ff      	beq.n	35a8 <_oops>

000035a8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    35a8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    35aa:	f007 ff92 	bl	b4d2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    35ae:	bd01      	pop	{r0, pc}

000035b0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    35b0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    35b4:	9b00      	ldr	r3, [sp, #0]
    35b6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    35ba:	490a      	ldr	r1, [pc, #40]	; (35e4 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    35bc:	9b01      	ldr	r3, [sp, #4]
    35be:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    35c2:	9b02      	ldr	r3, [sp, #8]
    35c4:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    35c8:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    35cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    35d0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    35d4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    35d8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    35da:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    35dc:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    35de:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    35e0:	4770      	bx	lr
    35e2:	bf00      	nop
    35e4:	0000aa5f 	.word	0x0000aa5f

000035e8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    35e8:	4a09      	ldr	r2, [pc, #36]	; (3610 <z_check_thread_stack_fail+0x28>)
{
    35ea:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    35ec:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    35ee:	b170      	cbz	r0, 360e <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    35f0:	f113 0f16 	cmn.w	r3, #22
    35f4:	6e40      	ldr	r0, [r0, #100]	; 0x64
    35f6:	d005      	beq.n	3604 <z_check_thread_stack_fail+0x1c>
    35f8:	f1a0 0220 	sub.w	r2, r0, #32
    35fc:	429a      	cmp	r2, r3
    35fe:	d805      	bhi.n	360c <z_check_thread_stack_fail+0x24>
    3600:	4283      	cmp	r3, r0
    3602:	d203      	bcs.n	360c <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    3604:	4281      	cmp	r1, r0
    3606:	bf28      	it	cs
    3608:	2000      	movcs	r0, #0
    360a:	4770      	bx	lr
    360c:	2000      	movs	r0, #0
}
    360e:	4770      	bx	lr
    3610:	20001970 	.word	0x20001970

00003614 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3614:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3616:	4b09      	ldr	r3, [pc, #36]	; (363c <arch_switch_to_main_thread+0x28>)
    3618:	6098      	str	r0, [r3, #8]
{
    361a:	460d      	mov	r5, r1
    361c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    361e:	f000 fb9d 	bl	3d5c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3622:	4620      	mov	r0, r4
    3624:	f385 8809 	msr	PSP, r5
    3628:	2100      	movs	r1, #0
    362a:	b663      	cpsie	if
    362c:	f381 8811 	msr	BASEPRI, r1
    3630:	f3bf 8f6f 	isb	sy
    3634:	2200      	movs	r2, #0
    3636:	2300      	movs	r3, #0
    3638:	f007 fa11 	bl	aa5e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    363c:	20001970 	.word	0x20001970

00003640 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3640:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3642:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3644:	4a0b      	ldr	r2, [pc, #44]	; (3674 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3646:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    3648:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    364a:	bf1e      	ittt	ne
	movne	r1, #0
    364c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    364e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    3650:	f008 fc45 	blne	bede <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3654:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3656:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    365a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    365e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3662:	4905      	ldr	r1, [pc, #20]	; (3678 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3664:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3666:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3668:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    366a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    366e:	4903      	ldr	r1, [pc, #12]	; (367c <_isr_wrapper+0x3c>)
	bx r1
    3670:	4708      	bx	r1
    3672:	0000      	.short	0x0000
	ldr r2, =_kernel
    3674:	20001970 	.word	0x20001970
	ldr r1, =_sw_isr_table
    3678:	0000c648 	.word	0x0000c648
	ldr r1, =z_arm_int_exit
    367c:	00003681 	.word	0x00003681

00003680 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3680:	4b04      	ldr	r3, [pc, #16]	; (3694 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3682:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3684:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    3686:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3688:	d003      	beq.n	3692 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    368a:	4903      	ldr	r1, [pc, #12]	; (3698 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    368c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3690:	600a      	str	r2, [r1, #0]

00003692 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3692:	4770      	bx	lr
	ldr r3, =_kernel
    3694:	20001970 	.word	0x20001970
	ldr r1, =_SCS_ICSR
    3698:	e000ed04 	.word	0xe000ed04

0000369c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    369c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36a0:	b086      	sub	sp, #24
    36a2:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    36a4:	4b3c      	ldr	r3, [pc, #240]	; (3798 <bus_fault.constprop.0+0xfc>)
    36a6:	617b      	str	r3, [r7, #20]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    36a8:	4606      	mov	r6, r0
    36aa:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    36ac:	483b      	ldr	r0, [pc, #236]	; (379c <bus_fault.constprop.0+0x100>)
    36ae:	2402      	movs	r4, #2
    36b0:	f107 0210 	add.w	r2, r7, #16
    36b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    36b8:	613c      	str	r4, [r7, #16]
    36ba:	f007 ff19 	bl	b4f0 <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    36be:	4b38      	ldr	r3, [pc, #224]	; (37a0 <bus_fault.constprop.0+0x104>)
    36c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    36c2:	04db      	lsls	r3, r3, #19
    36c4:	d509      	bpl.n	36da <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
    36c6:	4b37      	ldr	r3, [pc, #220]	; (37a4 <bus_fault.constprop.0+0x108>)
    36c8:	4834      	ldr	r0, [pc, #208]	; (379c <bus_fault.constprop.0+0x100>)
    36ca:	f107 0210 	add.w	r2, r7, #16
    36ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    36d2:	e9c7 4304 	strd	r4, r3, [r7, #16]
    36d6:	f007 ff0b 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    36da:	4b31      	ldr	r3, [pc, #196]	; (37a0 <bus_fault.constprop.0+0x104>)
    36dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    36de:	051c      	lsls	r4, r3, #20
    36e0:	d50a      	bpl.n	36f8 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    36e2:	4b31      	ldr	r3, [pc, #196]	; (37a8 <bus_fault.constprop.0+0x10c>)
    36e4:	617b      	str	r3, [r7, #20]
    36e6:	482d      	ldr	r0, [pc, #180]	; (379c <bus_fault.constprop.0+0x100>)
    36e8:	2302      	movs	r3, #2
    36ea:	f107 0210 	add.w	r2, r7, #16
    36ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    36f2:	613b      	str	r3, [r7, #16]
    36f4:	f007 fefc 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    36f8:	4c29      	ldr	r4, [pc, #164]	; (37a0 <bus_fault.constprop.0+0x104>)
    36fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    36fc:	0598      	lsls	r0, r3, #22
    36fe:	d522      	bpl.n	3746 <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
    3700:	4b2a      	ldr	r3, [pc, #168]	; (37ac <bus_fault.constprop.0+0x110>)
    3702:	617b      	str	r3, [r7, #20]
    3704:	f107 0210 	add.w	r2, r7, #16
    3708:	2302      	movs	r3, #2
    370a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    370e:	4823      	ldr	r0, [pc, #140]	; (379c <bus_fault.constprop.0+0x100>)
    3710:	613b      	str	r3, [r7, #16]
    3712:	f007 feed 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    3716:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3718:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    371a:	0411      	lsls	r1, r2, #16
		PR_FAULT_INFO("  Precise data bus error");
    371c:	46e8      	mov	r8, sp
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    371e:	d512      	bpl.n	3746 <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3720:	b088      	sub	sp, #32
    3722:	4923      	ldr	r1, [pc, #140]	; (37b0 <bus_fault.constprop.0+0x114>)
    3724:	481d      	ldr	r0, [pc, #116]	; (379c <bus_fault.constprop.0+0x100>)
    3726:	466a      	mov	r2, sp
    3728:	e9c2 1305 	strd	r1, r3, [r2, #20]
    372c:	2303      	movs	r3, #3
    372e:	f842 3f10 	str.w	r3, [r2, #16]!
    3732:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3736:	f007 fedb 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
    373a:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    373c:	b11e      	cbz	r6, 3746 <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    373e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3740:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3744:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3746:	4b16      	ldr	r3, [pc, #88]	; (37a0 <bus_fault.constprop.0+0x104>)
    3748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    374a:	055a      	lsls	r2, r3, #21
    374c:	d50a      	bpl.n	3764 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
    374e:	4b19      	ldr	r3, [pc, #100]	; (37b4 <bus_fault.constprop.0+0x118>)
    3750:	617b      	str	r3, [r7, #20]
    3752:	4812      	ldr	r0, [pc, #72]	; (379c <bus_fault.constprop.0+0x100>)
    3754:	2302      	movs	r3, #2
    3756:	f107 0210 	add.w	r2, r7, #16
    375a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    375e:	613b      	str	r3, [r7, #16]
    3760:	f007 fec6 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3764:	4b0e      	ldr	r3, [pc, #56]	; (37a0 <bus_fault.constprop.0+0x104>)
    3766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3768:	05db      	lsls	r3, r3, #23
    376a:	d50a      	bpl.n	3782 <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    376c:	4b12      	ldr	r3, [pc, #72]	; (37b8 <bus_fault.constprop.0+0x11c>)
    376e:	617b      	str	r3, [r7, #20]
    3770:	480a      	ldr	r0, [pc, #40]	; (379c <bus_fault.constprop.0+0x100>)
    3772:	2302      	movs	r3, #2
    3774:	f107 0210 	add.w	r2, r7, #16
    3778:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    377c:	613b      	str	r3, [r7, #16]
    377e:	f007 feb7 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3782:	4a07      	ldr	r2, [pc, #28]	; (37a0 <bus_fault.constprop.0+0x104>)
    3784:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    3786:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3788:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
    378c:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    378e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3790:	7028      	strb	r0, [r5, #0]
}
    3792:	46bd      	mov	sp, r7
    3794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3798:	0000d069 	.word	0x0000d069
    379c:	0000c7c0 	.word	0x0000c7c0
    37a0:	e000ed00 	.word	0xe000ed00
    37a4:	0000d07f 	.word	0x0000d07f
    37a8:	0000d090 	.word	0x0000d090
    37ac:	0000d0a3 	.word	0x0000d0a3
    37b0:	0000d0bc 	.word	0x0000d0bc
    37b4:	0000d0d1 	.word	0x0000d0d1
    37b8:	0000d0ec 	.word	0x0000d0ec

000037bc <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    37bc:	b510      	push	{r4, lr}
    37be:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    37c0:	4b33      	ldr	r3, [pc, #204]	; (3890 <usage_fault.constprop.0+0xd4>)
    37c2:	4834      	ldr	r0, [pc, #208]	; (3894 <usage_fault.constprop.0+0xd8>)
    37c4:	9305      	str	r3, [sp, #20]
    37c6:	2402      	movs	r4, #2
    37c8:	aa04      	add	r2, sp, #16
    37ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    37ce:	9404      	str	r4, [sp, #16]
    37d0:	f007 fe8e 	bl	b4f0 <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    37d4:	4b30      	ldr	r3, [pc, #192]	; (3898 <usage_fault.constprop.0+0xdc>)
    37d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    37d8:	019b      	lsls	r3, r3, #6
    37da:	d508      	bpl.n	37ee <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
    37dc:	4b2f      	ldr	r3, [pc, #188]	; (389c <usage_fault.constprop.0+0xe0>)
    37de:	482d      	ldr	r0, [pc, #180]	; (3894 <usage_fault.constprop.0+0xd8>)
    37e0:	aa04      	add	r2, sp, #16
    37e2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    37e6:	e9cd 4304 	strd	r4, r3, [sp, #16]
    37ea:	f007 fe81 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    37ee:	4b2a      	ldr	r3, [pc, #168]	; (3898 <usage_fault.constprop.0+0xdc>)
    37f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    37f2:	01dc      	lsls	r4, r3, #7
    37f4:	d509      	bpl.n	380a <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
    37f6:	4b2a      	ldr	r3, [pc, #168]	; (38a0 <usage_fault.constprop.0+0xe4>)
    37f8:	9305      	str	r3, [sp, #20]
    37fa:	4826      	ldr	r0, [pc, #152]	; (3894 <usage_fault.constprop.0+0xd8>)
    37fc:	2302      	movs	r3, #2
    37fe:	aa04      	add	r2, sp, #16
    3800:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3804:	9304      	str	r3, [sp, #16]
    3806:	f007 fe73 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    380a:	4b23      	ldr	r3, [pc, #140]	; (3898 <usage_fault.constprop.0+0xdc>)
    380c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    380e:	0318      	lsls	r0, r3, #12
    3810:	d509      	bpl.n	3826 <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
    3812:	4b24      	ldr	r3, [pc, #144]	; (38a4 <usage_fault.constprop.0+0xe8>)
    3814:	9305      	str	r3, [sp, #20]
    3816:	481f      	ldr	r0, [pc, #124]	; (3894 <usage_fault.constprop.0+0xd8>)
    3818:	2302      	movs	r3, #2
    381a:	aa04      	add	r2, sp, #16
    381c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3820:	9304      	str	r3, [sp, #16]
    3822:	f007 fe65 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3826:	4b1c      	ldr	r3, [pc, #112]	; (3898 <usage_fault.constprop.0+0xdc>)
    3828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    382a:	0359      	lsls	r1, r3, #13
    382c:	d509      	bpl.n	3842 <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    382e:	4b1e      	ldr	r3, [pc, #120]	; (38a8 <usage_fault.constprop.0+0xec>)
    3830:	9305      	str	r3, [sp, #20]
    3832:	4818      	ldr	r0, [pc, #96]	; (3894 <usage_fault.constprop.0+0xd8>)
    3834:	2302      	movs	r3, #2
    3836:	aa04      	add	r2, sp, #16
    3838:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    383c:	9304      	str	r3, [sp, #16]
    383e:	f007 fe57 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3842:	4b15      	ldr	r3, [pc, #84]	; (3898 <usage_fault.constprop.0+0xdc>)
    3844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3846:	039a      	lsls	r2, r3, #14
    3848:	d509      	bpl.n	385e <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    384a:	4b18      	ldr	r3, [pc, #96]	; (38ac <usage_fault.constprop.0+0xf0>)
    384c:	9305      	str	r3, [sp, #20]
    384e:	4811      	ldr	r0, [pc, #68]	; (3894 <usage_fault.constprop.0+0xd8>)
    3850:	2302      	movs	r3, #2
    3852:	aa04      	add	r2, sp, #16
    3854:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3858:	9304      	str	r3, [sp, #16]
    385a:	f007 fe49 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    385e:	4b0e      	ldr	r3, [pc, #56]	; (3898 <usage_fault.constprop.0+0xdc>)
    3860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3862:	03db      	lsls	r3, r3, #15
    3864:	d509      	bpl.n	387a <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3866:	4b12      	ldr	r3, [pc, #72]	; (38b0 <usage_fault.constprop.0+0xf4>)
    3868:	9305      	str	r3, [sp, #20]
    386a:	480a      	ldr	r0, [pc, #40]	; (3894 <usage_fault.constprop.0+0xd8>)
    386c:	2302      	movs	r3, #2
    386e:	aa04      	add	r2, sp, #16
    3870:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3874:	9304      	str	r3, [sp, #16]
    3876:	f007 fe3b 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    387a:	4a07      	ldr	r2, [pc, #28]	; (3898 <usage_fault.constprop.0+0xdc>)
    387c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    387e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3882:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    3886:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3888:	6293      	str	r3, [r2, #40]	; 0x28
}
    388a:	b006      	add	sp, #24
    388c:	bd10      	pop	{r4, pc}
    388e:	bf00      	nop
    3890:	0000d104 	.word	0x0000d104
    3894:	0000c7c0 	.word	0x0000c7c0
    3898:	e000ed00 	.word	0xe000ed00
    389c:	0000d11c 	.word	0x0000d11c
    38a0:	0000d12f 	.word	0x0000d12f
    38a4:	0000d149 	.word	0x0000d149
    38a8:	0000d167 	.word	0x0000d167
    38ac:	0000d18c 	.word	0x0000d18c
    38b0:	0000d1a6 	.word	0x0000d1a6

000038b4 <mem_manage_fault>:
{
    38b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    38b8:	b086      	sub	sp, #24
    38ba:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** MPU FAULT *****");
    38bc:	4b43      	ldr	r3, [pc, #268]	; (39cc <mem_manage_fault+0x118>)
    38be:	617b      	str	r3, [r7, #20]
{
    38c0:	4606      	mov	r6, r0
    38c2:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    38c4:	4842      	ldr	r0, [pc, #264]	; (39d0 <mem_manage_fault+0x11c>)
{
    38c6:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    38c8:	2402      	movs	r4, #2
    38ca:	f107 0210 	add.w	r2, r7, #16
    38ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    38d2:	613c      	str	r4, [r7, #16]
    38d4:	f007 fe0c 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    38d8:	4b3e      	ldr	r3, [pc, #248]	; (39d4 <mem_manage_fault+0x120>)
    38da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    38dc:	06d8      	lsls	r0, r3, #27
    38de:	d509      	bpl.n	38f4 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    38e0:	4b3d      	ldr	r3, [pc, #244]	; (39d8 <mem_manage_fault+0x124>)
    38e2:	483b      	ldr	r0, [pc, #236]	; (39d0 <mem_manage_fault+0x11c>)
    38e4:	f107 0210 	add.w	r2, r7, #16
    38e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    38ec:	e9c7 4304 	strd	r4, r3, [r7, #16]
    38f0:	f007 fdfe 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    38f4:	4b37      	ldr	r3, [pc, #220]	; (39d4 <mem_manage_fault+0x120>)
    38f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    38f8:	0719      	lsls	r1, r3, #28
    38fa:	d50a      	bpl.n	3912 <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Unstacking error");
    38fc:	4b37      	ldr	r3, [pc, #220]	; (39dc <mem_manage_fault+0x128>)
    38fe:	617b      	str	r3, [r7, #20]
    3900:	4833      	ldr	r0, [pc, #204]	; (39d0 <mem_manage_fault+0x11c>)
    3902:	2302      	movs	r3, #2
    3904:	f107 0210 	add.w	r2, r7, #16
    3908:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    390c:	613b      	str	r3, [r7, #16]
    390e:	f007 fdef 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3912:	4c30      	ldr	r4, [pc, #192]	; (39d4 <mem_manage_fault+0x120>)
    3914:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3916:	079a      	lsls	r2, r3, #30
    3918:	d423      	bmi.n	3962 <mem_manage_fault+0xae>
	uint32_t mmfar = -EINVAL;
    391a:	f06f 0a15 	mvn.w	sl, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    391e:	4b2d      	ldr	r3, [pc, #180]	; (39d4 <mem_manage_fault+0x120>)
    3920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3922:	07d8      	lsls	r0, r3, #31
    3924:	d50a      	bpl.n	393c <mem_manage_fault+0x88>
		PR_FAULT_INFO("  Instruction Access Violation");
    3926:	4b2e      	ldr	r3, [pc, #184]	; (39e0 <mem_manage_fault+0x12c>)
    3928:	617b      	str	r3, [r7, #20]
    392a:	4829      	ldr	r0, [pc, #164]	; (39d0 <mem_manage_fault+0x11c>)
    392c:	2302      	movs	r3, #2
    392e:	f107 0210 	add.w	r2, r7, #16
    3932:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3936:	613b      	str	r3, [r7, #16]
    3938:	f007 fdda 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    393c:	4b25      	ldr	r3, [pc, #148]	; (39d4 <mem_manage_fault+0x120>)
    393e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3940:	06d1      	lsls	r1, r2, #27
    3942:	d435      	bmi.n	39b0 <mem_manage_fault+0xfc>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3946:	0792      	lsls	r2, r2, #30
    3948:	d432      	bmi.n	39b0 <mem_manage_fault+0xfc>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    394a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    394c:	4a21      	ldr	r2, [pc, #132]	; (39d4 <mem_manage_fault+0x120>)
    394e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3950:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    3954:	6293      	str	r3, [r2, #40]	; 0x28
}
    3956:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    3958:	2300      	movs	r3, #0
    395a:	702b      	strb	r3, [r5, #0]
}
    395c:	46bd      	mov	sp, r7
    395e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    3962:	4b20      	ldr	r3, [pc, #128]	; (39e4 <mem_manage_fault+0x130>)
    3964:	617b      	str	r3, [r7, #20]
    3966:	481a      	ldr	r0, [pc, #104]	; (39d0 <mem_manage_fault+0x11c>)
    3968:	2302      	movs	r3, #2
    396a:	f107 0210 	add.w	r2, r7, #16
    396e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3972:	613b      	str	r3, [r7, #16]
    3974:	f007 fdbc 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    3978:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    397c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    397e:	061b      	lsls	r3, r3, #24
		PR_FAULT_INFO("  Data Access Violation");
    3980:	46e9      	mov	r9, sp
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3982:	d5ca      	bpl.n	391a <mem_manage_fault+0x66>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    3984:	b088      	sub	sp, #32
    3986:	4b18      	ldr	r3, [pc, #96]	; (39e8 <mem_manage_fault+0x134>)
    3988:	4811      	ldr	r0, [pc, #68]	; (39d0 <mem_manage_fault+0x11c>)
    398a:	466a      	mov	r2, sp
    398c:	e9c2 3a05 	strd	r3, sl, [r2, #20]
    3990:	2303      	movs	r3, #3
    3992:	f842 3f10 	str.w	r3, [r2, #16]!
    3996:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    399a:	f007 fda9 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
    399e:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
    39a0:	f1b8 0f00 	cmp.w	r8, #0
    39a4:	d0bb      	beq.n	391e <mem_manage_fault+0x6a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    39a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    39a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    39ac:	62a3      	str	r3, [r4, #40]	; 0x28
    39ae:	e7b6      	b.n	391e <mem_manage_fault+0x6a>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    39b0:	685b      	ldr	r3, [r3, #4]
    39b2:	051b      	lsls	r3, r3, #20
    39b4:	d5c9      	bpl.n	394a <mem_manage_fault+0x96>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    39b6:	4631      	mov	r1, r6
    39b8:	4650      	mov	r0, sl
    39ba:	f7ff fe15 	bl	35e8 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    39be:	2800      	cmp	r0, #0
    39c0:	d0c3      	beq.n	394a <mem_manage_fault+0x96>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    39c2:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    39c6:	2002      	movs	r0, #2
    39c8:	e7c0      	b.n	394c <mem_manage_fault+0x98>
    39ca:	bf00      	nop
    39cc:	0000d1d1 	.word	0x0000d1d1
    39d0:	0000c7c0 	.word	0x0000c7c0
    39d4:	e000ed00 	.word	0xe000ed00
    39d8:	0000d1e7 	.word	0x0000d1e7
    39dc:	0000d090 	.word	0x0000d090
    39e0:	0000d248 	.word	0x0000d248
    39e4:	0000d21a 	.word	0x0000d21a
    39e8:	0000d232 	.word	0x0000d232

000039ec <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    39ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    39f0:	4b76      	ldr	r3, [pc, #472]	; (3bcc <z_arm_fault+0x1e0>)
{
    39f2:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    39f4:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    39f8:	af00      	add	r7, sp, #0
    39fa:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    39fc:	f3c8 0408 	ubfx	r4, r8, #0, #9
    3a00:	2600      	movs	r6, #0
    3a02:	f386 8811 	msr	BASEPRI, r6
    3a06:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3a0a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    3a0e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    3a12:	d10e      	bne.n	3a32 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3a14:	f002 030c 	and.w	r3, r2, #12
    3a18:	2b08      	cmp	r3, #8
    3a1a:	d10c      	bne.n	3a36 <z_arm_fault+0x4a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    3a1c:	4b6c      	ldr	r3, [pc, #432]	; (3bd0 <z_arm_fault+0x1e4>)
    3a1e:	61fb      	str	r3, [r7, #28]
    3a20:	486c      	ldr	r0, [pc, #432]	; (3bd4 <z_arm_fault+0x1e8>)
    3a22:	2302      	movs	r3, #2
    3a24:	f107 0218 	add.w	r2, r7, #24
    3a28:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3a2c:	61bb      	str	r3, [r7, #24]
    3a2e:	f007 fd5f 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
		return NULL;
    3a32:	4635      	mov	r5, r6
    3a34:	e003      	b.n	3a3e <z_arm_fault+0x52>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3a36:	0712      	lsls	r2, r2, #28
    3a38:	d401      	bmi.n	3a3e <z_arm_fault+0x52>
			ptr_esf = (z_arch_esf_t *)msp;
    3a3a:	4605      	mov	r5, r0
			*nested_exc = true;
    3a3c:	2601      	movs	r6, #1
	*recoverable = false;
    3a3e:	2300      	movs	r3, #0
    3a40:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    3a42:	1ee3      	subs	r3, r4, #3
    3a44:	2b09      	cmp	r3, #9
    3a46:	f200 80a1 	bhi.w	3b8c <z_arm_fault+0x1a0>
    3a4a:	e8df f003 	tbb	[pc, r3]
    3a4e:	9405      	.short	0x9405
    3a50:	9f9f9197 	.word	0x9f9f9197
    3a54:	9a9f9f9f 	.word	0x9a9f9f9f
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3a58:	f8df 8170 	ldr.w	r8, [pc, #368]	; 3bcc <z_arm_fault+0x1e0>
	PR_FAULT_INFO("***** HARD FAULT *****");
    3a5c:	4b5e      	ldr	r3, [pc, #376]	; (3bd8 <z_arm_fault+0x1ec>)
    3a5e:	485d      	ldr	r0, [pc, #372]	; (3bd4 <z_arm_fault+0x1e8>)
    3a60:	61fb      	str	r3, [r7, #28]
    3a62:	f04f 0a02 	mov.w	sl, #2
    3a66:	f107 0218 	add.w	r2, r7, #24
    3a6a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3a6e:	f8c7 a018 	str.w	sl, [r7, #24]
    3a72:	f007 fd3d 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3a76:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    3a7a:	f04f 0b00 	mov.w	fp, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3a7e:	ea14 040a 	ands.w	r4, r4, sl
	PR_FAULT_INFO("***** HARD FAULT *****");
    3a82:	46e9      	mov	r9, sp
	*recoverable = false;
    3a84:	f887 b007 	strb.w	fp, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3a88:	d00b      	beq.n	3aa2 <z_arm_fault+0xb6>
		PR_EXC("  Bus fault on vector table read");
    3a8a:	4b54      	ldr	r3, [pc, #336]	; (3bdc <z_arm_fault+0x1f0>)
    3a8c:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
    3a90:	4850      	ldr	r0, [pc, #320]	; (3bd4 <z_arm_fault+0x1e8>)
    3a92:	f107 0218 	add.w	r2, r7, #24
    3a96:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3a9a:	f007 fd29 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3a9e:	2400      	movs	r4, #0
}
    3aa0:	e00d      	b.n	3abe <z_arm_fault+0xd2>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3aa2:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    3aa6:	2b00      	cmp	r3, #0
    3aa8:	da25      	bge.n	3af6 <z_arm_fault+0x10a>
		PR_EXC("  Debug event");
    3aaa:	4b4d      	ldr	r3, [pc, #308]	; (3be0 <z_arm_fault+0x1f4>)
    3aac:	4849      	ldr	r0, [pc, #292]	; (3bd4 <z_arm_fault+0x1e8>)
    3aae:	f107 0218 	add.w	r2, r7, #24
    3ab2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3ab6:	e9c7 a306 	strd	sl, r3, [r7, #24]
    3aba:	f007 fd19 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3abe:	79fb      	ldrb	r3, [r7, #7]
    3ac0:	b9ab      	cbnz	r3, 3aee <z_arm_fault+0x102>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3ac2:	2220      	movs	r2, #32
    3ac4:	4629      	mov	r1, r5
    3ac6:	f107 0008 	add.w	r0, r7, #8
    3aca:	f007 fd3a 	bl	b542 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3ad0:	2e00      	cmp	r6, #0
    3ad2:	d076      	beq.n	3bc2 <z_arm_fault+0x1d6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3ad4:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3ad8:	b922      	cbnz	r2, 3ae4 <z_arm_fault+0xf8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3ada:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3ade:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3ae2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    3ae4:	f107 0108 	add.w	r1, r7, #8
    3ae8:	4620      	mov	r0, r4
    3aea:	f7ff fc35 	bl	3358 <z_arm_fatal_error>
}
    3aee:	372c      	adds	r7, #44	; 0x2c
    3af0:	46bd      	mov	sp, r7
    3af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3af6:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    3afa:	005b      	lsls	r3, r3, #1
    3afc:	d5df      	bpl.n	3abe <z_arm_fault+0xd2>
		PR_EXC("  Fault escalation (see below)");
    3afe:	4b39      	ldr	r3, [pc, #228]	; (3be4 <z_arm_fault+0x1f8>)
    3b00:	4834      	ldr	r0, [pc, #208]	; (3bd4 <z_arm_fault+0x1e8>)
    3b02:	f107 0218 	add.w	r2, r7, #24
    3b06:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3b0a:	e9c7 a306 	strd	sl, r3, [r7, #24]
    3b0e:	f007 fcef 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    3b12:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3b14:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    3b18:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3b1c:	429a      	cmp	r2, r3
    3b1e:	d009      	beq.n	3b34 <z_arm_fault+0x148>
		} else if (SCB_MMFSR != 0) {
    3b20:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    3b24:	b1bb      	cbz	r3, 3b56 <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
    3b26:	1dfa      	adds	r2, r7, #7
    3b28:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    3b2a:	4628      	mov	r0, r5
    3b2c:	f7ff fec2 	bl	38b4 <mem_manage_fault>
    3b30:	4604      	mov	r4, r0
		break;
    3b32:	e7c4      	b.n	3abe <z_arm_fault+0xd2>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    3b34:	b088      	sub	sp, #32
    3b36:	682b      	ldr	r3, [r5, #0]
    3b38:	492b      	ldr	r1, [pc, #172]	; (3be8 <z_arm_fault+0x1fc>)
    3b3a:	4826      	ldr	r0, [pc, #152]	; (3bd4 <z_arm_fault+0x1e8>)
    3b3c:	466a      	mov	r2, sp
    3b3e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    3b42:	2303      	movs	r3, #3
    3b44:	f842 3f10 	str.w	r3, [r2, #16]!
    3b48:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3b4c:	f007 fcd0 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
    3b50:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    3b52:	682c      	ldr	r4, [r5, #0]
    3b54:	e7b3      	b.n	3abe <z_arm_fault+0xd2>
		} else if (SCB_BFSR != 0) {
    3b56:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    3b5a:	b123      	cbz	r3, 3b66 <z_arm_fault+0x17a>
			reason = bus_fault(esf, 1, recoverable);
    3b5c:	1df9      	adds	r1, r7, #7
    3b5e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    3b60:	f7ff fd9c 	bl	369c <bus_fault.constprop.0>
    3b64:	e7e4      	b.n	3b30 <z_arm_fault+0x144>
		} else if (SCB_UFSR != 0) {
    3b66:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    3b6a:	b29b      	uxth	r3, r3
    3b6c:	2b00      	cmp	r3, #0
    3b6e:	d0a6      	beq.n	3abe <z_arm_fault+0xd2>
		reason = usage_fault(esf);
    3b70:	f7ff fe24 	bl	37bc <usage_fault.constprop.0>
    3b74:	e7dc      	b.n	3b30 <z_arm_fault+0x144>
		reason = mem_manage_fault(esf, 0, recoverable);
    3b76:	1dfa      	adds	r2, r7, #7
    3b78:	2100      	movs	r1, #0
    3b7a:	e7d6      	b.n	3b2a <z_arm_fault+0x13e>
		reason = bus_fault(esf, 0, recoverable);
    3b7c:	1df9      	adds	r1, r7, #7
    3b7e:	2000      	movs	r0, #0
    3b80:	e7ee      	b.n	3b60 <z_arm_fault+0x174>
	PR_FAULT_INFO(
    3b82:	4b1a      	ldr	r3, [pc, #104]	; (3bec <z_arm_fault+0x200>)
    3b84:	61fb      	str	r3, [r7, #28]
    3b86:	2302      	movs	r3, #2
    3b88:	61bb      	str	r3, [r7, #24]
    3b8a:	e781      	b.n	3a90 <z_arm_fault+0xa4>
	PR_FAULT_INFO("***** %s %d) *****",
    3b8c:	4a18      	ldr	r2, [pc, #96]	; (3bf0 <z_arm_fault+0x204>)
    3b8e:	4b19      	ldr	r3, [pc, #100]	; (3bf4 <z_arm_fault+0x208>)
    3b90:	4919      	ldr	r1, [pc, #100]	; (3bf8 <z_arm_fault+0x20c>)
    3b92:	4810      	ldr	r0, [pc, #64]	; (3bd4 <z_arm_fault+0x1e8>)
    3b94:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    3b98:	46e8      	mov	r8, sp
    3b9a:	b08a      	sub	sp, #40	; 0x28
    3b9c:	bf18      	it	ne
    3b9e:	4613      	movne	r3, r2
    3ba0:	466a      	mov	r2, sp
    3ba2:	e9c2 1305 	strd	r1, r3, [r2, #20]
    3ba6:	2302      	movs	r3, #2
    3ba8:	f882 3020 	strb.w	r3, [r2, #32]
    3bac:	3c10      	subs	r4, #16
    3bae:	4b13      	ldr	r3, [pc, #76]	; (3bfc <z_arm_fault+0x210>)
    3bb0:	61d4      	str	r4, [r2, #28]
    3bb2:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    3bb6:	f842 3f10 	str.w	r3, [r2, #16]!
    3bba:	f007 fc99 	bl	b4f0 <z_log_msg2_static_create.constprop.0>
    3bbe:	46c5      	mov	sp, r8
    3bc0:	e76d      	b.n	3a9e <z_arm_fault+0xb2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3bc2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3bc6:	f023 0301 	bic.w	r3, r3, #1
    3bca:	e78a      	b.n	3ae2 <z_arm_fault+0xf6>
    3bcc:	e000ed00 	.word	0xe000ed00
    3bd0:	0000d295 	.word	0x0000d295
    3bd4:	0000c7c0 	.word	0x0000c7c0
    3bd8:	0000d2c0 	.word	0x0000d2c0
    3bdc:	0000d2d7 	.word	0x0000d2d7
    3be0:	0000d2f8 	.word	0x0000d2f8
    3be4:	0000d306 	.word	0x0000d306
    3be8:	0000d325 	.word	0x0000d325
    3bec:	0000d341 	.word	0x0000d341
    3bf0:	0000d27c 	.word	0x0000d27c
    3bf4:	0000d267 	.word	0x0000d267
    3bf8:	0000d365 	.word	0x0000d365
    3bfc:	01000004 	.word	0x01000004

00003c00 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3c00:	4a02      	ldr	r2, [pc, #8]	; (3c0c <z_arm_fault_init+0xc>)
    3c02:	6953      	ldr	r3, [r2, #20]
    3c04:	f043 0310 	orr.w	r3, r3, #16
    3c08:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    3c0a:	4770      	bx	lr
    3c0c:	e000ed00 	.word	0xe000ed00

00003c10 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3c10:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3c14:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3c18:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3c1a:	4672      	mov	r2, lr
	bl z_arm_fault
    3c1c:	f7ff fee6 	bl	39ec <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3c20:	bd01      	pop	{r0, pc}
    3c22:	bf00      	nop

00003c24 <z_arm_interrupt_init>:
    3c24:	4804      	ldr	r0, [pc, #16]	; (3c38 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3c26:	2300      	movs	r3, #0
    3c28:	2120      	movs	r1, #32
    3c2a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3c2c:	3301      	adds	r3, #1
    3c2e:	2b28      	cmp	r3, #40	; 0x28
    3c30:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3c34:	d1f9      	bne.n	3c2a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    3c36:	4770      	bx	lr
    3c38:	e000e100 	.word	0xe000e100

00003c3c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    3c3c:	2000      	movs	r0, #0
    msr CONTROL, r0
    3c3e:	f380 8814 	msr	CONTROL, r0
    isb
    3c42:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    3c46:	f008 fc5d 	bl	c504 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    3c4a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3c4c:	490d      	ldr	r1, [pc, #52]	; (3c84 <__start+0x48>)
    str r0, [r1]
    3c4e:	6008      	str	r0, [r1, #0]
    dsb
    3c50:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3c54:	480c      	ldr	r0, [pc, #48]	; (3c88 <__start+0x4c>)
    msr msp, r0
    3c56:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    3c5a:	f000 f82b 	bl	3cb4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3c5e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3c60:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3c64:	4809      	ldr	r0, [pc, #36]	; (3c8c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3c66:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    3c6a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3c6c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3c70:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3c74:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3c76:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3c78:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3c7c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3c80:	f7ff fc2c 	bl	34dc <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    3c84:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3c88:	20002940 	.word	0x20002940
    ldr r0, =z_interrupt_stacks
    3c8c:	20002a80 	.word	0x20002a80

00003c90 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    3c90:	4907      	ldr	r1, [pc, #28]	; (3cb0 <z_arm_clear_arm_mpu_config+0x20>)
    3c92:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    3c96:	2300      	movs	r3, #0
	int num_regions =
    3c98:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    3c9c:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    3c9e:	4293      	cmp	r3, r2
    3ca0:	d100      	bne.n	3ca4 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    3ca2:	4770      	bx	lr
  MPU->RNR = rnr;
    3ca4:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    3ca8:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    3cac:	3301      	adds	r3, #1
    3cae:	e7f6      	b.n	3c9e <z_arm_clear_arm_mpu_config+0xe>
    3cb0:	e000ed00 	.word	0xe000ed00

00003cb4 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3cb4:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    3cb6:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    3cb8:	2300      	movs	r3, #0
    3cba:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    3cbe:	f7ff ffe7 	bl	3c90 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    3cc2:	4b14      	ldr	r3, [pc, #80]	; (3d14 <z_arm_init_arch_hw_at_boot+0x60>)
    3cc4:	f04f 32ff 	mov.w	r2, #4294967295
    3cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    3ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    3cd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    3cd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    3cd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    3cdc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3ce0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    3ce4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3ce8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3cec:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    3cf0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    3cf4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    3cf8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    3cfc:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    3d00:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    3d04:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    3d08:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3d0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3d0e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3d12:	bd08      	pop	{r3, pc}
    3d14:	e000e100 	.word	0xe000e100

00003d18 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    3d18:	4b08      	ldr	r3, [pc, #32]	; (3d3c <z_impl_k_thread_abort+0x24>)
    3d1a:	689b      	ldr	r3, [r3, #8]
    3d1c:	4283      	cmp	r3, r0
    3d1e:	d10b      	bne.n	3d38 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3d20:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3d24:	b143      	cbz	r3, 3d38 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3d26:	4b06      	ldr	r3, [pc, #24]	; (3d40 <z_impl_k_thread_abort+0x28>)
    3d28:	685a      	ldr	r2, [r3, #4]
    3d2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    3d2e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    3d30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3d32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3d36:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    3d38:	f006 ba68 	b.w	a20c <z_thread_abort>
    3d3c:	20001970 	.word	0x20001970
    3d40:	e000ed00 	.word	0xe000ed00

00003d44 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3d44:	4b02      	ldr	r3, [pc, #8]	; (3d50 <z_arm_configure_static_mpu_regions+0xc>)
    3d46:	4a03      	ldr	r2, [pc, #12]	; (3d54 <z_arm_configure_static_mpu_regions+0x10>)
    3d48:	4803      	ldr	r0, [pc, #12]	; (3d58 <z_arm_configure_static_mpu_regions+0x14>)
    3d4a:	2101      	movs	r1, #1
    3d4c:	f000 b890 	b.w	3e70 <arm_core_mpu_configure_static_mpu_regions>
    3d50:	20008000 	.word	0x20008000
    3d54:	20000000 	.word	0x20000000
    3d58:	0000c928 	.word	0x0000c928

00003d5c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3d5c:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    3d5e:	4b05      	ldr	r3, [pc, #20]	; (3d74 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    3d60:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    3d62:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3d64:	4a04      	ldr	r2, [pc, #16]	; (3d78 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    3d66:	2120      	movs	r1, #32
    3d68:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3d6c:	4618      	mov	r0, r3
    3d6e:	2101      	movs	r1, #1
    3d70:	f000 b888 	b.w	3e84 <arm_core_mpu_configure_dynamic_mpu_regions>
    3d74:	20000ca8 	.word	0x20000ca8
    3d78:	150b0000 	.word	0x150b0000

00003d7c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    3d7e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 3e34 <mpu_configure_regions+0xb8>
    3d82:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    3d84:	2500      	movs	r5, #0
    3d86:	428d      	cmp	r5, r1
    3d88:	da1a      	bge.n	3dc0 <mpu_configure_regions+0x44>
		if (regions[i].size == 0U) {
    3d8a:	6844      	ldr	r4, [r0, #4]
    3d8c:	2c00      	cmp	r4, #0
    3d8e:	d04d      	beq.n	3e2c <mpu_configure_regions+0xb0>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    3d90:	b1fb      	cbz	r3, 3dd2 <mpu_configure_regions+0x56>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    3d92:	f104 3eff 	add.w	lr, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    3d96:	ea14 0f0e 	tst.w	r4, lr
    3d9a:	d014      	beq.n	3dc6 <mpu_configure_regions+0x4a>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    3d9c:	4b26      	ldr	r3, [pc, #152]	; (3e38 <mpu_configure_regions+0xbc>)
    3d9e:	466c      	mov	r4, sp
    3da0:	b088      	sub	sp, #32
    3da2:	466a      	mov	r2, sp
    3da4:	e9c2 3505 	strd	r3, r5, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3da8:	2303      	movs	r3, #3
    3daa:	f842 3f10 	str.w	r3, [r2, #16]!
    3dae:	4823      	ldr	r0, [pc, #140]	; (3e3c <mpu_configure_regions+0xc0>)
    3db0:	2300      	movs	r3, #0
    3db2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3db6:	f007 faff 	bl	b3b8 <z_impl_z_log_msg2_static_create>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3dba:	f06f 0215 	mvn.w	r2, #21
    3dbe:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    3dc0:	4610      	mov	r0, r2
    3dc2:	46bd      	mov	sp, r7
    3dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    3dc6:	2c1f      	cmp	r4, #31
    3dc8:	d9e8      	bls.n	3d9c <mpu_configure_regions+0x20>
		((part->start & (part->size - 1U)) == 0U);
    3dca:	6806      	ldr	r6, [r0, #0]
		&&
    3dcc:	ea1e 0f06 	tst.w	lr, r6
    3dd0:	d1e4      	bne.n	3d9c <mpu_configure_regions+0x20>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    3dd2:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    3dd4:	6806      	ldr	r6, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3dd6:	f8d0 e008 	ldr.w	lr, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3dda:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    3ddc:	d914      	bls.n	3e08 <mpu_configure_regions+0x8c>
	if (size > (1UL << 31)) {
    3dde:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    3de2:	d813      	bhi.n	3e0c <mpu_configure_regions+0x90>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3de4:	3c01      	subs	r4, #1
    3de6:	fab4 f484 	clz	r4, r4
    3dea:	f1c4 041f 	rsb	r4, r4, #31
    3dee:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    3df0:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3df2:	ea4e 0404 	orr.w	r4, lr, r4
    3df6:	d90b      	bls.n	3e10 <mpu_configure_regions+0x94>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3df8:	4911      	ldr	r1, [pc, #68]	; (3e40 <mpu_configure_regions+0xc4>)
    3dfa:	466c      	mov	r4, sp
    3dfc:	b088      	sub	sp, #32
    3dfe:	466b      	mov	r3, sp
    3e00:	e9c3 1205 	strd	r1, r2, [r3, #20]
    3e04:	461a      	mov	r2, r3
    3e06:	e7cf      	b.n	3da8 <mpu_configure_regions+0x2c>
		return REGION_32B;
    3e08:	2408      	movs	r4, #8
    3e0a:	e7f1      	b.n	3df0 <mpu_configure_regions+0x74>
		return REGION_4G;
    3e0c:	243e      	movs	r4, #62	; 0x3e
    3e0e:	e7ef      	b.n	3df0 <mpu_configure_regions+0x74>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3e10:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
    3e14:	4316      	orrs	r6, r2
    3e16:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3e1a:	f044 0401 	orr.w	r4, r4, #1
    3e1e:	f8cc 2098 	str.w	r2, [ip, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3e22:	f8cc 609c 	str.w	r6, [ip, #156]	; 0x9c
		reg_index++;
    3e26:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3e28:	f8cc 40a0 	str.w	r4, [ip, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    3e2c:	3501      	adds	r5, #1
    3e2e:	300c      	adds	r0, #12
    3e30:	e7a9      	b.n	3d86 <mpu_configure_regions+0xa>
    3e32:	bf00      	nop
    3e34:	e000ed00 	.word	0xe000ed00
    3e38:	0000d37c 	.word	0x0000d37c
    3e3c:	0000c7b8 	.word	0x0000c7b8
    3e40:	0000d39f 	.word	0x0000d39f

00003e44 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3e44:	4b04      	ldr	r3, [pc, #16]	; (3e58 <arm_core_mpu_enable+0x14>)
    3e46:	2205      	movs	r2, #5
    3e48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    3e4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3e50:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3e54:	4770      	bx	lr
    3e56:	bf00      	nop
    3e58:	e000ed00 	.word	0xe000ed00

00003e5c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3e5c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3e60:	4b02      	ldr	r3, [pc, #8]	; (3e6c <arm_core_mpu_disable+0x10>)
    3e62:	2200      	movs	r2, #0
    3e64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    3e68:	4770      	bx	lr
    3e6a:	bf00      	nop
    3e6c:	e000ed00 	.word	0xe000ed00

00003e70 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3e70:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3e72:	4c03      	ldr	r4, [pc, #12]	; (3e80 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3e74:	2301      	movs	r3, #1
    3e76:	7822      	ldrb	r2, [r4, #0]
    3e78:	f7ff ff80 	bl	3d7c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3e7c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    3e7e:	bd10      	pop	{r4, pc}
    3e80:	200019d8 	.word	0x200019d8

00003e84 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3e84:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3e86:	4a09      	ldr	r2, [pc, #36]	; (3eac <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    3e88:	2300      	movs	r3, #0
    3e8a:	7812      	ldrb	r2, [r2, #0]
    3e8c:	f7ff ff76 	bl	3d7c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3e90:	f110 0f16 	cmn.w	r0, #22
    3e94:	d003      	beq.n	3e9e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    3e96:	4b06      	ldr	r3, [pc, #24]	; (3eb0 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    3e98:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    3e9a:	2807      	cmp	r0, #7
    3e9c:	dd00      	ble.n	3ea0 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    3e9e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    3ea0:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    3ea4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    3ea8:	3001      	adds	r0, #1
    3eaa:	e7f6      	b.n	3e9a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    3eac:	200019d8 	.word	0x200019d8
    3eb0:	e000ed00 	.word	0xe000ed00

00003eb4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3eb4:	4914      	ldr	r1, [pc, #80]	; (3f08 <z_arm_mpu_init+0x54>)
    3eb6:	6808      	ldr	r0, [r1, #0]
    3eb8:	2808      	cmp	r0, #8
{
    3eba:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3ebc:	d821      	bhi.n	3f02 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3ebe:	f7ff ffcd 	bl	3e5c <arm_core_mpu_disable>
    3ec2:	4c12      	ldr	r4, [pc, #72]	; (3f0c <z_arm_mpu_init+0x58>)
    3ec4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3ec6:	2200      	movs	r2, #0
    3ec8:	4290      	cmp	r0, r2
    3eca:	f101 010c 	add.w	r1, r1, #12
    3ece:	d105      	bne.n	3edc <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3ed0:	4b0f      	ldr	r3, [pc, #60]	; (3f10 <z_arm_mpu_init+0x5c>)
    3ed2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    3ed4:	f7ff ffb6 	bl	3e44 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3ed8:	2000      	movs	r0, #0
}
    3eda:	bd10      	pop	{r4, pc}
    3edc:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3ee0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    3ee4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3ee8:	4313      	orrs	r3, r2
    3eea:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3eee:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3ef2:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3ef6:	f043 0301 	orr.w	r3, r3, #1
    3efa:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3efe:	3201      	adds	r2, #1
    3f00:	e7e2      	b.n	3ec8 <z_arm_mpu_init+0x14>
		return -1;
    3f02:	f04f 30ff 	mov.w	r0, #4294967295
    3f06:	e7e8      	b.n	3eda <z_arm_mpu_init+0x26>
    3f08:	0000c934 	.word	0x0000c934
    3f0c:	e000ed00 	.word	0xe000ed00
    3f10:	200019d8 	.word	0x200019d8

00003f14 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3f14:	4b01      	ldr	r3, [pc, #4]	; (3f1c <__stdout_hook_install+0x8>)
    3f16:	6018      	str	r0, [r3, #0]
}
    3f18:	4770      	bx	lr
    3f1a:	bf00      	nop
    3f1c:	2000000c 	.word	0x2000000c

00003f20 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    3f20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f24:	b2c0      	uxtb	r0, r0
    3f26:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    3f2a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3f2e:	4905      	ldr	r1, [pc, #20]	; (3f44 <sys_arch_reboot+0x24>)
    3f30:	4b05      	ldr	r3, [pc, #20]	; (3f48 <sys_arch_reboot+0x28>)
    3f32:	68ca      	ldr	r2, [r1, #12]
    3f34:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3f38:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3f3a:	60cb      	str	r3, [r1, #12]
    3f3c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3f40:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3f42:	e7fd      	b.n	3f40 <sys_arch_reboot+0x20>
    3f44:	e000ed00 	.word	0xe000ed00
    3f48:	05fa0004 	.word	0x05fa0004

00003f4c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3f4c:	b120      	cbz	r0, 3f58 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    3f4e:	4b03      	ldr	r3, [pc, #12]	; (3f5c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3f50:	0180      	lsls	r0, r0, #6
    3f52:	f043 0301 	orr.w	r3, r3, #1
    3f56:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    3f58:	4770      	bx	lr
    3f5a:	bf00      	nop
    3f5c:	0000c880 	.word	0x0000c880

00003f60 <hid_status_cb.part.0>:
		break;
	}

}

static void hid_status_cb(struct usb_cfg_data *cfg,
    3f60:	b580      	push	{r7, lr}

	LOG_DBG("cfg %p status %d", cfg, status);

	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
	if (common == NULL) {
		LOG_WRN("Device data not found for cfg %p", cfg);
    3f62:	4b08      	ldr	r3, [pc, #32]	; (3f84 <hid_status_cb.part.0+0x24>)
static void hid_status_cb(struct usb_cfg_data *cfg,
    3f64:	af00      	add	r7, sp, #0
		LOG_WRN("Device data not found for cfg %p", cfg);
    3f66:	b088      	sub	sp, #32
    3f68:	466a      	mov	r2, sp
    3f6a:	e9c2 3005 	strd	r3, r0, [r2, #20]
    3f6e:	2303      	movs	r3, #3
    3f70:	f842 3f10 	str.w	r3, [r2, #16]!
    3f74:	4804      	ldr	r0, [pc, #16]	; (3f88 <hid_status_cb.part.0+0x28>)
    3f76:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    3f7a:	f007 fb1d 	bl	b5b8 <z_log_msg2_static_create.constprop.0>
	}

	dev_data = CONTAINER_OF(common, struct hid_device_info, common);

	hid_do_status_cb(dev_data, status, param);
}
    3f7e:	46bd      	mov	sp, r7
    3f80:	bd80      	pop	{r7, pc}
    3f82:	bf00      	nop
    3f84:	0000d3d8 	.word	0x0000d3d8
    3f88:	0000c810 	.word	0x0000c810

00003f8c <hid_status_cb>:
{
    3f8c:	b570      	push	{r4, r5, r6, lr}
    3f8e:	4606      	mov	r6, r0
    3f90:	b086      	sub	sp, #24
    3f92:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
    3f94:	4601      	mov	r1, r0
    3f96:	4835      	ldr	r0, [pc, #212]	; (406c <hid_status_cb+0xe0>)
    3f98:	f007 fa6b 	bl	b472 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    3f9c:	4604      	mov	r4, r0
    3f9e:	b928      	cbnz	r0, 3fac <hid_status_cb+0x20>
    3fa0:	4630      	mov	r0, r6
}
    3fa2:	b006      	add	sp, #24
    3fa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3fa8:	f7ff bfda 	b.w	3f60 <hid_status_cb.part.0>
	switch (status) {
    3fac:	2d0a      	cmp	r5, #10
    3fae:	d85a      	bhi.n	4066 <hid_status_cb+0xda>
    3fb0:	e8df f005 	tbb	[pc, r5]
    3fb4:	23211106 	.word	0x23211106
    3fb8:	59403432 	.word	0x59403432
    3fbc:	5959      	.short	0x5959
    3fbe:	30          	.byte	0x30
    3fbf:	00          	.byte	0x00
		LOG_INF("Device error");
    3fc0:	4b2b      	ldr	r3, [pc, #172]	; (4070 <hid_status_cb+0xe4>)
		LOG_INF("Unknown event");
    3fc2:	9305      	str	r3, [sp, #20]
    3fc4:	482b      	ldr	r0, [pc, #172]	; (4074 <hid_status_cb+0xe8>)
    3fc6:	2302      	movs	r3, #2
    3fc8:	aa04      	add	r2, sp, #16
    3fca:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    3fce:	9304      	str	r3, [sp, #16]
    3fd0:	f007 faf2 	bl	b5b8 <z_log_msg2_static_create.constprop.0>
    3fd4:	e01e      	b.n	4014 <hid_status_cb+0x88>
		LOG_INF("Device reset detected");
    3fd6:	4b28      	ldr	r3, [pc, #160]	; (4078 <hid_status_cb+0xec>)
		LOG_INF("Device disconnected");
    3fd8:	9305      	str	r3, [sp, #20]
    3fda:	4826      	ldr	r0, [pc, #152]	; (4074 <hid_status_cb+0xe8>)
    3fdc:	2302      	movs	r3, #2
    3fde:	aa04      	add	r2, sp, #16
    3fe0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    3fe4:	9304      	str	r3, [sp, #16]
    3fe6:	f007 fae7 	bl	b5b8 <z_log_msg2_static_create.constprop.0>
		dev_data->configured = false;
    3fea:	2300      	movs	r3, #0
    3fec:	f804 3c04 	strb.w	r3, [r4, #-4]
			dev_data->suspended = false;
    3ff0:	f804 3c03 	strb.w	r3, [r4, #-3]
    3ff4:	e00e      	b.n	4014 <hid_status_cb+0x88>
		LOG_INF("Device connected");
    3ff6:	4b21      	ldr	r3, [pc, #132]	; (407c <hid_status_cb+0xf0>)
    3ff8:	e7e3      	b.n	3fc2 <hid_status_cb+0x36>
		LOG_INF("Device configured");
    3ffa:	4b21      	ldr	r3, [pc, #132]	; (4080 <hid_status_cb+0xf4>)
    3ffc:	9305      	str	r3, [sp, #20]
    3ffe:	481d      	ldr	r0, [pc, #116]	; (4074 <hid_status_cb+0xe8>)
    4000:	2302      	movs	r3, #2
    4002:	aa04      	add	r2, sp, #16
    4004:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4008:	9304      	str	r3, [sp, #16]
    400a:	f007 fad5 	bl	b5b8 <z_log_msg2_static_create.constprop.0>
		dev_data->configured = true;
    400e:	2301      	movs	r3, #1
    4010:	f804 3c04 	strb.w	r3, [r4, #-4]
}
    4014:	b006      	add	sp, #24
    4016:	bd70      	pop	{r4, r5, r6, pc}
		LOG_INF("Device disconnected");
    4018:	4b1a      	ldr	r3, [pc, #104]	; (4084 <hid_status_cb+0xf8>)
    401a:	e7dd      	b.n	3fd8 <hid_status_cb+0x4c>
		LOG_INF("Device suspended");
    401c:	4b1a      	ldr	r3, [pc, #104]	; (4088 <hid_status_cb+0xfc>)
    401e:	9305      	str	r3, [sp, #20]
    4020:	4814      	ldr	r0, [pc, #80]	; (4074 <hid_status_cb+0xe8>)
    4022:	2302      	movs	r3, #2
    4024:	aa04      	add	r2, sp, #16
    4026:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    402a:	9304      	str	r3, [sp, #16]
    402c:	f007 fac4 	bl	b5b8 <z_log_msg2_static_create.constprop.0>
		dev_data->suspended = true;
    4030:	2301      	movs	r3, #1
    4032:	e7dd      	b.n	3ff0 <hid_status_cb+0x64>
		LOG_INF("Device resumed");
    4034:	4b15      	ldr	r3, [pc, #84]	; (408c <hid_status_cb+0x100>)
    4036:	480f      	ldr	r0, [pc, #60]	; (4074 <hid_status_cb+0xe8>)
    4038:	9305      	str	r3, [sp, #20]
    403a:	2502      	movs	r5, #2
    403c:	aa04      	add	r2, sp, #16
    403e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4042:	9504      	str	r5, [sp, #16]
    4044:	f007 fab8 	bl	b5b8 <z_log_msg2_static_create.constprop.0>
		if (dev_data->suspended) {
    4048:	f814 3c03 	ldrb.w	r3, [r4, #-3]
    404c:	2b00      	cmp	r3, #0
    404e:	d0e1      	beq.n	4014 <hid_status_cb+0x88>
			LOG_INF("from suspend");
    4050:	4b0f      	ldr	r3, [pc, #60]	; (4090 <hid_status_cb+0x104>)
    4052:	4808      	ldr	r0, [pc, #32]	; (4074 <hid_status_cb+0xe8>)
    4054:	aa04      	add	r2, sp, #16
    4056:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    405a:	e9cd 5304 	strd	r5, r3, [sp, #16]
    405e:	f007 faab 	bl	b5b8 <z_log_msg2_static_create.constprop.0>
			dev_data->suspended = false;
    4062:	2300      	movs	r3, #0
    4064:	e7c4      	b.n	3ff0 <hid_status_cb+0x64>
		LOG_INF("Unknown event");
    4066:	4b0b      	ldr	r3, [pc, #44]	; (4094 <hid_status_cb+0x108>)
    4068:	e7ab      	b.n	3fc2 <hid_status_cb+0x36>
    406a:	bf00      	nop
    406c:	20000ccc 	.word	0x20000ccc
    4070:	0000d3f9 	.word	0x0000d3f9
    4074:	0000c810 	.word	0x0000c810
    4078:	0000d406 	.word	0x0000d406
    407c:	0000d41c 	.word	0x0000d41c
    4080:	0000d42d 	.word	0x0000d42d
    4084:	0000d43f 	.word	0x0000d43f
    4088:	0000d453 	.word	0x0000d453
    408c:	0000d464 	.word	0x0000d464
    4090:	0000d473 	.word	0x0000d473
    4094:	0000d480 	.word	0x0000d480

00004098 <hid_class_handle_req>:

static int hid_class_handle_req(struct usb_setup_packet *setup,
				int32_t *len, uint8_t **data)
{
    4098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    409c:	4604      	mov	r4, r0
    409e:	af00      	add	r7, sp, #0
    40a0:	4688      	mov	r8, r1

	LOG_DBG("Class request:"
		"bRequest 0x%02x, bmRequestType 0x%02x len %d",
		setup->bRequest, setup->bmRequestType, *len);

	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
    40a2:	7901      	ldrb	r1, [r0, #4]
    40a4:	4827      	ldr	r0, [pc, #156]	; (4144 <hid_class_handle_req+0xac>)
{
    40a6:	4691      	mov	r9, r2
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
    40a8:	f007 f9ef 	bl	b48a <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    40ac:	4606      	mov	r6, r0
    40ae:	b9a0      	cbnz	r0, 40da <hid_class_handle_req+0x42>
		LOG_WRN("Device data not found for interface %u",
    40b0:	88a3      	ldrh	r3, [r4, #4]
    40b2:	4925      	ldr	r1, [pc, #148]	; (4148 <hid_class_handle_req+0xb0>)
    40b4:	4825      	ldr	r0, [pc, #148]	; (414c <hid_class_handle_req+0xb4>)
    40b6:	466c      	mov	r4, sp
    40b8:	b088      	sub	sp, #32
    40ba:	466a      	mov	r2, sp
    40bc:	e9c2 1305 	strd	r1, r3, [r2, #20]
    40c0:	2303      	movs	r3, #3
    40c2:	f842 3f10 	str.w	r3, [r2, #16]!
    40c6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    40ca:	f007 fa75 	bl	b5b8 <z_log_msg2_static_create.constprop.0>
			setup->wIndex);
		return -ENODEV;
    40ce:	f06f 0012 	mvn.w	r0, #18
    40d2:	46a5      	mov	sp, r4
			break;
		}
	}

	return -ENOTSUP;
}
    40d4:	46bd      	mov	sp, r7
    40d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (usb_reqtype_is_to_host(setup)) {
    40da:	f994 3000 	ldrsb.w	r3, [r4]
	dev = common->dev;
    40de:	6800      	ldr	r0, [r0, #0]
		switch (setup->bRequest) {
    40e0:	7865      	ldrb	r5, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    40e2:	2b00      	cmp	r3, #0
    40e4:	da13      	bge.n	410e <hid_class_handle_req+0x76>
		switch (setup->bRequest) {
    40e6:	2d01      	cmp	r5, #1
    40e8:	d005      	beq.n	40f6 <hid_class_handle_req+0x5e>
    40ea:	1eab      	subs	r3, r5, #2
		switch (setup->bRequest) {
    40ec:	2b01      	cmp	r3, #1
    40ee:	d819      	bhi.n	4124 <hid_class_handle_req+0x8c>
				return hid_on_get_report(dev_data, setup, len,
    40f0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    40f4:	e7ee      	b.n	40d4 <hid_class_handle_req+0x3c>
			if (dev_data->ops && dev_data->ops->get_report) {
    40f6:	f856 3c08 	ldr.w	r3, [r6, #-8]
    40fa:	2b00      	cmp	r3, #0
    40fc:	d0f8      	beq.n	40f0 <hid_class_handle_req+0x58>
    40fe:	681d      	ldr	r5, [r3, #0]
			if (dev_data->ops && dev_data->ops->set_report) {
    4100:	2d00      	cmp	r5, #0
    4102:	d0f5      	beq.n	40f0 <hid_class_handle_req+0x58>
				return dev_data->ops->set_report(dev, setup,
    4104:	464b      	mov	r3, r9
    4106:	4642      	mov	r2, r8
    4108:	4621      	mov	r1, r4
    410a:	47a8      	blx	r5
    410c:	e7e2      	b.n	40d4 <hid_class_handle_req+0x3c>
		switch (setup->bRequest) {
    410e:	2d09      	cmp	r5, #9
    4110:	d002      	beq.n	4118 <hid_class_handle_req+0x80>
    4112:	f1a5 030a 	sub.w	r3, r5, #10
    4116:	e7e9      	b.n	40ec <hid_class_handle_req+0x54>
			if (dev_data->ops && dev_data->ops->set_report) {
    4118:	f856 3c08 	ldr.w	r3, [r6, #-8]
    411c:	2b00      	cmp	r3, #0
    411e:	d0e7      	beq.n	40f0 <hid_class_handle_req+0x58>
    4120:	685d      	ldr	r5, [r3, #4]
    4122:	e7ed      	b.n	4100 <hid_class_handle_req+0x68>
			LOG_ERR("Unhandled request 0x%02x", setup->bRequest);
    4124:	4b0a      	ldr	r3, [pc, #40]	; (4150 <hid_class_handle_req+0xb8>)
    4126:	4809      	ldr	r0, [pc, #36]	; (414c <hid_class_handle_req+0xb4>)
    4128:	466c      	mov	r4, sp
    412a:	b088      	sub	sp, #32
    412c:	466a      	mov	r2, sp
    412e:	e9c2 3505 	strd	r3, r5, [r2, #20]
    4132:	2303      	movs	r3, #3
    4134:	f842 3f10 	str.w	r3, [r2, #16]!
    4138:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    413c:	f007 fa3c 	bl	b5b8 <z_log_msg2_static_create.constprop.0>
    4140:	46a5      	mov	sp, r4
    4142:	e7d5      	b.n	40f0 <hid_class_handle_req+0x58>
    4144:	20000ccc 	.word	0x20000ccc
    4148:	0000d48e 	.word	0x0000d48e
    414c:	0000c810 	.word	0x0000c810
    4150:	0000d4b5 	.word	0x0000d4b5

00004154 <hid_custom_handle_req>:

static int hid_custom_handle_req(struct usb_setup_packet *setup,
				 int32_t *len, uint8_t **data)
{
    4154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	LOG_DBG("Standard request:"
		"bRequest 0x%02x, bmRequestType 0x%02x, len %d",
		setup->bRequest, setup->bmRequestType, setup->wLength);

	if (usb_reqtype_is_to_host(setup) &&
    4158:	f990 3000 	ldrsb.w	r3, [r0]
    415c:	2b00      	cmp	r3, #0
{
    415e:	af00      	add	r7, sp, #0
    4160:	4604      	mov	r4, r0
    4162:	460e      	mov	r6, r1
    4164:	4615      	mov	r5, r2
	if (usb_reqtype_is_to_host(setup) &&
    4166:	da20      	bge.n	41aa <hid_custom_handle_req+0x56>
	    setup->RequestType.recipient == USB_REQTYPE_RECIPIENT_INTERFACE &&
    4168:	8803      	ldrh	r3, [r0, #0]
    416a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
    416e:	b29b      	uxth	r3, r3
    4170:	f240 6201 	movw	r2, #1537	; 0x601
    4174:	4293      	cmp	r3, r2
    4176:	d118      	bne.n	41aa <hid_custom_handle_req+0x56>
	    setup->bRequest == USB_SREQ_GET_DESCRIPTOR) {
		uint8_t value = (uint8_t)(setup->wValue >> 8);
		uint8_t iface_num = (uint8_t)setup->wIndex;
    4178:	f890 9004 	ldrb.w	r9, [r0, #4]
		uint8_t value = (uint8_t)(setup->wValue >> 8);
    417c:	8843      	ldrh	r3, [r0, #2]
		struct hid_device_info *dev_data;
		struct usb_dev_data *common;
		const struct usb_cfg_data *cfg;
		const struct usb_hid_config *hid_desc;

		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
    417e:	481d      	ldr	r0, [pc, #116]	; (41f4 <hid_custom_handle_req+0xa0>)
    4180:	4649      	mov	r1, r9
		uint8_t value = (uint8_t)(setup->wValue >> 8);
    4182:	ea4f 2a13 	mov.w	sl, r3, lsr #8
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
    4186:	f007 f980 	bl	b48a <usb_get_dev_data_by_iface>
		if (common == NULL) {
    418a:	b988      	cbnz	r0, 41b0 <hid_custom_handle_req+0x5c>
			LOG_WRN("Device data not found for interface %u",
    418c:	4b1a      	ldr	r3, [pc, #104]	; (41f8 <hid_custom_handle_req+0xa4>)
    418e:	481b      	ldr	r0, [pc, #108]	; (41fc <hid_custom_handle_req+0xa8>)
    4190:	466c      	mov	r4, sp
    4192:	b088      	sub	sp, #32
    4194:	466a      	mov	r2, sp
    4196:	e9c2 3905 	strd	r3, r9, [r2, #20]
    419a:	2303      	movs	r3, #3
    419c:	f842 3f10 	str.w	r3, [r2, #16]!
    41a0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    41a4:	f007 fa08 	bl	b5b8 <z_log_msg2_static_create.constprop.0>
    41a8:	46a5      	mov	sp, r4
		}

		return 0;
	}

	return -EINVAL;
    41aa:	f06f 0015 	mvn.w	r0, #21
    41ae:	e007      	b.n	41c0 <hid_custom_handle_req+0x6c>
		switch (value) {
    41b0:	f1ba 0f21 	cmp.w	sl, #33	; 0x21
    41b4:	d007      	beq.n	41c6 <hid_custom_handle_req+0x72>
    41b6:	f1ba 0f22 	cmp.w	sl, #34	; 0x22
    41ba:	d011      	beq.n	41e0 <hid_custom_handle_req+0x8c>
    41bc:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    41c0:	46bd      	mov	sp, r7
    41c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cfg = common->dev->config;
    41c6:	6803      	ldr	r3, [r0, #0]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
    41c8:	88e1      	ldrh	r1, [r4, #6]
			hid_desc = cfg->interface_descriptor;
    41ca:	685b      	ldr	r3, [r3, #4]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
    41cc:	685b      	ldr	r3, [r3, #4]
    41ce:	f813 2f09 	ldrb.w	r2, [r3, #9]!
    41d2:	4291      	cmp	r1, r2
    41d4:	bf94      	ite	ls
    41d6:	6031      	strls	r1, [r6, #0]
    41d8:	6032      	strhi	r2, [r6, #0]
			*data = (uint8_t *)dev_data->report_desc;
    41da:	602b      	str	r3, [r5, #0]
		return 0;
    41dc:	2000      	movs	r0, #0
			break;
    41de:	e7ef      	b.n	41c0 <hid_custom_handle_req+0x6c>
			*len = MIN(setup->wLength, dev_data->report_size);
    41e0:	88e3      	ldrh	r3, [r4, #6]
    41e2:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    41e6:	429a      	cmp	r2, r3
    41e8:	bf94      	ite	ls
    41ea:	6032      	strls	r2, [r6, #0]
    41ec:	6033      	strhi	r3, [r6, #0]
			*data = (uint8_t *)dev_data->report_desc;
    41ee:	f850 3c10 	ldr.w	r3, [r0, #-16]
    41f2:	e7f2      	b.n	41da <hid_custom_handle_req+0x86>
    41f4:	20000ccc 	.word	0x20000ccc
    41f8:	0000d48e 	.word	0x0000d48e
    41fc:	0000c810 	.word	0x0000c810

00004200 <hid_int_in.part.0>:

static void hid_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
    4200:	b580      	push	{r7, lr}
	struct hid_device_info *dev_data;
	struct usb_dev_data *common;

	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
	if (common == NULL) {
		LOG_WRN("Device data not found for endpoint %u", ep);
    4202:	4b08      	ldr	r3, [pc, #32]	; (4224 <hid_int_in.part.0+0x24>)
static void hid_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
    4204:	af00      	add	r7, sp, #0
		LOG_WRN("Device data not found for endpoint %u", ep);
    4206:	b088      	sub	sp, #32
    4208:	466a      	mov	r2, sp
    420a:	e9c2 3005 	strd	r3, r0, [r2, #20]
    420e:	2303      	movs	r3, #3
    4210:	f842 3f10 	str.w	r3, [r2, #16]!
    4214:	4804      	ldr	r0, [pc, #16]	; (4228 <hid_int_in.part.0+0x28>)
    4216:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    421a:	f007 f9cd 	bl	b5b8 <z_log_msg2_static_create.constprop.0>
	    dev_data->ops->int_in_ready == NULL) {
		return;
	}

	dev_data->ops->int_in_ready(common->dev);
}
    421e:	46bd      	mov	sp, r7
    4220:	bd80      	pop	{r7, pc}
    4222:	bf00      	nop
    4224:	0000d4ce 	.word	0x0000d4ce
    4228:	0000c810 	.word	0x0000c810

0000422c <hid_int_in>:
{
    422c:	b570      	push	{r4, r5, r6, lr}
    422e:	4604      	mov	r4, r0
    4230:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
    4232:	4601      	mov	r1, r0
    4234:	480a      	ldr	r0, [pc, #40]	; (4260 <hid_int_in+0x34>)
    4236:	f007 f936 	bl	b4a6 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    423a:	b920      	cbnz	r0, 4246 <hid_int_in+0x1a>
    423c:	4620      	mov	r0, r4
}
    423e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4242:	f7ff bfdd 	b.w	4200 <hid_int_in.part.0>
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
    4246:	2d02      	cmp	r5, #2
    4248:	d108      	bne.n	425c <hid_int_in+0x30>
    424a:	f850 3c08 	ldr.w	r3, [r0, #-8]
    424e:	b12b      	cbz	r3, 425c <hid_int_in+0x30>
	    dev_data->ops->int_in_ready == NULL) {
    4250:	691b      	ldr	r3, [r3, #16]
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
    4252:	b11b      	cbz	r3, 425c <hid_int_in+0x30>
}
    4254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	dev_data->ops->int_in_ready(common->dev);
    4258:	6800      	ldr	r0, [r0, #0]
    425a:	4718      	bx	r3
}
    425c:	bd70      	pop	{r4, r5, r6, pc}
    425e:	bf00      	nop
    4260:	20000ccc 	.word	0x20000ccc

00004264 <usb_hid_register_device>:
	return 0;
}

void usb_hid_register_device(const struct device *dev, const uint8_t *desc,
			     size_t size, const struct hid_ops *ops)
{
    4264:	b510      	push	{r4, lr}
	struct hid_device_info *dev_data = dev->data;
    4266:	6904      	ldr	r4, [r0, #16]

	dev_data->report_desc = desc;
	dev_data->report_size = size;

	dev_data->ops = ops;
    4268:	60a3      	str	r3, [r4, #8]
	parent->next = child;
    426a:	2300      	movs	r3, #0
    426c:	6163      	str	r3, [r4, #20]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    426e:	4b07      	ldr	r3, [pc, #28]	; (428c <usb_hid_register_device+0x28>)
	dev_data->common.dev = dev;
    4270:	6120      	str	r0, [r4, #16]
	dev_data->report_size = size;
    4272:	e9c4 1200 	strd	r1, r2, [r4]
    4276:	6859      	ldr	r1, [r3, #4]

	sys_slist_append(&usb_hid_devlist, &dev_data->common.node);
    4278:	f104 0214 	add.w	r2, r4, #20
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    427c:	b911      	cbnz	r1, 4284 <usb_hid_register_device+0x20>
	list->head = node;
    427e:	e9c3 2200 	strd	r2, r2, [r3]

	LOG_DBG("Added dev_data %p dev %p to devlist %p", dev_data, dev,
		&usb_hid_devlist);
}
    4282:	bd10      	pop	{r4, pc}
	parent->next = child;
    4284:	600a      	str	r2, [r1, #0]
	list->tail = node;
    4286:	605a      	str	r2, [r3, #4]
    4288:	e7fb      	b.n	4282 <usb_hid_register_device+0x1e>
    428a:	bf00      	nop
    428c:	20000ccc 	.word	0x20000ccc

00004290 <hid_int_ep_write>:

int hid_int_ep_write(const struct device *dev, const uint8_t *data, uint32_t data_len,
		     uint32_t *bytes_ret)
{
    4290:	b530      	push	{r4, r5, lr}
	const struct usb_cfg_data *cfg = dev->config;
    4292:	6844      	ldr	r4, [r0, #4]
	struct hid_device_info *hid_dev_data = dev->data;
    4294:	6900      	ldr	r0, [r0, #16]

	if (hid_dev_data->configured && !hid_dev_data->suspended) {
    4296:	7b05      	ldrb	r5, [r0, #12]
{
    4298:	b087      	sub	sp, #28
	if (hid_dev_data->configured && !hid_dev_data->suspended) {
    429a:	b145      	cbz	r5, 42ae <hid_int_ep_write+0x1e>
    429c:	7b40      	ldrb	r0, [r0, #13]
    429e:	b930      	cbnz	r0, 42ae <hid_int_ep_write+0x1e>
		// LOG_WRN("Writing usb");
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
    42a0:	6a20      	ldr	r0, [r4, #32]
    42a2:	7900      	ldrb	r0, [r0, #4]
	} else {
		LOG_WRN("Device is not configured");
		return -EAGAIN;
	}

}
    42a4:	b007      	add	sp, #28
    42a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
    42aa:	f007 b8ca 	b.w	b442 <usb_write>
		LOG_WRN("Device is not configured");
    42ae:	4b07      	ldr	r3, [pc, #28]	; (42cc <hid_int_ep_write+0x3c>)
    42b0:	9305      	str	r3, [sp, #20]
    42b2:	4807      	ldr	r0, [pc, #28]	; (42d0 <hid_int_ep_write+0x40>)
    42b4:	2302      	movs	r3, #2
    42b6:	aa04      	add	r2, sp, #16
    42b8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    42bc:	9304      	str	r3, [sp, #16]
    42be:	f007 f97b 	bl	b5b8 <z_log_msg2_static_create.constprop.0>
}
    42c2:	f06f 000a 	mvn.w	r0, #10
    42c6:	b007      	add	sp, #28
    42c8:	bd30      	pop	{r4, r5, pc}
    42ca:	bf00      	nop
    42cc:	0000d4f4 	.word	0x0000d4f4
    42d0:	0000c810 	.word	0x0000c810

000042d4 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    42d4:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    42d8:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
    42da:	b242      	sxtb	r2, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    42dc:	d004      	beq.n	42e8 <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
    42de:	f010 0f78 	tst.w	r0, #120	; 0x78
    42e2:	d001      	beq.n	42e8 <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
    42e4:	2000      	movs	r0, #0
    42e6:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    42e8:	2a00      	cmp	r2, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
    42ea:	f000 030f 	and.w	r3, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
    42ee:	f000 0008 	and.w	r0, r0, #8
    42f2:	da05      	bge.n	4300 <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    42f4:	b958      	cbnz	r0, 430e <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
    42f6:	4808      	ldr	r0, [pc, #32]	; (4318 <endpoint_ctx+0x44>)
    42f8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    42fc:	304c      	adds	r0, #76	; 0x4c
    42fe:	4770      	bx	lr
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4300:	b938      	cbnz	r0, 4312 <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    4302:	4805      	ldr	r0, [pc, #20]	; (4318 <endpoint_ctx+0x44>)
    4304:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    4308:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
    430c:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    430e:	4803      	ldr	r0, [pc, #12]	; (431c <endpoint_ctx+0x48>)
    4310:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    4312:	4803      	ldr	r0, [pc, #12]	; (4320 <endpoint_ctx+0x4c>)
					    ep_num];
		}
	}

	return NULL;
}
    4314:	4770      	bx	lr
    4316:	bf00      	nop
    4318:	200012d4 	.word	0x200012d4
    431c:	20001420 	.word	0x20001420
    4320:	20001540 	.word	0x20001540

00004324 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    4324:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    4326:	4801      	ldr	r0, [pc, #4]	; (432c <usbd_evt_put+0x8>)
    4328:	f007 be5b 	b.w	bfe2 <k_queue_append>
    432c:	200001a4 	.word	0x200001a4

00004330 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    4330:	4901      	ldr	r1, [pc, #4]	; (4338 <usbd_work_schedule+0x8>)
    4332:	4802      	ldr	r0, [pc, #8]	; (433c <usbd_work_schedule+0xc>)
    4334:	f007 bea6 	b.w	c084 <k_work_submit_to_queue>
    4338:	200012fc 	.word	0x200012fc
    433c:	20000718 	.word	0x20000718

00004340 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
    4340:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    4342:	480b      	ldr	r0, [pc, #44]	; (4370 <usb_init+0x30>)
    4344:	f003 fc2a 	bl	7b9c <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    4348:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
    434a:	480a      	ldr	r0, [pc, #40]	; (4374 <usb_init+0x34>)
    434c:	f003 fc50 	bl	7bf0 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
    4350:	f04f 33ff 	mov.w	r3, #4294967295
    4354:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4358:	4907      	ldr	r1, [pc, #28]	; (4378 <usb_init+0x38>)
    435a:	4808      	ldr	r0, [pc, #32]	; (437c <usb_init+0x3c>)
    435c:	9400      	str	r4, [sp, #0]
    435e:	f005 fbf5 	bl	9b4c <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
    4362:	4907      	ldr	r1, [pc, #28]	; (4380 <usb_init+0x40>)
    4364:	4807      	ldr	r0, [pc, #28]	; (4384 <usb_init+0x44>)
    4366:	f007 fe84 	bl	c072 <k_work_init>

	return 0;
}
    436a:	4620      	mov	r0, r4
    436c:	b002      	add	sp, #8
    436e:	bd10      	pop	{r4, pc}
    4370:	0000d710 	.word	0x0000d710
    4374:	0000c958 	.word	0x0000c958
    4378:	20002120 	.word	0x20002120
    437c:	20000718 	.word	0x20000718
    4380:	00004771 	.word	0x00004771
    4384:	200012fc 	.word	0x200012fc

00004388 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    4388:	4802      	ldr	r0, [pc, #8]	; (4394 <usbd_evt_get+0xc>)
    438a:	2200      	movs	r2, #0
    438c:	2300      	movs	r3, #0
    438e:	f005 ba5b 	b.w	9848 <z_impl_k_queue_get>
    4392:	bf00      	nop
    4394:	200001a4 	.word	0x200001a4

00004398 <usbd_evt_flush>:
{
    4398:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    439a:	4c05      	ldr	r4, [pc, #20]	; (43b0 <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
    439c:	f7ff fff4 	bl	4388 <usbd_evt_get>
		if (ev) {
    43a0:	b120      	cbz	r0, 43ac <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    43a2:	1d01      	adds	r1, r0, #4
    43a4:	4620      	mov	r0, r4
    43a6:	f007 fd64 	bl	be72 <k_mem_slab_free>
	} while (ev != NULL);
    43aa:	e7f7      	b.n	439c <usbd_evt_flush+0x4>
}
    43ac:	bd10      	pop	{r4, pc}
    43ae:	bf00      	nop
    43b0:	20000150 	.word	0x20000150

000043b4 <usbd_evt_alloc>:
{
    43b4:	b510      	push	{r4, lr}
    43b6:	b088      	sub	sp, #32
	if (k_mem_slab_alloc(&fifo_elem_slab,
    43b8:	4818      	ldr	r0, [pc, #96]	; (441c <usbd_evt_alloc+0x68>)
    43ba:	2200      	movs	r2, #0
    43bc:	2300      	movs	r3, #0
    43be:	a901      	add	r1, sp, #4
    43c0:	f005 f884 	bl	94cc <k_mem_slab_alloc>
    43c4:	b330      	cbz	r0, 4414 <usbd_evt_alloc+0x60>
		LOG_ERR("USBD event allocation failed!");
    43c6:	4b16      	ldr	r3, [pc, #88]	; (4420 <usbd_evt_alloc+0x6c>)
    43c8:	4816      	ldr	r0, [pc, #88]	; (4424 <usbd_evt_alloc+0x70>)
    43ca:	9307      	str	r3, [sp, #28]
    43cc:	aa06      	add	r2, sp, #24
    43ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    43d2:	2402      	movs	r4, #2
    43d4:	9406      	str	r4, [sp, #24]
    43d6:	f007 f90f 	bl	b5f8 <z_log_msg2_static_create.constprop.0>
		usbd_evt_flush();
    43da:	f7ff ffdd 	bl	4398 <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    43de:	480f      	ldr	r0, [pc, #60]	; (441c <usbd_evt_alloc+0x68>)
    43e0:	2200      	movs	r2, #0
    43e2:	2300      	movs	r3, #0
    43e4:	a901      	add	r1, sp, #4
    43e6:	f005 f871 	bl	94cc <k_mem_slab_alloc>
    43ea:	b150      	cbz	r0, 4402 <usbd_evt_alloc+0x4e>
			LOG_ERR("USBD event memory corrupted");
    43ec:	4b0e      	ldr	r3, [pc, #56]	; (4428 <usbd_evt_alloc+0x74>)
    43ee:	480d      	ldr	r0, [pc, #52]	; (4424 <usbd_evt_alloc+0x70>)
    43f0:	aa06      	add	r2, sp, #24
    43f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    43f6:	e9cd 4306 	strd	r4, r3, [sp, #24]
    43fa:	f007 f8fd 	bl	b5f8 <z_log_msg2_static_create.constprop.0>
			return NULL;
    43fe:	2000      	movs	r0, #0
    4400:	e00a      	b.n	4418 <usbd_evt_alloc+0x64>
		ev = (struct usbd_event *)block.data;
    4402:	9801      	ldr	r0, [sp, #4]
		ev->evt_type = USBD_EVT_REINIT;
    4404:	2304      	movs	r3, #4
		ev->block = block;
    4406:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    4408:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    440a:	f7ff ff8b 	bl	4324 <usbd_evt_put>
		usbd_work_schedule();
    440e:	f7ff ff8f 	bl	4330 <usbd_work_schedule>
		return NULL;
    4412:	e7f4      	b.n	43fe <usbd_evt_alloc+0x4a>
	ev = (struct usbd_event *)block.data;
    4414:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    4416:	6040      	str	r0, [r0, #4]
}
    4418:	b008      	add	sp, #32
    441a:	bd10      	pop	{r4, pc}
    441c:	20000150 	.word	0x20000150
    4420:	0000d515 	.word	0x0000d515
    4424:	0000c818 	.word	0x0000c818
    4428:	0000d533 	.word	0x0000d533

0000442c <usbd_event_transfer_data>:
{
    442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		endpoint_ctx(p_event->data.eptransfer.ep);
    442e:	7881      	ldrb	r1, [r0, #2]
{
    4430:	4606      	mov	r6, r0
    4432:	af00      	add	r7, sp, #0
		endpoint_ctx(p_event->data.eptransfer.ep);
    4434:	4608      	mov	r0, r1
    4436:	f7ff ff4d 	bl	42d4 <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    443a:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
    443c:	78f4      	ldrb	r4, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
    443e:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4440:	d523      	bpl.n	448a <usbd_event_transfer_data+0x5e>
		switch (p_event->data.eptransfer.status) {
    4442:	b194      	cbz	r4, 446a <usbd_event_transfer_data+0x3e>
    4444:	2c03      	cmp	r4, #3
    4446:	d01e      	beq.n	4486 <usbd_event_transfer_data+0x5a>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    4448:	4b2a      	ldr	r3, [pc, #168]	; (44f4 <usbd_event_transfer_data+0xc8>)
    444a:	482b      	ldr	r0, [pc, #172]	; (44f8 <usbd_event_transfer_data+0xcc>)
    444c:	466d      	mov	r5, sp
    444e:	b088      	sub	sp, #32
    4450:	466a      	mov	r2, sp
    4452:	e9c2 3405 	strd	r3, r4, [r2, #20]
    4456:	2304      	movs	r3, #4
    4458:	61d1      	str	r1, [r2, #28]
    445a:	f842 3f10 	str.w	r3, [r2, #16]!
    445e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    4462:	f007 f8c9 	bl	b5f8 <z_log_msg2_static_create.constprop.0>
    4466:	46ad      	mov	sp, r5
    4468:	e00d      	b.n	4486 <usbd_event_transfer_data+0x5a>
			struct usbd_event *ev = usbd_evt_alloc();
    446a:	f7ff ffa3 	bl	43b4 <usbd_evt_alloc>
			if (!ev) {
    446e:	4603      	mov	r3, r0
    4470:	b148      	cbz	r0, 4486 <usbd_event_transfer_data+0x5a>
			ev->evt_type = USBD_EVT_EP;
    4472:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    4474:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    4476:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    4478:	2203      	movs	r2, #3
    447a:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    447c:	609d      	str	r5, [r3, #8]
			usbd_evt_put(ev);
    447e:	f7ff ff51 	bl	4324 <usbd_evt_put>
			usbd_work_schedule();
    4482:	f7ff ff55 	bl	4330 <usbd_work_schedule>
}
    4486:	46bd      	mov	sp, r7
    4488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (p_event->data.eptransfer.status) {
    448a:	b154      	cbz	r4, 44a2 <usbd_event_transfer_data+0x76>
    448c:	2c01      	cmp	r4, #1
    448e:	d1db      	bne.n	4448 <usbd_event_transfer_data+0x1c>
			struct usbd_event *ev = usbd_evt_alloc();
    4490:	f7ff ff90 	bl	43b4 <usbd_evt_alloc>
			if (!ev) {
    4494:	4603      	mov	r3, r0
    4496:	2800      	cmp	r0, #0
    4498:	d0f5      	beq.n	4486 <usbd_event_transfer_data+0x5a>
			ep_ctx->read_pending = true;
    449a:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    449c:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    449e:	7304      	strb	r4, [r0, #12]
    44a0:	e7ec      	b.n	447c <usbd_event_transfer_data+0x50>
			struct usbd_event *ev = usbd_evt_alloc();
    44a2:	f7ff ff87 	bl	43b4 <usbd_evt_alloc>
			if (!ev) {
    44a6:	2800      	cmp	r0, #0
    44a8:	d0ed      	beq.n	4486 <usbd_event_transfer_data+0x5a>
				p_event->data.eptransfer.ep);
    44aa:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    44ac:	4b13      	ldr	r3, [pc, #76]	; (44fc <usbd_event_transfer_data+0xd0>)
    44ae:	f012 0f80 	tst.w	r2, #128	; 0x80
    44b2:	f002 0108 	and.w	r1, r2, #8
    44b6:	d011      	beq.n	44dc <usbd_event_transfer_data+0xb0>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    44b8:	b141      	cbz	r1, 44cc <usbd_event_transfer_data+0xa0>
        {
            ret = p_reg->ISOIN.AMOUNT;
    44ba:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    44be:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    44c0:	2301      	movs	r3, #1
    44c2:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    44c4:	2302      	movs	r3, #2
    44c6:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    44c8:	6085      	str	r5, [r0, #8]
    44ca:	e7d8      	b.n	447e <usbd_event_transfer_data+0x52>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    44cc:	f002 020f 	and.w	r2, r2, #15
    44d0:	2114      	movs	r1, #20
    44d2:	fb01 3302 	mla	r3, r1, r2, r3
    44d6:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    44da:	e7f0      	b.n	44be <usbd_event_transfer_data+0x92>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    44dc:	b111      	cbz	r1, 44e4 <usbd_event_transfer_data+0xb8>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    44de:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    44e2:	e7ec      	b.n	44be <usbd_event_transfer_data+0x92>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    44e4:	f002 020f 	and.w	r2, r2, #15
    44e8:	2114      	movs	r1, #20
    44ea:	fb01 3302 	mla	r3, r1, r2, r3
    44ee:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    44f2:	e7e4      	b.n	44be <usbd_event_transfer_data+0x92>
    44f4:	0000d54f 	.word	0x0000d54f
    44f8:	0000c818 	.word	0x0000c818
    44fc:	40027000 	.word	0x40027000

00004500 <usb_dc_power_event_handler>:
{
    4500:	b598      	push	{r3, r4, r7, lr}
    4502:	2802      	cmp	r0, #2
    4504:	af00      	add	r7, sp, #0
    4506:	d811      	bhi.n	452c <usb_dc_power_event_handler+0x2c>
    4508:	4b10      	ldr	r3, [pc, #64]	; (454c <usb_dc_power_event_handler+0x4c>)
    450a:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    450c:	f7ff ff52 	bl	43b4 <usbd_evt_alloc>
	if (!ev) {
    4510:	b150      	cbz	r0, 4528 <usb_dc_power_event_handler+0x28>
	ev->evt_type = USBD_EVT_POWER;
    4512:	2200      	movs	r2, #0
    4514:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
    4516:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
    4518:	f7ff ff04 	bl	4324 <usbd_evt_put>
	if (usbd_ctx.attached) {
    451c:	4b0c      	ldr	r3, [pc, #48]	; (4550 <usb_dc_power_event_handler+0x50>)
    451e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4522:	b10b      	cbz	r3, 4528 <usb_dc_power_event_handler+0x28>
		usbd_work_schedule();
    4524:	f7ff ff04 	bl	4330 <usbd_work_schedule>
}
    4528:	46bd      	mov	sp, r7
    452a:	bd98      	pop	{r3, r4, r7, pc}
		LOG_ERR("Unknown USB power event %d", event);
    452c:	4b09      	ldr	r3, [pc, #36]	; (4554 <usb_dc_power_event_handler+0x54>)
    452e:	466c      	mov	r4, sp
    4530:	b088      	sub	sp, #32
    4532:	466a      	mov	r2, sp
	switch (event) {
    4534:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Unknown USB power event %d", event);
    4538:	2303      	movs	r3, #3
    453a:	f842 3f10 	str.w	r3, [r2, #16]!
    453e:	4806      	ldr	r0, [pc, #24]	; (4558 <usb_dc_power_event_handler+0x58>)
    4540:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4544:	f007 f858 	bl	b5f8 <z_log_msg2_static_create.constprop.0>
    4548:	46a5      	mov	sp, r4
    454a:	e7ed      	b.n	4528 <usb_dc_power_event_handler+0x28>
    454c:	0000d70d 	.word	0x0000d70d
    4550:	200012d4 	.word	0x200012d4
    4554:	0000d57b 	.word	0x0000d57b
    4558:	0000c818 	.word	0x0000c818

0000455c <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    455c:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    455e:	490f      	ldr	r1, [pc, #60]	; (459c <hfxo_stop.constprop.0.isra.0+0x40>)
    4560:	f3bf 8f5b 	dmb	ish
    4564:	f101 0320 	add.w	r3, r1, #32
    4568:	2200      	movs	r2, #0
    456a:	e853 0f00 	ldrex	r0, [r3]
    456e:	2801      	cmp	r0, #1
    4570:	d103      	bne.n	457a <hfxo_stop.constprop.0.isra.0+0x1e>
    4572:	e843 2400 	strex	r4, r2, [r3]
    4576:	2c00      	cmp	r4, #0
    4578:	d1f7      	bne.n	456a <hfxo_stop.constprop.0.isra.0+0xe>
    457a:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    457e:	d10b      	bne.n	4598 <hfxo_stop.constprop.0.isra.0+0x3c>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    4580:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    4582:	310c      	adds	r1, #12
    4584:	4620      	mov	r0, r4
    4586:	f006 fa4e 	bl	aa26 <onoff_cancel>

	if (rv == -EALREADY) {
    458a:	3078      	adds	r0, #120	; 0x78
    458c:	d104      	bne.n	4598 <hfxo_stop.constprop.0.isra.0+0x3c>
		rv = onoff_release(mgr);
    458e:	4620      	mov	r0, r4
}
    4590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4594:	f006 ba22 	b.w	a9dc <onoff_release>
    4598:	bd10      	pop	{r4, pc}
    459a:	bf00      	nop
    459c:	200012d4 	.word	0x200012d4

000045a0 <usbd_event_handler>:
{
    45a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    45a2:	b089      	sub	sp, #36	; 0x24
    45a4:	4606      	mov	r6, r0
    45a6:	af00      	add	r7, sp, #0
	struct usbd_event evt = {0};
    45a8:	2214      	movs	r2, #20
    45aa:	2100      	movs	r1, #0
    45ac:	f107 000c 	add.w	r0, r7, #12
    45b0:	f006 ffd2 	bl	b558 <memset>
	switch (p_event->type) {
    45b4:	7833      	ldrb	r3, [r6, #0]
    45b6:	3b01      	subs	r3, #1
    45b8:	2b05      	cmp	r3, #5
    45ba:	d820      	bhi.n	45fe <usbd_event_handler+0x5e>
    45bc:	e8df f003 	tbb	[pc, r3]
    45c0:	13130397 	.word	0x13130397
    45c4:	1589      	.short	0x1589
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    45c6:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_RESUMED;
    45c8:	753b      	strb	r3, [r7, #20]
		evt.evt_type = USBD_EVT_POWER;
    45ca:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
    45cc:	f7ff fef2 	bl	43b4 <usbd_evt_alloc>
		if (!ev) {
    45d0:	4603      	mov	r3, r0
    45d2:	b1a0      	cbz	r0, 45fe <usbd_event_handler+0x5e>
		ev->evt_type = evt.evt_type;
    45d4:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    45d6:	f100 0208 	add.w	r2, r0, #8
    45da:	e9d7 0105 	ldrd	r0, r1, [r7, #20]
    45de:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    45e2:	4618      	mov	r0, r3
    45e4:	e030      	b.n	4648 <usbd_event_handler+0xa8>
		evt.evt.pwr_evt.state = USBD_RESUMED;
    45e6:	2304      	movs	r3, #4
    45e8:	e7ee      	b.n	45c8 <usbd_event_handler+0x28>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    45ea:	78b1      	ldrb	r1, [r6, #2]
    45ec:	4608      	mov	r0, r1
    45ee:	f7ff fe71 	bl	42d4 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    45f2:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    45f4:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
    45f6:	b12b      	cbz	r3, 4604 <usbd_event_handler+0x64>
    45f8:	3b01      	subs	r3, #1
    45fa:	2b02      	cmp	r3, #2
    45fc:	d965      	bls.n	46ca <usbd_event_handler+0x12a>
}
    45fe:	3724      	adds	r7, #36	; 0x24
    4600:	46bd      	mov	sp, r7
    4602:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4604:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
    4606:	78f4      	ldrb	r4, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4608:	d523      	bpl.n	4652 <usbd_event_handler+0xb2>
		switch (p_event->data.eptransfer.status) {
    460a:	b194      	cbz	r4, 4632 <usbd_event_handler+0x92>
    460c:	2c03      	cmp	r4, #3
    460e:	d0f6      	beq.n	45fe <usbd_event_handler+0x5e>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    4610:	4b38      	ldr	r3, [pc, #224]	; (46f4 <usbd_event_handler+0x154>)
    4612:	4839      	ldr	r0, [pc, #228]	; (46f8 <usbd_event_handler+0x158>)
    4614:	466d      	mov	r5, sp
    4616:	b088      	sub	sp, #32
    4618:	466a      	mov	r2, sp
    461a:	e9c2 3405 	strd	r3, r4, [r2, #20]
    461e:	2304      	movs	r3, #4
    4620:	61d1      	str	r1, [r2, #28]
    4622:	f842 3f10 	str.w	r3, [r2, #16]!
    4626:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    462a:	f006 ffe5 	bl	b5f8 <z_log_msg2_static_create.constprop.0>
    462e:	46ad      	mov	sp, r5
    4630:	e7e5      	b.n	45fe <usbd_event_handler+0x5e>
			struct usbd_event *ev = usbd_evt_alloc();
    4632:	f7ff febf 	bl	43b4 <usbd_evt_alloc>
			if (!ev) {
    4636:	4603      	mov	r3, r0
    4638:	2800      	cmp	r0, #0
    463a:	d0e0      	beq.n	45fe <usbd_event_handler+0x5e>
			ev->evt_type = USBD_EVT_EP;
    463c:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    463e:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    4640:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    4642:	2203      	movs	r2, #3
    4644:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    4646:	609d      	str	r5, [r3, #8]
		usbd_evt_put(ev);
    4648:	f7ff fe6c 	bl	4324 <usbd_evt_put>
		usbd_work_schedule();
    464c:	f7ff fe70 	bl	4330 <usbd_work_schedule>
    4650:	e7d5      	b.n	45fe <usbd_event_handler+0x5e>
		switch (p_event->data.eptransfer.status) {
    4652:	b154      	cbz	r4, 466a <usbd_event_handler+0xca>
    4654:	2c01      	cmp	r4, #1
    4656:	d1db      	bne.n	4610 <usbd_event_handler+0x70>
			struct usbd_event *ev = usbd_evt_alloc();
    4658:	f7ff feac 	bl	43b4 <usbd_evt_alloc>
			if (!ev) {
    465c:	4603      	mov	r3, r0
    465e:	2800      	cmp	r0, #0
    4660:	d0cd      	beq.n	45fe <usbd_event_handler+0x5e>
			ep_ctx->read_pending = true;
    4662:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    4664:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4666:	7304      	strb	r4, [r0, #12]
    4668:	e7ed      	b.n	4646 <usbd_event_handler+0xa6>
			struct usbd_event *ev = usbd_evt_alloc();
    466a:	f7ff fea3 	bl	43b4 <usbd_evt_alloc>
			if (!ev) {
    466e:	4604      	mov	r4, r0
    4670:	2800      	cmp	r0, #0
    4672:	d0c4      	beq.n	45fe <usbd_event_handler+0x5e>
			ev->evt_type = USBD_EVT_EP;
    4674:	2301      	movs	r3, #1
    4676:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    4678:	2302      	movs	r3, #2
    467a:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    467c:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    467e:	f105 010c 	add.w	r1, r5, #12
    4682:	78b0      	ldrb	r0, [r6, #2]
    4684:	f007 fb63 	bl	bd4e <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    4688:	b170      	cbz	r0, 46a8 <usbd_event_handler+0x108>
				LOG_ERR("_ep_status_get failed! Code: %d",
    468a:	4b1c      	ldr	r3, [pc, #112]	; (46fc <usbd_event_handler+0x15c>)
    468c:	466e      	mov	r6, sp
    468e:	b088      	sub	sp, #32
    4690:	466a      	mov	r2, sp
    4692:	e9c2 3005 	strd	r3, r0, [r2, #20]
    4696:	2303      	movs	r3, #3
    4698:	f842 3f10 	str.w	r3, [r2, #16]!
    469c:	4816      	ldr	r0, [pc, #88]	; (46f8 <usbd_event_handler+0x158>)
    469e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    46a2:	f006 ffa9 	bl	b5f8 <z_log_msg2_static_create.constprop.0>
    46a6:	46b5      	mov	sp, r6
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    46a8:	4a15      	ldr	r2, [pc, #84]	; (4700 <usbd_event_handler+0x160>)
    46aa:	68e9      	ldr	r1, [r5, #12]
    46ac:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    46b0:	428b      	cmp	r3, r1
    46b2:	d906      	bls.n	46c2 <usbd_event_handler+0x122>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    46b4:	1a5b      	subs	r3, r3, r1
    46b6:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    46ba:	f004 fa1b 	bl	8af4 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    46be:	4620      	mov	r0, r4
    46c0:	e7c2      	b.n	4648 <usbd_event_handler+0xa8>
				ctx->ctrl_read_len = 0U;
    46c2:	2300      	movs	r3, #0
    46c4:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
    46c8:	e7f9      	b.n	46be <usbd_event_handler+0x11e>
			usbd_event_transfer_data(p_event);
    46ca:	4630      	mov	r0, r6
    46cc:	f7ff feae 	bl	442c <usbd_event_transfer_data>
	if (put_evt) {
    46d0:	e795      	b.n	45fe <usbd_event_handler+0x5e>
		nrfx_usbd_setup_get(&drv_setup);
    46d2:	1d38      	adds	r0, r7, #4
    46d4:	f004 f9e8 	bl	8aa8 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    46d8:	797b      	ldrb	r3, [r7, #5]
    46da:	2b05      	cmp	r3, #5
    46dc:	d103      	bne.n	46e6 <usbd_event_handler+0x146>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    46de:	793b      	ldrb	r3, [r7, #4]
    46e0:	f013 0f60 	tst.w	r3, #96	; 0x60
    46e4:	d08b      	beq.n	45fe <usbd_event_handler+0x5e>
			evt.evt.ep_evt.ep = ep_ctx;
    46e6:	4b07      	ldr	r3, [pc, #28]	; (4704 <usbd_event_handler+0x164>)
    46e8:	617b      	str	r3, [r7, #20]
			evt.evt_type = USBD_EVT_EP;
    46ea:	2401      	movs	r4, #1
    46ec:	e76e      	b.n	45cc <usbd_event_handler+0x2c>
	switch (p_event->type) {
    46ee:	2402      	movs	r4, #2
    46f0:	e76c      	b.n	45cc <usbd_event_handler+0x2c>
    46f2:	bf00      	nop
    46f4:	0000d54f 	.word	0x0000d54f
    46f8:	0000c818 	.word	0x0000c818
    46fc:	0000d596 	.word	0x0000d596
    4700:	200012d4 	.word	0x200012d4
    4704:	20001440 	.word	0x20001440

00004708 <eps_ctx_init>:
{
    4708:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    470a:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    470c:	f064 007f 	orn	r0, r4, #127	; 0x7f
    4710:	b2c0      	uxtb	r0, r0
    4712:	f7ff fddf 	bl	42d4 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4716:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    4718:	f006 ff5b 	bl	b5d2 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    471c:	2c08      	cmp	r4, #8
    471e:	d1f5      	bne.n	470c <eps_ctx_init+0x4>
    4720:	4d0f      	ldr	r5, [pc, #60]	; (4760 <eps_ctx_init+0x58>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4722:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    4724:	b2e0      	uxtb	r0, r4
    4726:	f7ff fdd5 	bl	42d4 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    472a:	6903      	ldr	r3, [r0, #16]
    472c:	b903      	cbnz	r3, 4730 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    472e:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4730:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    4732:	f006 ff4e 	bl	b5d2 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4736:	2c08      	cmp	r4, #8
    4738:	f105 0540 	add.w	r5, r5, #64	; 0x40
    473c:	d1f2      	bne.n	4724 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    473e:	4c09      	ldr	r4, [pc, #36]	; (4764 <eps_ctx_init+0x5c>)
    4740:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    4744:	f006 ff45 	bl	b5d2 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    4748:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
    474c:	b913      	cbnz	r3, 4754 <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    474e:	4b06      	ldr	r3, [pc, #24]	; (4768 <eps_ctx_init+0x60>)
    4750:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    4754:	4805      	ldr	r0, [pc, #20]	; (476c <eps_ctx_init+0x64>)
    4756:	f006 ff3c 	bl	b5d2 <ep_ctx_reset>
}
    475a:	2000      	movs	r0, #0
    475c:	bd38      	pop	{r3, r4, r5, pc}
    475e:	bf00      	nop
    4760:	200010d4 	.word	0x200010d4
    4764:	200012d4 	.word	0x200012d4
    4768:	20000cd4 	.word	0x20000cd4
    476c:	20001540 	.word	0x20001540

00004770 <usbd_work_handler>:
{
    4770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->ready;
    4774:	4caf      	ldr	r4, [pc, #700]	; (4a34 <usbd_work_handler+0x2c4>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4776:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 4a38 <usbd_work_handler+0x2c8>
{
    477a:	b086      	sub	sp, #24
    477c:	4680      	mov	r8, r0
    477e:	af00      	add	r7, sp, #0
	while ((ev = usbd_evt_get()) != NULL) {
    4780:	f7ff fe02 	bl	4388 <usbd_evt_get>
    4784:	4606      	mov	r6, r0
    4786:	b918      	cbnz	r0, 4790 <usbd_work_handler+0x20>
}
    4788:	3718      	adds	r7, #24
    478a:	46bd      	mov	sp, r7
    478c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return get_usbd_ctx()->ready;
    4790:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    4794:	7c33      	ldrb	r3, [r6, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4796:	f106 0a04 	add.w	sl, r6, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    479a:	b93a      	cbnz	r2, 47ac <usbd_work_handler+0x3c>
    479c:	2b00      	cmp	r3, #0
    479e:	f000 80ad 	beq.w	48fc <usbd_work_handler+0x18c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    47a2:	4651      	mov	r1, sl
    47a4:	4648      	mov	r0, r9
    47a6:	f007 fb64 	bl	be72 <k_mem_slab_free>
}
    47aa:	e7e9      	b.n	4780 <usbd_work_handler+0x10>
		switch (ev->evt_type) {
    47ac:	2b04      	cmp	r3, #4
    47ae:	f200 8197 	bhi.w	4ae0 <usbd_work_handler+0x370>
    47b2:	e8df f013 	tbh	[pc, r3, lsl #1]
    47b6:	00a3      	.short	0x00a3
    47b8:	01280005 	.word	0x01280005
    47bc:	017a0153 	.word	0x017a0153
			if (!ctx->attached) {
    47c0:	f818 3c04 	ldrb.w	r3, [r8, #-4]
    47c4:	b983      	cbnz	r3, 47e8 <usbd_work_handler+0x78>
				LOG_ERR("not attached, EP 0x%02x event dropped",
    47c6:	68b3      	ldr	r3, [r6, #8]
    47c8:	499c      	ldr	r1, [pc, #624]	; (4a3c <usbd_work_handler+0x2cc>)
    47ca:	7a5b      	ldrb	r3, [r3, #9]
    47cc:	489c      	ldr	r0, [pc, #624]	; (4a40 <usbd_work_handler+0x2d0>)
    47ce:	466d      	mov	r5, sp
    47d0:	b088      	sub	sp, #32
    47d2:	466a      	mov	r2, sp
    47d4:	e9c2 1305 	strd	r1, r3, [r2, #20]
    47d8:	2303      	movs	r3, #3
    47da:	f842 3f10 	str.w	r3, [r2, #16]!
    47de:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    47e2:	f006 ff09 	bl	b5f8 <z_log_msg2_static_create.constprop.0>
    47e6:	46ad      	mov	sp, r5
	switch (ep_evt->evt_type) {
    47e8:	7b33      	ldrb	r3, [r6, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    47ea:	68b5      	ldr	r5, [r6, #8]
	switch (ep_evt->evt_type) {
    47ec:	2b03      	cmp	r3, #3
    47ee:	d8d8      	bhi.n	47a2 <usbd_work_handler+0x32>
    47f0:	e8df f003 	tbb	[pc, r3]
    47f4:	716c3d02 	.word	0x716c3d02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    47f8:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    47fa:	2208      	movs	r2, #8
    47fc:	2100      	movs	r1, #0
    47fe:	4630      	mov	r0, r6
    4800:	f006 feaa 	bl	b558 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    4804:	4b8f      	ldr	r3, [pc, #572]	; (4a44 <usbd_work_handler+0x2d4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4806:	4890      	ldr	r0, [pc, #576]	; (4a48 <usbd_work_handler+0x2d8>)
    4808:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    480c:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    480e:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    4812:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    4814:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    4818:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    481c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    4820:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    4822:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    4826:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    482a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    482e:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    4830:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    4834:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    4838:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    483c:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    483e:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4840:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    4842:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4844:	f006 fe7d 	bl	b542 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    4848:	682b      	ldr	r3, [r5, #0]
    484a:	7a68      	ldrb	r0, [r5, #9]
    484c:	2100      	movs	r1, #0
    484e:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    4850:	f996 3000 	ldrsb.w	r3, [r6]
    4854:	2b00      	cmp	r3, #0
    4856:	db06      	blt.n	4866 <usbd_work_handler+0xf6>
    4858:	88f3      	ldrh	r3, [r6, #6]
    485a:	b123      	cbz	r3, 4866 <usbd_work_handler+0xf6>
		ctx->ctrl_read_len = usbd_setup->wLength;
    485c:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    4860:	f004 f948 	bl	8af4 <nrfx_usbd_setup_data_clear>
    4864:	e79d      	b.n	47a2 <usbd_work_handler+0x32>
		ctx->ctrl_read_len = 0U;
    4866:	2300      	movs	r3, #0
    4868:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    486c:	e799      	b.n	47a2 <usbd_work_handler+0x32>
	if (!ep_ctx->read_pending) {
    486e:	7f6b      	ldrb	r3, [r5, #29]
    4870:	2b00      	cmp	r3, #0
    4872:	d096      	beq.n	47a2 <usbd_work_handler+0x32>
	if (!ep_ctx->read_complete) {
    4874:	7f2b      	ldrb	r3, [r5, #28]
    4876:	2b00      	cmp	r3, #0
    4878:	d093      	beq.n	47a2 <usbd_work_handler+0x32>
	ep_ctx->read_pending = false;
    487a:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    487c:	4873      	ldr	r0, [pc, #460]	; (4a4c <usbd_work_handler+0x2dc>)
	ep_ctx->read_pending = false;
    487e:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4880:	f04f 32ff 	mov.w	r2, #4294967295
    4884:	f04f 33ff 	mov.w	r3, #4294967295
	ep_ctx->read_complete = false;
    4888:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    488a:	f006 feb8 	bl	b5fe <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    488e:	696b      	ldr	r3, [r5, #20]
    4890:	603b      	str	r3, [r7, #0]
    4892:	686b      	ldr	r3, [r5, #4]
    4894:	e9c7 3601 	strd	r3, r6, [r7, #4]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    4898:	4639      	mov	r1, r7
    489a:	7a68      	ldrb	r0, [r5, #9]
    489c:	f003 ff3a 	bl	8714 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    48a0:	4b6b      	ldr	r3, [pc, #428]	; (4a50 <usbd_work_handler+0x2e0>)
    48a2:	4298      	cmp	r0, r3
    48a4:	d00e      	beq.n	48c4 <usbd_work_handler+0x154>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    48a6:	4b6b      	ldr	r3, [pc, #428]	; (4a54 <usbd_work_handler+0x2e4>)
    48a8:	466d      	mov	r5, sp
    48aa:	b088      	sub	sp, #32
    48ac:	466a      	mov	r2, sp
    48ae:	e9c2 3005 	strd	r3, r0, [r2, #20]
    48b2:	2303      	movs	r3, #3
    48b4:	f842 3f10 	str.w	r3, [r2, #16]!
    48b8:	4861      	ldr	r0, [pc, #388]	; (4a40 <usbd_work_handler+0x2d0>)
    48ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    48be:	f006 fe9b 	bl	b5f8 <z_log_msg2_static_create.constprop.0>
    48c2:	46ad      	mov	sp, r5
	k_mutex_unlock(&ctx->drv_lock);
    48c4:	4861      	ldr	r0, [pc, #388]	; (4a4c <usbd_work_handler+0x2dc>)
    48c6:	f006 fe9c 	bl	b602 <k_mutex_unlock.isra.0>
    48ca:	e76a      	b.n	47a2 <usbd_work_handler+0x32>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    48cc:	682b      	ldr	r3, [r5, #0]
    48ce:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    48d0:	7a68      	ldrb	r0, [r5, #9]
    48d2:	4798      	blx	r3
		break;
    48d4:	e765      	b.n	47a2 <usbd_work_handler+0x32>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    48d6:	7aab      	ldrb	r3, [r5, #10]
    48d8:	b96b      	cbnz	r3, 48f6 <usbd_work_handler+0x186>
    48da:	7feb      	ldrb	r3, [r5, #31]
    48dc:	b95b      	cbnz	r3, 48f6 <usbd_work_handler+0x186>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    48de:	485b      	ldr	r0, [pc, #364]	; (4a4c <usbd_work_handler+0x2dc>)
    48e0:	f04f 32ff 	mov.w	r2, #4294967295
    48e4:	f04f 33ff 	mov.w	r3, #4294967295
    48e8:	f006 fe89 	bl	b5fe <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    48ec:	f004 f936 	bl	8b5c <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    48f0:	4856      	ldr	r0, [pc, #344]	; (4a4c <usbd_work_handler+0x2dc>)
    48f2:	f006 fe86 	bl	b602 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    48f6:	682b      	ldr	r3, [r5, #0]
    48f8:	2102      	movs	r1, #2
    48fa:	e7e9      	b.n	48d0 <usbd_work_handler+0x160>
	switch (pwr_evt->state) {
    48fc:	7a33      	ldrb	r3, [r6, #8]
    48fe:	2b04      	cmp	r3, #4
    4900:	f63f af4f 	bhi.w	47a2 <usbd_work_handler+0x32>
    4904:	e8df f003 	tbb	[pc, r3]
    4908:	6925035b 	.word	0x6925035b
    490c:	75          	.byte	0x75
    490d:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    490e:	f003 feb1 	bl	8674 <nrfx_usbd_is_enabled>
    4912:	4605      	mov	r5, r0
    4914:	2800      	cmp	r0, #0
    4916:	f47f af44 	bne.w	47a2 <usbd_work_handler+0x32>
			nrfx_usbd_enable();
    491a:	f003 fe45 	bl	85a8 <nrfx_usbd_enable>
    491e:	f3bf 8f5b 	dmb	ish
    4922:	494d      	ldr	r1, [pc, #308]	; (4a58 <usbd_work_handler+0x2e8>)
    4924:	2301      	movs	r3, #1
    4926:	e851 2f00 	ldrex	r2, [r1]
    492a:	2a00      	cmp	r2, #0
    492c:	d103      	bne.n	4936 <usbd_work_handler+0x1c6>
    492e:	e841 3000 	strex	r0, r3, [r1]
    4932:	2800      	cmp	r0, #0
    4934:	d1f7      	bne.n	4926 <usbd_work_handler+0x1b6>
    4936:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    493a:	f47f af32 	bne.w	47a2 <usbd_work_handler+0x32>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    493e:	f841 5c10 	str.w	r5, [r1, #-16]
    4942:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    4946:	69e0      	ldr	r0, [r4, #28]
    4948:	6163      	str	r3, [r4, #20]
    494a:	3914      	subs	r1, #20
    494c:	f005 fffd 	bl	a94a <onoff_request>
    4950:	e727      	b.n	47a2 <usbd_work_handler+0x32>
	switch (pwr_evt->state) {
    4952:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    4954:	f065 007f 	orn	r0, r5, #127	; 0x7f
    4958:	b2c0      	uxtb	r0, r0
    495a:	f7ff fcbb 	bl	42d4 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    495e:	7a03      	ldrb	r3, [r0, #8]
    4960:	b113      	cbz	r3, 4968 <usbd_work_handler+0x1f8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4962:	7a40      	ldrb	r0, [r0, #9]
    4964:	f004 fae8 	bl	8f38 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    4968:	3501      	adds	r5, #1
    496a:	2d08      	cmp	r5, #8
    496c:	d1f2      	bne.n	4954 <usbd_work_handler+0x1e4>
		if (ep_ctx->cfg.en) {
    496e:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    4972:	b11b      	cbz	r3, 497c <usbd_work_handler+0x20c>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4974:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    4978:	f004 fade 	bl	8f38 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    497c:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    497e:	b2e8      	uxtb	r0, r5
    4980:	f7ff fca8 	bl	42d4 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    4984:	7a03      	ldrb	r3, [r0, #8]
    4986:	b113      	cbz	r3, 498e <usbd_work_handler+0x21e>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4988:	7a40      	ldrb	r0, [r0, #9]
    498a:	f004 fad5 	bl	8f38 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    498e:	3501      	adds	r5, #1
    4990:	2d08      	cmp	r5, #8
    4992:	d1f4      	bne.n	497e <usbd_work_handler+0x20e>
		if (ep_ctx->cfg.en) {
    4994:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    4998:	b11b      	cbz	r3, 49a2 <usbd_work_handler+0x232>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    499a:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    499e:	f004 facb 	bl	8f38 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    49a2:	2001      	movs	r0, #1
    49a4:	f003 fe48 	bl	8638 <nrfx_usbd_start>
		ctx->ready = true;
    49a8:	2301      	movs	r3, #1
    49aa:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    49ae:	6823      	ldr	r3, [r4, #0]
    49b0:	2b00      	cmp	r3, #0
    49b2:	f43f aef6 	beq.w	47a2 <usbd_work_handler+0x32>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    49b6:	2100      	movs	r1, #0
    49b8:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_RESET, NULL);
    49ba:	4798      	blx	r3
    49bc:	e6f1      	b.n	47a2 <usbd_work_handler+0x32>
		ctx->ready = false;
    49be:	2500      	movs	r5, #0
    49c0:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    49c4:	f004 fa42 	bl	8e4c <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    49c8:	f7ff fdc8 	bl	455c <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    49cc:	6823      	ldr	r3, [r4, #0]
    49ce:	2b00      	cmp	r3, #0
    49d0:	f43f aee7 	beq.w	47a2 <usbd_work_handler+0x32>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    49d4:	4629      	mov	r1, r5
    49d6:	2004      	movs	r0, #4
    49d8:	e7ef      	b.n	49ba <usbd_work_handler+0x24a>
		if (dev_ready()) {
    49da:	2a00      	cmp	r2, #0
    49dc:	f43f aee1 	beq.w	47a2 <usbd_work_handler+0x32>
			nrfx_usbd_suspend();
    49e0:	f004 fa4e 	bl	8e80 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    49e4:	6823      	ldr	r3, [r4, #0]
    49e6:	2b00      	cmp	r3, #0
    49e8:	f43f aedb 	beq.w	47a2 <usbd_work_handler+0x32>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    49ec:	2100      	movs	r1, #0
    49ee:	2005      	movs	r0, #5
    49f0:	e7e3      	b.n	49ba <usbd_work_handler+0x24a>
		if (ctx->status_cb && dev_ready()) {
    49f2:	6823      	ldr	r3, [r4, #0]
    49f4:	2b00      	cmp	r3, #0
    49f6:	f43f aed4 	beq.w	47a2 <usbd_work_handler+0x32>
    49fa:	2a00      	cmp	r2, #0
    49fc:	f43f aed1 	beq.w	47a2 <usbd_work_handler+0x32>
			ctx->status_cb(USB_DC_RESUME, NULL);
    4a00:	2100      	movs	r1, #0
    4a02:	2006      	movs	r0, #6
    4a04:	e7d9      	b.n	49ba <usbd_work_handler+0x24a>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4a06:	f108 0510 	add.w	r5, r8, #16
    4a0a:	f04f 33ff 	mov.w	r3, #4294967295
    4a0e:	f04f 32ff 	mov.w	r2, #4294967295
    4a12:	4628      	mov	r0, r5
    4a14:	f006 fdf3 	bl	b5fe <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    4a18:	f7ff fe76 	bl	4708 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    4a1c:	4628      	mov	r0, r5
    4a1e:	f006 fdf0 	bl	b602 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    4a22:	f858 3c28 	ldr.w	r3, [r8, #-40]
    4a26:	2b00      	cmp	r3, #0
    4a28:	f43f aebb 	beq.w	47a2 <usbd_work_handler+0x32>
				ctx->status_cb(USB_DC_RESET, NULL);
    4a2c:	2100      	movs	r1, #0
    4a2e:	2001      	movs	r0, #1
    4a30:	e7c3      	b.n	49ba <usbd_work_handler+0x24a>
    4a32:	bf00      	nop
    4a34:	200012d4 	.word	0x200012d4
    4a38:	20000150 	.word	0x20000150
    4a3c:	0000d5b6 	.word	0x0000d5b6
    4a40:	0000c818 	.word	0x0000c818
    4a44:	40027000 	.word	0x40027000
    4a48:	200012d8 	.word	0x200012d8
    4a4c:	2000130c 	.word	0x2000130c
    4a50:	0bad0000 	.word	0x0bad0000
    4a54:	0000d5dc 	.word	0x0000d5dc
    4a58:	200012f4 	.word	0x200012f4
	if (ep_ctx->cfg.en) {
    4a5c:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    4a60:	b193      	cbz	r3, 4a88 <usbd_work_handler+0x318>
		ep_ctx->read_pending = true;
    4a62:	2501      	movs	r5, #1
    4a64:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    4a68:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    4a6c:	f7ff fca2 	bl	43b4 <usbd_evt_alloc>
		if (!ev) {
    4a70:	b990      	cbnz	r0, 4a98 <usbd_work_handler+0x328>
			LOG_ERR("Failed to alloc evt");
    4a72:	4b23      	ldr	r3, [pc, #140]	; (4b00 <usbd_work_handler+0x390>)
    4a74:	617b      	str	r3, [r7, #20]
    4a76:	4823      	ldr	r0, [pc, #140]	; (4b04 <usbd_work_handler+0x394>)
    4a78:	2302      	movs	r3, #2
    4a7a:	f107 0210 	add.w	r2, r7, #16
    4a7e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4a82:	613b      	str	r3, [r7, #16]
    4a84:	f006 fdb8 	bl	b5f8 <z_log_msg2_static_create.constprop.0>
			if (ctx->status_cb) {
    4a88:	f858 3c28 	ldr.w	r3, [r8, #-40]
    4a8c:	2b00      	cmp	r3, #0
    4a8e:	f43f ae88 	beq.w	47a2 <usbd_work_handler+0x32>
				ctx->status_cb(USB_DC_SOF, NULL);
    4a92:	2100      	movs	r1, #0
    4a94:	200a      	movs	r0, #10
    4a96:	e790      	b.n	49ba <usbd_work_handler+0x24a>
		ev->evt.ep_evt.ep = ep_ctx;
    4a98:	4a1b      	ldr	r2, [pc, #108]	; (4b08 <usbd_work_handler+0x398>)
		ev->evt_type = USBD_EVT_EP;
    4a9a:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4a9c:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    4a9e:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    4aa0:	f7ff fc40 	bl	4324 <usbd_evt_put>
		usbd_work_schedule();
    4aa4:	f7ff fc44 	bl	4330 <usbd_work_schedule>
    4aa8:	e7ee      	b.n	4a88 <usbd_work_handler+0x318>
				LOG_ERR("USBD event queue full!");
    4aaa:	4b18      	ldr	r3, [pc, #96]	; (4b0c <usbd_work_handler+0x39c>)
    4aac:	4815      	ldr	r0, [pc, #84]	; (4b04 <usbd_work_handler+0x394>)
    4aae:	617b      	str	r3, [r7, #20]
    4ab0:	f107 0210 	add.w	r2, r7, #16
    4ab4:	2302      	movs	r3, #2
    4ab6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4aba:	613b      	str	r3, [r7, #16]
    4abc:	f006 fd9c 	bl	b5f8 <z_log_msg2_static_create.constprop.0>
	nrfx_power_usbevt_disable();
    4ac0:	f007 f8a6 	bl	bc10 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    4ac4:	f004 f9c2 	bl	8e4c <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    4ac8:	f003 fd64 	bl	8594 <nrfx_usbd_uninit>
	usbd_evt_flush();
    4acc:	f7ff fc64 	bl	4398 <usbd_evt_flush>
	ret = eps_ctx_init();
    4ad0:	f7ff fe1a 	bl	4708 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    4ad4:	f007 f895 	bl	bc02 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    4ad8:	480d      	ldr	r0, [pc, #52]	; (4b10 <usbd_work_handler+0x3a0>)
    4ada:	f003 fdd5 	bl	8688 <nrfx_usbd_init>
}
    4ade:	e660      	b.n	47a2 <usbd_work_handler+0x32>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    4ae0:	490c      	ldr	r1, [pc, #48]	; (4b14 <usbd_work_handler+0x3a4>)
    4ae2:	4808      	ldr	r0, [pc, #32]	; (4b04 <usbd_work_handler+0x394>)
    4ae4:	466d      	mov	r5, sp
    4ae6:	b088      	sub	sp, #32
    4ae8:	466a      	mov	r2, sp
		switch (ev->evt_type) {
    4aea:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    4aee:	2303      	movs	r3, #3
    4af0:	f842 3f10 	str.w	r3, [r2, #16]!
    4af4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4af8:	f006 fd7e 	bl	b5f8 <z_log_msg2_static_create.constprop.0>
    4afc:	46ad      	mov	sp, r5
    4afe:	e650      	b.n	47a2 <usbd_work_handler+0x32>
    4b00:	0000d602 	.word	0x0000d602
    4b04:	0000c818 	.word	0x0000c818
    4b08:	20001540 	.word	0x20001540
    4b0c:	0000d616 	.word	0x0000d616
    4b10:	000045a1 	.word	0x000045a1
    4b14:	0000d62d 	.word	0x0000d62d

00004b18 <usb_dc_attach>:
{
    4b18:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    4b1a:	4d1a      	ldr	r5, [pc, #104]	; (4b84 <usb_dc_attach+0x6c>)
    4b1c:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    4b20:	bb5c      	cbnz	r4, 4b7a <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
    4b22:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4b26:	f007 f9e9 	bl	befc <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    4b2a:	4620      	mov	r0, r4
    4b2c:	f000 fbec 	bl	5308 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4b30:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
    4b32:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4b34:	2101      	movs	r1, #1
    4b36:	2027      	movs	r0, #39	; 0x27
    4b38:	f7fe fca6 	bl	3488 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
    4b3c:	4812      	ldr	r0, [pc, #72]	; (4b88 <usb_dc_attach+0x70>)
    4b3e:	f003 fda3 	bl	8688 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    4b42:	4b12      	ldr	r3, [pc, #72]	; (4b8c <usb_dc_attach+0x74>)
    4b44:	4298      	cmp	r0, r3
    4b46:	d11a      	bne.n	4b7e <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
    4b48:	f007 f85b 	bl	bc02 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    4b4c:	f7ff fddc 	bl	4708 <eps_ctx_init>
	if (ret == 0) {
    4b50:	4604      	mov	r4, r0
    4b52:	b910      	cbnz	r0, 4b5a <usb_dc_attach+0x42>
		ctx->attached = true;
    4b54:	2301      	movs	r3, #1
    4b56:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    4b5a:	4b0d      	ldr	r3, [pc, #52]	; (4b90 <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    4b5c:	681b      	ldr	r3, [r3, #0]
    4b5e:	b10b      	cbz	r3, 4b64 <usb_dc_attach+0x4c>
		usbd_work_schedule();
    4b60:	f7ff fbe6 	bl	4330 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    4b64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4b68:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    4b6c:	07db      	lsls	r3, r3, #31
    4b6e:	d502      	bpl.n	4b76 <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    4b70:	2000      	movs	r0, #0
    4b72:	f7ff fcc5 	bl	4500 <usb_dc_power_event_handler>
}
    4b76:	4620      	mov	r0, r4
    4b78:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    4b7a:	2400      	movs	r4, #0
    4b7c:	e7fb      	b.n	4b76 <usb_dc_attach+0x5e>
		return -EIO;
    4b7e:	f06f 0404 	mvn.w	r4, #4
    4b82:	e7f8      	b.n	4b76 <usb_dc_attach+0x5e>
    4b84:	200012d4 	.word	0x200012d4
    4b88:	000045a1 	.word	0x000045a1
    4b8c:	0bad0000 	.word	0x0bad0000
    4b90:	200001a4 	.word	0x200001a4

00004b94 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    4b94:	4b07      	ldr	r3, [pc, #28]	; (4bb4 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    4b96:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    4b9a:	b13a      	cbz	r2, 4bac <usb_dc_set_address+0x18>
    4b9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	return 0;
    4ba0:	2b00      	cmp	r3, #0
    4ba2:	bf0c      	ite	eq
    4ba4:	f06f 0012 	mvneq.w	r0, #18
    4ba8:	2000      	movne	r0, #0
    4baa:	4770      	bx	lr
		return -ENODEV;
    4bac:	f06f 0012 	mvn.w	r0, #18
}
    4bb0:	4770      	bx	lr
    4bb2:	bf00      	nop
    4bb4:	200012d4 	.word	0x200012d4

00004bb8 <usb_dc_ep_check_cap>:
{
    4bb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    4bba:	4602      	mov	r2, r0
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    4bbc:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    4bbe:	7912      	ldrb	r2, [r2, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    4bc0:	f003 000f 	and.w	r0, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    4bc4:	b97a      	cbnz	r2, 4be6 <usb_dc_ep_check_cap+0x2e>
    4bc6:	b158      	cbz	r0, 4be0 <usb_dc_ep_check_cap+0x28>
		LOG_ERR("invalid endpoint configuration");
    4bc8:	4b0d      	ldr	r3, [pc, #52]	; (4c00 <usb_dc_ep_check_cap+0x48>)
		LOG_ERR("invalid endpoint index/address");
    4bca:	480e      	ldr	r0, [pc, #56]	; (4c04 <usb_dc_ep_check_cap+0x4c>)
    4bcc:	9305      	str	r3, [sp, #20]
    4bce:	aa04      	add	r2, sp, #16
    4bd0:	2302      	movs	r3, #2
    4bd2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4bd6:	9304      	str	r3, [sp, #16]
    4bd8:	f006 fd0e 	bl	b5f8 <z_log_msg2_static_create.constprop.0>
		return -1;
    4bdc:	f04f 30ff 	mov.w	r0, #4294967295
}
    4be0:	b007      	add	sp, #28
    4be2:	f85d fb04 	ldr.w	pc, [sp], #4
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    4be6:	2808      	cmp	r0, #8
    4be8:	d901      	bls.n	4bee <usb_dc_ep_check_cap+0x36>
		LOG_ERR("invalid endpoint index/address");
    4bea:	4b07      	ldr	r3, [pc, #28]	; (4c08 <usb_dc_ep_check_cap+0x50>)
    4bec:	e7ed      	b.n	4bca <usb_dc_ep_check_cap+0x12>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    4bee:	2a01      	cmp	r2, #1
    4bf0:	bf06      	itte	eq
    4bf2:	f083 0008 	eoreq.w	r0, r3, #8
    4bf6:	f340 00c0 	sbfxeq	r0, r0, #3, #1
	return 0;
    4bfa:	2000      	movne	r0, #0
    4bfc:	e7f0      	b.n	4be0 <usb_dc_ep_check_cap+0x28>
    4bfe:	bf00      	nop
    4c00:	0000d644 	.word	0x0000d644
    4c04:	0000c818 	.word	0x0000c818
    4c08:	0000d663 	.word	0x0000d663

00004c0c <usb_dc_ep_configure>:
{
    4c0c:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    4c0e:	4b15      	ldr	r3, [pc, #84]	; (4c64 <usb_dc_ep_configure+0x58>)
	if (!dev_attached()) {
    4c10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    4c14:	b086      	sub	sp, #24
    4c16:	4601      	mov	r1, r0
	if (!dev_attached()) {
    4c18:	b30b      	cbz	r3, 4c5e <usb_dc_ep_configure+0x52>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    4c1a:	7804      	ldrb	r4, [r0, #0]
    4c1c:	4620      	mov	r0, r4
    4c1e:	f7ff fb59 	bl	42d4 <endpoint_ctx>
	if (!ep_ctx) {
    4c22:	b198      	cbz	r0, 4c4c <usb_dc_ep_configure+0x40>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    4c24:	7244      	strb	r4, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    4c26:	790b      	ldrb	r3, [r1, #4]
    4c28:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    4c2a:	8849      	ldrh	r1, [r1, #2]
    4c2c:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    4c2e:	0723      	lsls	r3, r4, #28
    4c30:	d40f      	bmi.n	4c52 <usb_dc_ep_configure+0x46>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    4c32:	1e4b      	subs	r3, r1, #1
    4c34:	420b      	tst	r3, r1
    4c36:	d00c      	beq.n	4c52 <usb_dc_ep_configure+0x46>
			LOG_ERR("EP max packet size must be a power of 2");
    4c38:	4b0b      	ldr	r3, [pc, #44]	; (4c68 <usb_dc_ep_configure+0x5c>)
    4c3a:	9305      	str	r3, [sp, #20]
    4c3c:	480b      	ldr	r0, [pc, #44]	; (4c6c <usb_dc_ep_configure+0x60>)
    4c3e:	2302      	movs	r3, #2
    4c40:	aa04      	add	r2, sp, #16
    4c42:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4c46:	9304      	str	r3, [sp, #16]
    4c48:	f006 fcd6 	bl	b5f8 <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    4c4c:	f06f 0015 	mvn.w	r0, #21
    4c50:	e003      	b.n	4c5a <usb_dc_ep_configure+0x4e>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    4c52:	4620      	mov	r0, r4
    4c54:	f007 f876 	bl	bd44 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    4c58:	2000      	movs	r0, #0
}
    4c5a:	b006      	add	sp, #24
    4c5c:	bd10      	pop	{r4, pc}
		return -ENODEV;
    4c5e:	f06f 0012 	mvn.w	r0, #18
    4c62:	e7fa      	b.n	4c5a <usb_dc_ep_configure+0x4e>
    4c64:	200012d4 	.word	0x200012d4
    4c68:	0000d682 	.word	0x0000d682
    4c6c:	0000c818 	.word	0x0000c818

00004c70 <usb_dc_ep_set_stall>:
{
    4c70:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    4c72:	4b18      	ldr	r3, [pc, #96]	; (4cd4 <usb_dc_ep_set_stall+0x64>)
	if (!dev_attached() || !dev_ready()) {
    4c74:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4c78:	b086      	sub	sp, #24
    4c7a:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    4c7c:	b33a      	cbz	r2, 4cce <usb_dc_ep_set_stall+0x5e>
    4c7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4c82:	b323      	cbz	r3, 4cce <usb_dc_ep_set_stall+0x5e>
	ep_ctx = endpoint_ctx(ep);
    4c84:	f7ff fb26 	bl	42d4 <endpoint_ctx>
	if (!ep_ctx) {
    4c88:	4604      	mov	r4, r0
    4c8a:	b1e8      	cbz	r0, 4cc8 <usb_dc_ep_set_stall+0x58>
	switch (ep_ctx->cfg.type) {
    4c8c:	7a83      	ldrb	r3, [r0, #10]
    4c8e:	2b01      	cmp	r3, #1
    4c90:	d010      	beq.n	4cb4 <usb_dc_ep_set_stall+0x44>
    4c92:	d908      	bls.n	4ca6 <usb_dc_ep_set_stall+0x36>
    4c94:	3b02      	subs	r3, #2
    4c96:	2b01      	cmp	r3, #1
    4c98:	d908      	bls.n	4cac <usb_dc_ep_set_stall+0x3c>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    4c9a:	6963      	ldr	r3, [r4, #20]
    4c9c:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    4c9e:	2000      	movs	r0, #0
    4ca0:	60e0      	str	r0, [r4, #12]
}
    4ca2:	b006      	add	sp, #24
    4ca4:	bd10      	pop	{r4, pc}
		nrfx_usbd_setup_stall();
    4ca6:	f003 ff61 	bl	8b6c <nrfx_usbd_setup_stall>
		break;
    4caa:	e7f6      	b.n	4c9a <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    4cac:	4608      	mov	r0, r1
    4cae:	f003 fecd 	bl	8a4c <nrfx_usbd_ep_stall>
		break;
    4cb2:	e7f2      	b.n	4c9a <usb_dc_ep_set_stall+0x2a>
		LOG_ERR("STALL unsupported on ISO endpoint");
    4cb4:	4b08      	ldr	r3, [pc, #32]	; (4cd8 <usb_dc_ep_set_stall+0x68>)
    4cb6:	9305      	str	r3, [sp, #20]
    4cb8:	4808      	ldr	r0, [pc, #32]	; (4cdc <usb_dc_ep_set_stall+0x6c>)
    4cba:	2302      	movs	r3, #2
    4cbc:	aa04      	add	r2, sp, #16
    4cbe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4cc2:	9304      	str	r3, [sp, #16]
    4cc4:	f006 fc98 	bl	b5f8 <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    4cc8:	f06f 0015 	mvn.w	r0, #21
    4ccc:	e7e9      	b.n	4ca2 <usb_dc_ep_set_stall+0x32>
		return -ENODEV;
    4cce:	f06f 0012 	mvn.w	r0, #18
    4cd2:	e7e6      	b.n	4ca2 <usb_dc_ep_set_stall+0x32>
    4cd4:	200012d4 	.word	0x200012d4
    4cd8:	0000d6aa 	.word	0x0000d6aa
    4cdc:	0000c818 	.word	0x0000c818

00004ce0 <usb_dc_ep_clear_stall>:
{
    4ce0:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4ce2:	4b0e      	ldr	r3, [pc, #56]	; (4d1c <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    4ce4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4ce8:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    4cea:	b182      	cbz	r2, 4d0e <usb_dc_ep_clear_stall+0x2e>
    4cec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4cf0:	b16b      	cbz	r3, 4d0e <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    4cf2:	f7ff faef 	bl	42d4 <endpoint_ctx>
	if (!ep_ctx) {
    4cf6:	b168      	cbz	r0, 4d14 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    4cf8:	f015 0408 	ands.w	r4, r5, #8
    4cfc:	d10a      	bne.n	4d14 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    4cfe:	4628      	mov	r0, r5
    4d00:	f003 fec6 	bl	8a90 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    4d04:	4628      	mov	r0, r5
    4d06:	f004 f969 	bl	8fdc <nrfx_usbd_ep_stall_clear>
	return 0;
    4d0a:	4620      	mov	r0, r4
}
    4d0c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    4d0e:	f06f 0012 	mvn.w	r0, #18
    4d12:	e7fb      	b.n	4d0c <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    4d14:	f06f 0015 	mvn.w	r0, #21
    4d18:	e7f8      	b.n	4d0c <usb_dc_ep_clear_stall+0x2c>
    4d1a:	bf00      	nop
    4d1c:	200012d4 	.word	0x200012d4

00004d20 <usb_dc_ep_is_stalled>:
{
    4d20:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4d22:	4b0c      	ldr	r3, [pc, #48]	; (4d54 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    4d24:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4d28:	4605      	mov	r5, r0
    4d2a:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    4d2c:	b162      	cbz	r2, 4d48 <usb_dc_ep_is_stalled+0x28>
    4d2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4d32:	b14b      	cbz	r3, 4d48 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    4d34:	f7ff face 	bl	42d4 <endpoint_ctx>
	if (!ep_ctx) {
    4d38:	b148      	cbz	r0, 4d4e <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    4d3a:	b141      	cbz	r1, 4d4e <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    4d3c:	4628      	mov	r0, r5
    4d3e:	f003 fe8d 	bl	8a5c <nrfx_usbd_ep_stall_check>
    4d42:	7020      	strb	r0, [r4, #0]
	return 0;
    4d44:	2000      	movs	r0, #0
}
    4d46:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    4d48:	f06f 0012 	mvn.w	r0, #18
    4d4c:	e7fb      	b.n	4d46 <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    4d4e:	f06f 0015 	mvn.w	r0, #21
    4d52:	e7f8      	b.n	4d46 <usb_dc_ep_is_stalled+0x26>
    4d54:	200012d4 	.word	0x200012d4

00004d58 <usb_dc_ep_enable>:
{
    4d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
    4d5a:	4f13      	ldr	r7, [pc, #76]	; (4da8 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
    4d5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
{
    4d60:	4604      	mov	r4, r0
	if (!dev_attached()) {
    4d62:	b1bb      	cbz	r3, 4d94 <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
    4d64:	f7ff fab6 	bl	42d4 <endpoint_ctx>
	if (!ep_ctx) {
    4d68:	4605      	mov	r5, r0
    4d6a:	b1b0      	cbz	r0, 4d9a <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    4d6c:	0723      	lsls	r3, r4, #28
    4d6e:	d405      	bmi.n	4d7c <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    4d70:	4620      	mov	r0, r4
    4d72:	f003 fe8d 	bl	8a90 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    4d76:	4620      	mov	r0, r4
    4d78:	f004 f930 	bl	8fdc <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    4d7c:	7a2e      	ldrb	r6, [r5, #8]
    4d7e:	b97e      	cbnz	r6, 4da0 <usb_dc_ep_enable+0x48>
	if (dev_ready()) {
    4d80:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
	ep_ctx->cfg.en = true;
    4d84:	2301      	movs	r3, #1
    4d86:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    4d88:	b118      	cbz	r0, 4d92 <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    4d8a:	4620      	mov	r0, r4
    4d8c:	f004 f8d4 	bl	8f38 <nrfx_usbd_ep_enable>
	return 0;
    4d90:	4630      	mov	r0, r6
}
    4d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
    4d94:	f06f 0012 	mvn.w	r0, #18
    4d98:	e7fb      	b.n	4d92 <usb_dc_ep_enable+0x3a>
		return -EINVAL;
    4d9a:	f06f 0015 	mvn.w	r0, #21
    4d9e:	e7f8      	b.n	4d92 <usb_dc_ep_enable+0x3a>
		return -EALREADY;
    4da0:	f06f 0077 	mvn.w	r0, #119	; 0x77
    4da4:	e7f5      	b.n	4d92 <usb_dc_ep_enable+0x3a>
    4da6:	bf00      	nop
    4da8:	200012d4 	.word	0x200012d4

00004dac <usb_dc_ep_disable>:
{
    4dac:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4dae:	4b11      	ldr	r3, [pc, #68]	; (4df4 <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
    4db0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4db4:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    4db6:	b19a      	cbz	r2, 4de0 <usb_dc_ep_disable+0x34>
    4db8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4dbc:	b183      	cbz	r3, 4de0 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
    4dbe:	f7ff fa89 	bl	42d4 <endpoint_ctx>
	if (!ep_ctx) {
    4dc2:	4605      	mov	r5, r0
    4dc4:	b178      	cbz	r0, 4de6 <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
    4dc6:	7a03      	ldrb	r3, [r0, #8]
    4dc8:	b183      	cbz	r3, 4dec <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    4dca:	4608      	mov	r0, r1
	ep_ctx->write_in_progress = false;
    4dcc:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    4dce:	f004 f887 	bl	8ee0 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    4dd2:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    4dd4:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    4dd6:	f006 fbfc 	bl	b5d2 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    4dda:	722c      	strb	r4, [r5, #8]
	return 0;
    4ddc:	4620      	mov	r0, r4
}
    4dde:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    4de0:	f06f 0012 	mvn.w	r0, #18
    4de4:	e7fb      	b.n	4dde <usb_dc_ep_disable+0x32>
		return -EINVAL;
    4de6:	f06f 0015 	mvn.w	r0, #21
    4dea:	e7f8      	b.n	4dde <usb_dc_ep_disable+0x32>
		return -EALREADY;
    4dec:	f06f 0077 	mvn.w	r0, #119	; 0x77
    4df0:	e7f5      	b.n	4dde <usb_dc_ep_disable+0x32>
    4df2:	bf00      	nop
    4df4:	200012d4 	.word	0x200012d4

00004df8 <usb_dc_ep_write>:
{
    4df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->attached;
    4dfc:	f8df 911c 	ldr.w	r9, [pc, #284]	; 4f1c <usb_dc_ep_write+0x124>
{
    4e00:	b084      	sub	sp, #16
    4e02:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
    4e04:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
{
    4e08:	af00      	add	r7, sp, #0
    4e0a:	4680      	mov	r8, r0
    4e0c:	468a      	mov	sl, r1
    4e0e:	4616      	mov	r6, r2
	if (!dev_attached() || !dev_ready()) {
    4e10:	2b00      	cmp	r3, #0
    4e12:	d07f      	beq.n	4f14 <usb_dc_ep_write+0x11c>
    4e14:	f899 3025 	ldrb.w	r3, [r9, #37]	; 0x25
    4e18:	2b00      	cmp	r3, #0
    4e1a:	d07b      	beq.n	4f14 <usb_dc_ep_write+0x11c>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    4e1c:	f010 0f80 	tst.w	r0, #128	; 0x80
    4e20:	d014      	beq.n	4e4c <usb_dc_ep_write+0x54>
	ep_ctx = endpoint_ctx(ep);
    4e22:	f7ff fa57 	bl	42d4 <endpoint_ctx>
	if (!ep_ctx) {
    4e26:	4605      	mov	r5, r0
    4e28:	b180      	cbz	r0, 4e4c <usb_dc_ep_write+0x54>
	if (!ep_ctx->cfg.en) {
    4e2a:	7a03      	ldrb	r3, [r0, #8]
    4e2c:	b98b      	cbnz	r3, 4e52 <usb_dc_ep_write+0x5a>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    4e2e:	4b3c      	ldr	r3, [pc, #240]	; (4f20 <usb_dc_ep_write+0x128>)
    4e30:	483c      	ldr	r0, [pc, #240]	; (4f24 <usb_dc_ep_write+0x12c>)
    4e32:	466c      	mov	r4, sp
    4e34:	b088      	sub	sp, #32
    4e36:	466a      	mov	r2, sp
    4e38:	e9c2 3805 	strd	r3, r8, [r2, #20]
    4e3c:	2303      	movs	r3, #3
    4e3e:	f842 3f10 	str.w	r3, [r2, #16]!
    4e42:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4e46:	f006 fbd7 	bl	b5f8 <z_log_msg2_static_create.constprop.0>
    4e4a:	46a5      	mov	sp, r4
		return -EINVAL;
    4e4c:	f06f 0415 	mvn.w	r4, #21
    4e50:	e00f      	b.n	4e72 <usb_dc_ep_write+0x7a>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4e52:	f04f 33ff 	mov.w	r3, #4294967295
    4e56:	f04f 32ff 	mov.w	r2, #4294967295
    4e5a:	f109 0038 	add.w	r0, r9, #56	; 0x38
    4e5e:	f006 fbce 	bl	b5fe <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    4e62:	7fab      	ldrb	r3, [r5, #30]
    4e64:	b153      	cbz	r3, 4e7c <usb_dc_ep_write+0x84>
		k_mutex_unlock(&ctx->drv_lock);
    4e66:	f109 0038 	add.w	r0, r9, #56	; 0x38
    4e6a:	f006 fbca 	bl	b602 <k_mutex_unlock.isra.0>
		return -EAGAIN;
    4e6e:	f06f 040a 	mvn.w	r4, #10
}
    4e72:	4620      	mov	r0, r4
    4e74:	3710      	adds	r7, #16
    4e76:	46bd      	mov	sp, r7
    4e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!data_len && ep_ctx->trans_zlp) {
    4e7c:	b916      	cbnz	r6, 4e84 <usb_dc_ep_write+0x8c>
    4e7e:	7feb      	ldrb	r3, [r5, #31]
    4e80:	b103      	cbz	r3, 4e84 <usb_dc_ep_write+0x8c>
		ep_ctx->trans_zlp = false;
    4e82:	77ee      	strb	r6, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    4e84:	7aab      	ldrb	r3, [r5, #10]
    4e86:	b9bb      	cbnz	r3, 4eb8 <usb_dc_ep_write+0xc0>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    4e88:	b15e      	cbz	r6, 4ea2 <usb_dc_ep_write+0xaa>
    4e8a:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    4e8e:	429e      	cmp	r6, r3
    4e90:	d207      	bcs.n	4ea2 <usb_dc_ep_write+0xaa>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    4e92:	686a      	ldr	r2, [r5, #4]
    4e94:	fbb6 f3f2 	udiv	r3, r6, r2
    4e98:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    4e9c:	b90b      	cbnz	r3, 4ea2 <usb_dc_ep_write+0xaa>
			ep_ctx->trans_zlp = true;
    4e9e:	2301      	movs	r3, #1
    4ea0:	77eb      	strb	r3, [r5, #31]
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    4ea2:	f003 fe6b 	bl	8b7c <nrfx_usbd_last_setup_dir_get>
    4ea6:	4580      	cmp	r8, r0
    4ea8:	d006      	beq.n	4eb8 <usb_dc_ep_write+0xc0>
		nrfx_usbd_setup_clear();
    4eaa:	f003 fe57 	bl	8b5c <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    4eae:	481e      	ldr	r0, [pc, #120]	; (4f28 <usb_dc_ep_write+0x130>)
    4eb0:	f006 fba7 	bl	b602 <k_mutex_unlock.isra.0>
		return 0;
    4eb4:	2400      	movs	r4, #0
    4eb6:	e7dc      	b.n	4e72 <usb_dc_ep_write+0x7a>
	ep_ctx->write_in_progress = true;
    4eb8:	2301      	movs	r3, #1
    4eba:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    4ebc:	f04f 0900 	mov.w	r9, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    4ec0:	1d39      	adds	r1, r7, #4
    4ec2:	4640      	mov	r0, r8
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    4ec4:	e9c7 a601 	strd	sl, r6, [r7, #4]
    4ec8:	f8c7 900c 	str.w	r9, [r7, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    4ecc:	f003 fc22 	bl	8714 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    4ed0:	4b16      	ldr	r3, [pc, #88]	; (4f2c <usb_dc_ep_write+0x134>)
    4ed2:	4298      	cmp	r0, r3
    4ed4:	d019      	beq.n	4f0a <usb_dc_ep_write+0x112>
		ep_ctx->write_in_progress = false;
    4ed6:	f885 901e 	strb.w	r9, [r5, #30]
		if (ret_bytes) {
    4eda:	b10c      	cbz	r4, 4ee0 <usb_dc_ep_write+0xe8>
			*ret_bytes = 0;
    4edc:	f8c4 9000 	str.w	r9, [r4]
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    4ee0:	466c      	mov	r4, sp
    4ee2:	4b13      	ldr	r3, [pc, #76]	; (4f30 <usb_dc_ep_write+0x138>)
    4ee4:	b088      	sub	sp, #32
    4ee6:	466a      	mov	r2, sp
    4ee8:	e9c2 3005 	strd	r3, r0, [r2, #20]
    4eec:	2303      	movs	r3, #3
    4eee:	f842 3f10 	str.w	r3, [r2, #16]!
    4ef2:	480c      	ldr	r0, [pc, #48]	; (4f24 <usb_dc_ep_write+0x12c>)
    4ef4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4ef8:	f006 fb7e 	bl	b5f8 <z_log_msg2_static_create.constprop.0>
    4efc:	46a5      	mov	sp, r4
		result = -EIO;
    4efe:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
    4f02:	4809      	ldr	r0, [pc, #36]	; (4f28 <usb_dc_ep_write+0x130>)
    4f04:	f006 fb7d 	bl	b602 <k_mutex_unlock.isra.0>
	return result;
    4f08:	e7b3      	b.n	4e72 <usb_dc_ep_write+0x7a>
		if (ret_bytes) {
    4f0a:	2c00      	cmp	r4, #0
    4f0c:	d0f9      	beq.n	4f02 <usb_dc_ep_write+0x10a>
			*ret_bytes = data_len;
    4f0e:	6026      	str	r6, [r4, #0]
	int result = 0;
    4f10:	464c      	mov	r4, r9
    4f12:	e7f6      	b.n	4f02 <usb_dc_ep_write+0x10a>
		return -ENODEV;
    4f14:	f06f 0412 	mvn.w	r4, #18
    4f18:	e7ab      	b.n	4e72 <usb_dc_ep_write+0x7a>
    4f1a:	bf00      	nop
    4f1c:	200012d4 	.word	0x200012d4
    4f20:	0000d6cc 	.word	0x0000d6cc
    4f24:	0000c818 	.word	0x0000c818
    4f28:	2000130c 	.word	0x2000130c
    4f2c:	0bad0000 	.word	0x0bad0000
    4f30:	0000d6eb 	.word	0x0000d6eb

00004f34 <usb_dc_ep_read_wait>:
{
    4f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4f38:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    4f3a:	4b2d      	ldr	r3, [pc, #180]	; (4ff0 <usb_dc_ep_read_wait+0xbc>)
{
    4f3c:	4690      	mov	r8, r2
	if (!dev_attached() || !dev_ready()) {
    4f3e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4f42:	af00      	add	r7, sp, #0
    4f44:	4681      	mov	r9, r0
    4f46:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    4f48:	2a00      	cmp	r2, #0
    4f4a:	d04d      	beq.n	4fe8 <usb_dc_ep_read_wait+0xb4>
    4f4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4f50:	2b00      	cmp	r3, #0
    4f52:	d049      	beq.n	4fe8 <usb_dc_ep_read_wait+0xb4>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    4f54:	f010 0f80 	tst.w	r0, #128	; 0x80
    4f58:	d119      	bne.n	4f8e <usb_dc_ep_read_wait+0x5a>
	if (!data && max_data_len) {
    4f5a:	b911      	cbnz	r1, 4f62 <usb_dc_ep_read_wait+0x2e>
    4f5c:	f1b8 0f00 	cmp.w	r8, #0
    4f60:	d115      	bne.n	4f8e <usb_dc_ep_read_wait+0x5a>
	ep_ctx = endpoint_ctx(ep);
    4f62:	4648      	mov	r0, r9
    4f64:	f7ff f9b6 	bl	42d4 <endpoint_ctx>
	if (!ep_ctx) {
    4f68:	4604      	mov	r4, r0
    4f6a:	b180      	cbz	r0, 4f8e <usb_dc_ep_read_wait+0x5a>
	if (!ep_ctx->cfg.en) {
    4f6c:	7a03      	ldrb	r3, [r0, #8]
    4f6e:	b98b      	cbnz	r3, 4f94 <usb_dc_ep_read_wait+0x60>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    4f70:	4b20      	ldr	r3, [pc, #128]	; (4ff4 <usb_dc_ep_read_wait+0xc0>)
    4f72:	4821      	ldr	r0, [pc, #132]	; (4ff8 <usb_dc_ep_read_wait+0xc4>)
    4f74:	466c      	mov	r4, sp
    4f76:	b088      	sub	sp, #32
    4f78:	466a      	mov	r2, sp
    4f7a:	e9c2 3905 	strd	r3, r9, [r2, #20]
    4f7e:	2303      	movs	r3, #3
    4f80:	f842 3f10 	str.w	r3, [r2, #16]!
    4f84:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4f88:	f006 fb36 	bl	b5f8 <z_log_msg2_static_create.constprop.0>
    4f8c:	46a5      	mov	sp, r4
		return -EINVAL;
    4f8e:	f06f 0015 	mvn.w	r0, #21
    4f92:	e015      	b.n	4fc0 <usb_dc_ep_read_wait+0x8c>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4f94:	f04f 33ff 	mov.w	r3, #4294967295
    4f98:	4818      	ldr	r0, [pc, #96]	; (4ffc <usb_dc_ep_read_wait+0xc8>)
    4f9a:	f04f 32ff 	mov.w	r2, #4294967295
    4f9e:	f006 fb2e 	bl	b5fe <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    4fa2:	68e3      	ldr	r3, [r4, #12]
    4fa4:	4598      	cmp	r8, r3
    4fa6:	46c1      	mov	r9, r8
    4fa8:	bf28      	it	cs
    4faa:	4699      	movcs	r9, r3
	if (!data && !max_data_len) {
    4fac:	b95e      	cbnz	r6, 4fc6 <usb_dc_ep_read_wait+0x92>
    4fae:	f1b8 0f00 	cmp.w	r8, #0
    4fb2:	d108      	bne.n	4fc6 <usb_dc_ep_read_wait+0x92>
		if (read_bytes) {
    4fb4:	b105      	cbz	r5, 4fb8 <usb_dc_ep_read_wait+0x84>
			*read_bytes = ep_ctx->buf.len;
    4fb6:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    4fb8:	4810      	ldr	r0, [pc, #64]	; (4ffc <usb_dc_ep_read_wait+0xc8>)
    4fba:	f006 fb22 	bl	b602 <k_mutex_unlock.isra.0>
		return 0;
    4fbe:	2000      	movs	r0, #0
}
    4fc0:	46bd      	mov	sp, r7
    4fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    4fc6:	69a1      	ldr	r1, [r4, #24]
    4fc8:	464a      	mov	r2, r9
    4fca:	4630      	mov	r0, r6
    4fcc:	f006 fab9 	bl	b542 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    4fd0:	69a3      	ldr	r3, [r4, #24]
    4fd2:	444b      	add	r3, r9
    4fd4:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    4fd6:	68e3      	ldr	r3, [r4, #12]
    4fd8:	eba3 0309 	sub.w	r3, r3, r9
    4fdc:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    4fde:	2d00      	cmp	r5, #0
    4fe0:	d0ea      	beq.n	4fb8 <usb_dc_ep_read_wait+0x84>
		*read_bytes = bytes_to_copy;
    4fe2:	f8c5 9000 	str.w	r9, [r5]
    4fe6:	e7e7      	b.n	4fb8 <usb_dc_ep_read_wait+0x84>
		return -ENODEV;
    4fe8:	f06f 0012 	mvn.w	r0, #18
    4fec:	e7e8      	b.n	4fc0 <usb_dc_ep_read_wait+0x8c>
    4fee:	bf00      	nop
    4ff0:	200012d4 	.word	0x200012d4
    4ff4:	0000d6cc 	.word	0x0000d6cc
    4ff8:	0000c818 	.word	0x0000c818
    4ffc:	2000130c 	.word	0x2000130c

00005000 <usb_dc_ep_read_continue>:
{
    5000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
    5002:	4d27      	ldr	r5, [pc, #156]	; (50a0 <usb_dc_ep_read_continue+0xa0>)
	if (!dev_attached() || !dev_ready()) {
    5004:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
    5008:	af00      	add	r7, sp, #0
    500a:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    500c:	2b00      	cmp	r3, #0
    500e:	d044      	beq.n	509a <usb_dc_ep_read_continue+0x9a>
    5010:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    5014:	2b00      	cmp	r3, #0
    5016:	d040      	beq.n	509a <usb_dc_ep_read_continue+0x9a>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    5018:	0603      	lsls	r3, r0, #24
    501a:	d414      	bmi.n	5046 <usb_dc_ep_read_continue+0x46>
	ep_ctx = endpoint_ctx(ep);
    501c:	f7ff f95a 	bl	42d4 <endpoint_ctx>
	if (!ep_ctx) {
    5020:	4604      	mov	r4, r0
    5022:	b180      	cbz	r0, 5046 <usb_dc_ep_read_continue+0x46>
	if (!ep_ctx->cfg.en) {
    5024:	7a03      	ldrb	r3, [r0, #8]
    5026:	b98b      	cbnz	r3, 504c <usb_dc_ep_read_continue+0x4c>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    5028:	4b1e      	ldr	r3, [pc, #120]	; (50a4 <usb_dc_ep_read_continue+0xa4>)
    502a:	481f      	ldr	r0, [pc, #124]	; (50a8 <usb_dc_ep_read_continue+0xa8>)
    502c:	466c      	mov	r4, sp
    502e:	b088      	sub	sp, #32
    5030:	466a      	mov	r2, sp
    5032:	e9c2 3105 	strd	r3, r1, [r2, #20]
    5036:	2303      	movs	r3, #3
    5038:	f842 3f10 	str.w	r3, [r2, #16]!
    503c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5040:	f006 fada 	bl	b5f8 <z_log_msg2_static_create.constprop.0>
    5044:	46a5      	mov	sp, r4
		return -EINVAL;
    5046:	f06f 0015 	mvn.w	r0, #21
    504a:	e018      	b.n	507e <usb_dc_ep_read_continue+0x7e>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    504c:	f04f 33ff 	mov.w	r3, #4294967295
    5050:	f04f 32ff 	mov.w	r2, #4294967295
    5054:	f105 0038 	add.w	r0, r5, #56	; 0x38
    5058:	f006 fad1 	bl	b5fe <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    505c:	68e3      	ldr	r3, [r4, #12]
    505e:	b9bb      	cbnz	r3, 5090 <usb_dc_ep_read_continue+0x90>
		ep_ctx->read_complete = true;
    5060:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    5062:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    5064:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    5066:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    5068:	7f63      	ldrb	r3, [r4, #29]
    506a:	b18b      	cbz	r3, 5090 <usb_dc_ep_read_continue+0x90>
			struct usbd_event *ev = usbd_evt_alloc();
    506c:	f7ff f9a2 	bl	43b4 <usbd_evt_alloc>
			if (!ev) {
    5070:	b938      	cbnz	r0, 5082 <usb_dc_ep_read_continue+0x82>
				k_mutex_unlock(&ctx->drv_lock);
    5072:	f105 0038 	add.w	r0, r5, #56	; 0x38
    5076:	f006 fac4 	bl	b602 <k_mutex_unlock.isra.0>
				return -ENOMEM;
    507a:	f06f 000b 	mvn.w	r0, #11
}
    507e:	46bd      	mov	sp, r7
    5080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			ev->evt_type = USBD_EVT_EP;
    5082:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    5084:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    5086:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    5088:	f7ff f94c 	bl	4324 <usbd_evt_put>
			usbd_work_schedule();
    508c:	f7ff f950 	bl	4330 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    5090:	4806      	ldr	r0, [pc, #24]	; (50ac <usb_dc_ep_read_continue+0xac>)
    5092:	f006 fab6 	bl	b602 <k_mutex_unlock.isra.0>
	return 0;
    5096:	2000      	movs	r0, #0
    5098:	e7f1      	b.n	507e <usb_dc_ep_read_continue+0x7e>
		return -ENODEV;
    509a:	f06f 0012 	mvn.w	r0, #18
    509e:	e7ee      	b.n	507e <usb_dc_ep_read_continue+0x7e>
    50a0:	200012d4 	.word	0x200012d4
    50a4:	0000d6cc 	.word	0x0000d6cc
    50a8:	0000c818 	.word	0x0000c818
    50ac:	2000130c 	.word	0x2000130c

000050b0 <usb_dc_ep_set_callback>:
{
    50b0:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    50b2:	4b08      	ldr	r3, [pc, #32]	; (50d4 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    50b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    50b8:	b12b      	cbz	r3, 50c6 <usb_dc_ep_set_callback+0x16>
	ep_ctx = endpoint_ctx(ep);
    50ba:	f7ff f90b 	bl	42d4 <endpoint_ctx>
	if (!ep_ctx) {
    50be:	b128      	cbz	r0, 50cc <usb_dc_ep_set_callback+0x1c>
	ep_ctx->cfg.cb = cb;
    50c0:	6001      	str	r1, [r0, #0]
	return 0;
    50c2:	2000      	movs	r0, #0
}
    50c4:	bd08      	pop	{r3, pc}
		return -ENODEV;
    50c6:	f06f 0012 	mvn.w	r0, #18
    50ca:	e7fb      	b.n	50c4 <usb_dc_ep_set_callback+0x14>
		return -EINVAL;
    50cc:	f06f 0015 	mvn.w	r0, #21
    50d0:	e7f8      	b.n	50c4 <usb_dc_ep_set_callback+0x14>
    50d2:	bf00      	nop
    50d4:	200012d4 	.word	0x200012d4

000050d8 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    50d8:	4b01      	ldr	r3, [pc, #4]	; (50e0 <usb_dc_set_status_callback+0x8>)
    50da:	6018      	str	r0, [r3, #0]
}
    50dc:	4770      	bx	lr
    50de:	bf00      	nop
    50e0:	200012d4 	.word	0x200012d4

000050e4 <usb_dc_ep_mps>:
{
    50e4:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    50e6:	4b07      	ldr	r3, [pc, #28]	; (5104 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    50e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    50ec:	b123      	cbz	r3, 50f8 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    50ee:	f7ff f8f1 	bl	42d4 <endpoint_ctx>
	if (!ep_ctx) {
    50f2:	b120      	cbz	r0, 50fe <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    50f4:	6840      	ldr	r0, [r0, #4]
}
    50f6:	bd08      	pop	{r3, pc}
		return -ENODEV;
    50f8:	f06f 0012 	mvn.w	r0, #18
    50fc:	e7fb      	b.n	50f6 <usb_dc_ep_mps+0x12>
		return -EINVAL;
    50fe:	f06f 0015 	mvn.w	r0, #21
    5102:	e7f8      	b.n	50f6 <usb_dc_ep_mps+0x12>
    5104:	200012d4 	.word	0x200012d4

00005108 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    5108:	4b08      	ldr	r3, [pc, #32]	; (512c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    510a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    510c:	1ac3      	subs	r3, r0, r3
{
    510e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    5110:	4907      	ldr	r1, [pc, #28]	; (5130 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    5112:	109b      	asrs	r3, r3, #2
{
    5114:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    5116:	4359      	muls	r1, r3
    5118:	4806      	ldr	r0, [pc, #24]	; (5134 <onoff_stop+0x2c>)
    511a:	2240      	movs	r2, #64	; 0x40
    511c:	f006 fa9e 	bl	b65c <stop>
	notify(mgr, res);
    5120:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    5122:	4601      	mov	r1, r0
	notify(mgr, res);
    5124:	4620      	mov	r0, r4
}
    5126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    512a:	4718      	bx	r3
    512c:	20001574 	.word	0x20001574
    5130:	b6db6db7 	.word	0xb6db6db7
    5134:	0000c5a0 	.word	0x0000c5a0

00005138 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5138:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    513a:	4c0c      	ldr	r4, [pc, #48]	; (516c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    513c:	4a0c      	ldr	r2, [pc, #48]	; (5170 <onoff_start+0x38>)
    513e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    5140:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5142:	9300      	str	r3, [sp, #0]
{
    5144:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5146:	460b      	mov	r3, r1
    5148:	490a      	ldr	r1, [pc, #40]	; (5174 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    514a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    514c:	4361      	muls	r1, r4
{
    514e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5150:	4809      	ldr	r0, [pc, #36]	; (5178 <onoff_start+0x40>)
    5152:	f006 fab0 	bl	b6b6 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    5156:	1e01      	subs	r1, r0, #0
    5158:	da05      	bge.n	5166 <onoff_start+0x2e>
		notify(mgr, err);
    515a:	4630      	mov	r0, r6
    515c:	462b      	mov	r3, r5
	}
}
    515e:	b002      	add	sp, #8
    5160:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    5164:	4718      	bx	r3
}
    5166:	b002      	add	sp, #8
    5168:	bd70      	pop	{r4, r5, r6, pc}
    516a:	bf00      	nop
    516c:	20001574 	.word	0x20001574
    5170:	0000b725 	.word	0x0000b725
    5174:	b6db6db7 	.word	0xb6db6db7
    5178:	0000c5a0 	.word	0x0000c5a0

0000517c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    517c:	2200      	movs	r2, #0
{
    517e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5180:	2101      	movs	r1, #1
{
    5182:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5184:	4610      	mov	r0, r2
    5186:	f7fe f97f 	bl	3488 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    518a:	4811      	ldr	r0, [pc, #68]	; (51d0 <clk_init+0x54>)
    518c:	f002 f958 	bl	7440 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    5190:	4b10      	ldr	r3, [pc, #64]	; (51d4 <clk_init+0x58>)
    5192:	4298      	cmp	r0, r3
    5194:	d118      	bne.n	51c8 <clk_init+0x4c>
	hfclkaudio_init();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_DRIVER_CALIBRATION)) {
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
    5196:	6920      	ldr	r0, [r4, #16]
    5198:	f000 f9dc 	bl	5554 <z_nrf_clock_calibration_init>
	}

	nrfx_clock_enable();
    519c:	f002 f962 	bl	7464 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    51a0:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    51a2:	490d      	ldr	r1, [pc, #52]	; (51d8 <clk_init+0x5c>)
    51a4:	4630      	mov	r0, r6
    51a6:	f005 fbbd 	bl	a924 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    51aa:	2800      	cmp	r0, #0
    51ac:	db0b      	blt.n	51c6 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    51ae:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    51b0:	4909      	ldr	r1, [pc, #36]	; (51d8 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    51b2:	2501      	movs	r5, #1
    51b4:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    51b6:	f104 001c 	add.w	r0, r4, #28
    51ba:	f005 fbb3 	bl	a924 <onoff_manager_init>
		if (err < 0) {
    51be:	2800      	cmp	r0, #0
    51c0:	db01      	blt.n	51c6 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    51c2:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    51c4:	2000      	movs	r0, #0
}
    51c6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    51c8:	f06f 0004 	mvn.w	r0, #4
    51cc:	e7fb      	b.n	51c6 <clk_init+0x4a>
    51ce:	bf00      	nop
    51d0:	00005211 	.word	0x00005211
    51d4:	0bad0000 	.word	0x0bad0000
    51d8:	0000c98c 	.word	0x0000c98c

000051dc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    51dc:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    51de:	230c      	movs	r3, #12
    51e0:	4809      	ldr	r0, [pc, #36]	; (5208 <clkstarted_handle.constprop.0+0x2c>)
    51e2:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    51e4:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    51e6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    51e8:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    51ec:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    51ee:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    51f0:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    51f2:	4418      	add	r0, r3
    51f4:	f006 fa1f 	bl	b636 <set_on_state>
	if (callback) {
    51f8:	b12d      	cbz	r5, 5206 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    51fa:	4632      	mov	r2, r6
    51fc:	462b      	mov	r3, r5
    51fe:	4803      	ldr	r0, [pc, #12]	; (520c <clkstarted_handle.constprop.0+0x30>)
}
    5200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    5204:	4718      	bx	r3
}
    5206:	bd70      	pop	{r4, r5, r6, pc}
    5208:	20001574 	.word	0x20001574
    520c:	0000c5a0 	.word	0x0000c5a0

00005210 <clock_event_handler>:
	switch (event) {
    5210:	2801      	cmp	r0, #1
{
    5212:	b510      	push	{r4, lr}
    5214:	4604      	mov	r4, r0
	switch (event) {
    5216:	d00a      	beq.n	522e <clock_event_handler+0x1e>
    5218:	2803      	cmp	r0, #3
    521a:	d00c      	beq.n	5236 <clock_event_handler+0x26>
    521c:	b978      	cbnz	r0, 523e <clock_event_handler+0x2e>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    521e:	4b08      	ldr	r3, [pc, #32]	; (5240 <clock_event_handler+0x30>)
    5220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5222:	075b      	lsls	r3, r3, #29
    5224:	d10b      	bne.n	523e <clock_event_handler+0x2e>
}
    5226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    522a:	f7ff bfd7 	b.w	51dc <clkstarted_handle.constprop.0>
			z_nrf_clock_calibration_lfclk_started();
    522e:	f000 f99f 	bl	5570 <z_nrf_clock_calibration_lfclk_started>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5232:	4620      	mov	r0, r4
    5234:	e7f7      	b.n	5226 <clock_event_handler+0x16>
}
    5236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			z_nrf_clock_calibration_done_handler();
    523a:	f000 b9a7 	b.w	558c <z_nrf_clock_calibration_done_handler>
}
    523e:	bd10      	pop	{r4, pc}
    5240:	20001574 	.word	0x20001574

00005244 <generic_hfclk_start>:
{
    5244:	b508      	push	{r3, lr}
	__asm__ volatile(
    5246:	f04f 0320 	mov.w	r3, #32
    524a:	f3ef 8111 	mrs	r1, BASEPRI
    524e:	f383 8812 	msr	BASEPRI_MAX, r3
    5252:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    5256:	4a12      	ldr	r2, [pc, #72]	; (52a0 <generic_hfclk_start+0x5c>)
    5258:	6813      	ldr	r3, [r2, #0]
    525a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    525e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    5262:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    5264:	d00c      	beq.n	5280 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5266:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    526a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    526e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    5272:	f013 0301 	ands.w	r3, r3, #1
    5276:	d003      	beq.n	5280 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    5278:	480a      	ldr	r0, [pc, #40]	; (52a4 <generic_hfclk_start+0x60>)
    527a:	f006 f9dc 	bl	b636 <set_on_state>
			already_started = true;
    527e:	2301      	movs	r3, #1
	__asm__ volatile(
    5280:	f381 8811 	msr	BASEPRI, r1
    5284:	f3bf 8f6f 	isb	sy
	if (already_started) {
    5288:	b123      	cbz	r3, 5294 <generic_hfclk_start+0x50>
}
    528a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    528e:	2000      	movs	r0, #0
    5290:	f7ff bfa4 	b.w	51dc <clkstarted_handle.constprop.0>
}
    5294:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5298:	2001      	movs	r0, #1
    529a:	f006 bc5e 	b.w	bb5a <nrfx_clock_start>
    529e:	bf00      	nop
    52a0:	200015c4 	.word	0x200015c4
    52a4:	200015b4 	.word	0x200015b4

000052a8 <api_blocking_start>:
{
    52a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    52aa:	2200      	movs	r2, #0
    52ac:	2301      	movs	r3, #1
    52ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    52b2:	4a09      	ldr	r2, [pc, #36]	; (52d8 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    52b4:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    52b8:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    52ba:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    52be:	f006 fa2a 	bl	b716 <api_start>
	if (err < 0) {
    52c2:	2800      	cmp	r0, #0
    52c4:	db05      	blt.n	52d2 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    52c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    52ca:	2300      	movs	r3, #0
    52cc:	4668      	mov	r0, sp
    52ce:	f004 fb0f 	bl	98f0 <z_impl_k_sem_take>
}
    52d2:	b005      	add	sp, #20
    52d4:	f85d fb04 	ldr.w	pc, [sp], #4
    52d8:	0000b73d 	.word	0x0000b73d

000052dc <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    52dc:	4b09      	ldr	r3, [pc, #36]	; (5304 <generic_hfclk_stop+0x28>)
    52de:	f3bf 8f5b 	dmb	ish
    52e2:	e853 2f00 	ldrex	r2, [r3]
    52e6:	f022 0102 	bic.w	r1, r2, #2
    52ea:	e843 1000 	strex	r0, r1, [r3]
    52ee:	2800      	cmp	r0, #0
    52f0:	d1f7      	bne.n	52e2 <generic_hfclk_stop+0x6>
    52f2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    52f6:	07d3      	lsls	r3, r2, #31
    52f8:	d402      	bmi.n	5300 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    52fa:	2001      	movs	r0, #1
    52fc:	f006 bc65 	b.w	bbca <nrfx_clock_stop>
}
    5300:	4770      	bx	lr
    5302:	bf00      	nop
    5304:	200015c4 	.word	0x200015c4

00005308 <z_nrf_clock_control_get_onoff>:
}
    5308:	4a02      	ldr	r2, [pc, #8]	; (5314 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    530a:	b2c3      	uxtb	r3, r0
}
    530c:	201c      	movs	r0, #28
    530e:	fb03 2000 	mla	r0, r3, r0, r2
    5312:	4770      	bx	lr
    5314:	20001574 	.word	0x20001574

00005318 <z_nrf_clock_control_lf_on>:
{
    5318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    531a:	4928      	ldr	r1, [pc, #160]	; (53bc <z_nrf_clock_control_lf_on+0xa4>)
    531c:	f3bf 8f5b 	dmb	ish
    5320:	4606      	mov	r6, r0
    5322:	2201      	movs	r2, #1
    5324:	e851 3f00 	ldrex	r3, [r1]
    5328:	e841 2000 	strex	r0, r2, [r1]
    532c:	2800      	cmp	r0, #0
    532e:	d1f9      	bne.n	5324 <z_nrf_clock_control_lf_on+0xc>
    5330:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    5334:	b933      	cbnz	r3, 5344 <z_nrf_clock_control_lf_on+0x2c>
    5336:	4922      	ldr	r1, [pc, #136]	; (53c0 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
    5338:	4822      	ldr	r0, [pc, #136]	; (53c4 <z_nrf_clock_control_lf_on+0xac>)
    533a:	604b      	str	r3, [r1, #4]
    533c:	60cb      	str	r3, [r1, #12]
    533e:	608a      	str	r2, [r1, #8]
    5340:	f005 fb03 	bl	a94a <onoff_request>
	switch (start_mode) {
    5344:	1e73      	subs	r3, r6, #1
    5346:	2b01      	cmp	r3, #1
    5348:	d820      	bhi.n	538c <z_nrf_clock_control_lf_on+0x74>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    534a:	f006 fdbb 	bl	bec4 <k_is_in_isr>
    534e:	4604      	mov	r4, r0
    5350:	b910      	cbnz	r0, 5358 <z_nrf_clock_control_lf_on+0x40>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    5352:	4b1d      	ldr	r3, [pc, #116]	; (53c8 <z_nrf_clock_control_lf_on+0xb0>)
	int key = isr_mode ? irq_lock() : 0;
    5354:	781b      	ldrb	r3, [r3, #0]
    5356:	bb53      	cbnz	r3, 53ae <z_nrf_clock_control_lf_on+0x96>
	__asm__ volatile(
    5358:	f04f 0320 	mov.w	r3, #32
    535c:	f3ef 8511 	mrs	r5, BASEPRI
    5360:	f383 8812 	msr	BASEPRI_MAX, r3
    5364:	f3bf 8f6f 	isb	sy
    5368:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    536a:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    536e:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5372:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
    5376:	03d2      	lsls	r2, r2, #15
    5378:	d509      	bpl.n	538e <z_nrf_clock_control_lf_on+0x76>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    537a:	079b      	lsls	r3, r3, #30
    537c:	d001      	beq.n	5382 <z_nrf_clock_control_lf_on+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    537e:	2e01      	cmp	r6, #1
    5380:	d105      	bne.n	538e <z_nrf_clock_control_lf_on+0x76>
	if (isr_mode) {
    5382:	b174      	cbz	r4, 53a2 <z_nrf_clock_control_lf_on+0x8a>
	__asm__ volatile(
    5384:	f385 8811 	msr	BASEPRI, r5
    5388:	f3bf 8f6f 	isb	sy
}
    538c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    538e:	b11c      	cbz	r4, 5398 <z_nrf_clock_control_lf_on+0x80>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    5390:	4628      	mov	r0, r5
    5392:	f7fd ffd7 	bl	3344 <arch_cpu_atomic_idle>
}
    5396:	e7ea      	b.n	536e <z_nrf_clock_control_lf_on+0x56>
	return z_impl_k_sleep(timeout);
    5398:	2100      	movs	r1, #0
    539a:	2021      	movs	r0, #33	; 0x21
    539c:	f004 ff16 	bl	a1cc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    53a0:	e7e5      	b.n	536e <z_nrf_clock_control_lf_on+0x56>
    p_reg->INTENSET = mask;
    53a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    53a6:	2202      	movs	r2, #2
    53a8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    53ac:	e7ee      	b.n	538c <z_nrf_clock_control_lf_on+0x74>
    p_reg->INTENCLR = mask;
    53ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    53b2:	2202      	movs	r2, #2
    53b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    53b8:	4605      	mov	r5, r0
}
    53ba:	e7d6      	b.n	536a <z_nrf_clock_control_lf_on+0x52>
    53bc:	200015c8 	.word	0x200015c8
    53c0:	20001564 	.word	0x20001564
    53c4:	20001590 	.word	0x20001590
    53c8:	20001df3 	.word	0x20001df3

000053cc <temp_sensor_init.part.0>:
	total_cnt = 0;
	total_skips_cnt = 0;
}

#if CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP
static int temp_sensor_init(const struct device *arg)
    53cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
{
	temp_sensor = DEVICE_DT_GET_OR_NULL(TEMP_NODE);
	if ((temp_sensor != NULL) && !device_is_ready(temp_sensor)) {
		LOG_ERR("Temperature sensor not ready");
    53ce:	4b08      	ldr	r3, [pc, #32]	; (53f0 <temp_sensor_init.part.0+0x24>)
    53d0:	9305      	str	r3, [sp, #20]
    53d2:	2302      	movs	r3, #2
    53d4:	9304      	str	r3, [sp, #16]
    53d6:	4807      	ldr	r0, [pc, #28]	; (53f4 <temp_sensor_init.part.0+0x28>)
    53d8:	2300      	movs	r3, #0
    53da:	aa04      	add	r2, sp, #16
    53dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    53e0:	f005 ffea 	bl	b3b8 <z_impl_z_log_msg2_static_create>
		return -ENODEV;
	}

	return 0;
}
    53e4:	f06f 0012 	mvn.w	r0, #18
    53e8:	b007      	add	sp, #28
    53ea:	f85d fb04 	ldr.w	pc, [sp], #4
    53ee:	bf00      	nop
    53f0:	0000d731 	.word	0x0000d731
    53f4:	0000c790 	.word	0x0000c790

000053f8 <start_cal_process>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    53f8:	4b0d      	ldr	r3, [pc, #52]	; (5430 <start_cal_process+0x38>)
    53fa:	f3bf 8f5b 	dmb	ish
    53fe:	2201      	movs	r2, #1
    5400:	e853 1f00 	ldrex	r1, [r3]
    5404:	2900      	cmp	r1, #0
    5406:	d103      	bne.n	5410 <start_cal_process+0x18>
    5408:	e843 2000 	strex	r0, r2, [r3]
    540c:	2800      	cmp	r0, #0
    540e:	d1f7      	bne.n	5400 <start_cal_process+0x8>
    5410:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&cal_process_in_progress, 0, 1) == false) {
    5414:	d10a      	bne.n	542c <start_cal_process+0x34>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    5416:	4907      	ldr	r1, [pc, #28]	; (5434 <start_cal_process+0x3c>)
    5418:	2300      	movs	r3, #0
    541a:	60cb      	str	r3, [r1, #12]
    541c:	4b06      	ldr	r3, [pc, #24]	; (5438 <start_cal_process+0x40>)
    541e:	604b      	str	r3, [r1, #4]
    5420:	2303      	movs	r3, #3
    5422:	608b      	str	r3, [r1, #8]
	err = onoff_request(mgr, cli);
    5424:	4b05      	ldr	r3, [pc, #20]	; (543c <start_cal_process+0x44>)
    5426:	6818      	ldr	r0, [r3, #0]
    5428:	f005 ba8f 	b.w	a94a <onoff_request>
}
    542c:	4770      	bx	lr
    542e:	bf00      	nop
    5430:	200015cc 	.word	0x200015cc
    5434:	200015d0 	.word	0x200015d0
    5438:	00005529 	.word	0x00005529
    543c:	200015e0 	.word	0x200015e0

00005440 <temp_sensor_init>:
{
    5440:	b508      	push	{r3, lr}
	temp_sensor = DEVICE_DT_GET_OR_NULL(TEMP_NODE);
    5442:	4b06      	ldr	r3, [pc, #24]	; (545c <temp_sensor_init+0x1c>)
    5444:	4806      	ldr	r0, [pc, #24]	; (5460 <temp_sensor_init+0x20>)
    5446:	6018      	str	r0, [r3, #0]
    5448:	f006 fd05 	bl	be56 <z_device_is_ready>
	if ((temp_sensor != NULL) && !device_is_ready(temp_sensor)) {
    544c:	b918      	cbnz	r0, 5456 <temp_sensor_init+0x16>
}
    544e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5452:	f7ff bfbb 	b.w	53cc <temp_sensor_init.part.0>
    5456:	2000      	movs	r0, #0
    5458:	bd08      	pop	{r3, pc}
    545a:	bf00      	nop
    545c:	200015e4 	.word	0x200015e4
    5460:	0000c618 	.word	0x0000c618

00005464 <start_cycle>:
{
    5464:	b507      	push	{r0, r1, r2, lr}
	z_impl_k_timer_start(timer, duration, period);
    5466:	2200      	movs	r2, #0
    5468:	2300      	movs	r3, #0
    546a:	e9cd 2300 	strd	r2, r3, [sp]
    546e:	4808      	ldr	r0, [pc, #32]	; (5490 <start_cycle+0x2c>)
    5470:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5474:	2300      	movs	r3, #0
    5476:	f005 f8c5 	bl	a604 <z_impl_k_timer_start>
	clk_release(&mgrs[CLOCK_CONTROL_NRF_TYPE_HFCLK]);
    547a:	4b06      	ldr	r3, [pc, #24]	; (5494 <start_cycle+0x30>)
	err = onoff_release(mgr);
    547c:	6818      	ldr	r0, [r3, #0]
    547e:	f005 faad 	bl	a9dc <onoff_release>
	cal_process_in_progress = 0;
    5482:	4b05      	ldr	r3, [pc, #20]	; (5498 <start_cycle+0x34>)
    5484:	2200      	movs	r2, #0
    5486:	601a      	str	r2, [r3, #0]
}
    5488:	b003      	add	sp, #12
    548a:	f85d fb04 	ldr.w	pc, [sp], #4
    548e:	bf00      	nop
    5490:	20000118 	.word	0x20000118
    5494:	200015e0 	.word	0x200015e0
    5498:	200015cc 	.word	0x200015cc

0000549c <measure_temperature>:
{
    549c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int rc = sensor_sample_fetch(temp_sensor);
    549e:	4d1d      	ldr	r5, [pc, #116]	; (5514 <measure_temperature+0x78>)
    54a0:	6828      	ldr	r0, [r5, #0]
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    54a2:	6883      	ldr	r3, [r0, #8]
    54a4:	4c1c      	ldr	r4, [pc, #112]	; (5518 <measure_temperature+0x7c>)
    54a6:	68db      	ldr	r3, [r3, #12]
    54a8:	2139      	movs	r1, #57	; 0x39
    54aa:	4798      	blx	r3
	if (rc == 0) {
    54ac:	b170      	cbz	r0, 54cc <measure_temperature+0x30>
		calib_skip_cnt = 0;
    54ae:	2300      	movs	r3, #0
    54b0:	7023      	strb	r3, [r4, #0]
	int16_t diff = 0;
    54b2:	461a      	mov	r2, r3
	if ((calib_skip_cnt == 0) ||
    54b4:	7821      	ldrb	r1, [r4, #0]
    54b6:	b109      	cbz	r1, 54bc <measure_temperature+0x20>
    54b8:	2a01      	cmp	r2, #1
    54ba:	dd20      	ble.n	54fe <measure_temperature+0x62>
		prev_temperature = temperature;
    54bc:	4a17      	ldr	r2, [pc, #92]	; (551c <measure_temperature+0x80>)
    54be:	8013      	strh	r3, [r2, #0]
	nrfx_clock_calibration_start();
    54c0:	f001 ffe2 	bl	7488 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    54c4:	2301      	movs	r3, #1
    54c6:	7023      	strb	r3, [r4, #0]
}
    54c8:	b003      	add	sp, #12
    54ca:	bd30      	pop	{r4, r5, pc}
		rc = sensor_channel_get(temp_sensor, SENSOR_CHAN_DIE_TEMP,
    54cc:	6828      	ldr	r0, [r5, #0]
	return api->channel_get(dev, chan, val);
    54ce:	6883      	ldr	r3, [r0, #8]
    54d0:	466a      	mov	r2, sp
    54d2:	691b      	ldr	r3, [r3, #16]
    54d4:	210c      	movs	r1, #12
    54d6:	4798      	blx	r3
	if (rc == 0) {
    54d8:	2800      	cmp	r0, #0
    54da:	d1e8      	bne.n	54ae <measure_temperature+0x12>
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    54dc:	4a10      	ldr	r2, [pc, #64]	; (5520 <measure_temperature+0x84>)
    54de:	9b01      	ldr	r3, [sp, #4]
    54e0:	fb93 f3f2 	sdiv	r3, r3, r2
    54e4:	9a00      	ldr	r2, [sp, #0]
    54e6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		diff = abs(temperature - prev_temperature);
    54ea:	4a0c      	ldr	r2, [pc, #48]	; (551c <measure_temperature+0x80>)
    54ec:	f9b2 2000 	ldrsh.w	r2, [r2]
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    54f0:	b21b      	sxth	r3, r3
		diff = abs(temperature - prev_temperature);
    54f2:	1a9a      	subs	r2, r3, r2
void srand(unsigned int seed);
#endif /* CONFIG_MINIMAL_LIBC_RAND */

static inline int abs(int __n)
{
	return (__n < 0) ? -__n : __n;
    54f4:	2a00      	cmp	r2, #0
    54f6:	bfb8      	it	lt
    54f8:	4252      	neglt	r2, r2
    54fa:	b212      	sxth	r2, r2
    54fc:	e7da      	b.n	54b4 <measure_temperature+0x18>
		total_skips_cnt++;
    54fe:	4a09      	ldr	r2, [pc, #36]	; (5524 <measure_temperature+0x88>)
    5500:	6813      	ldr	r3, [r2, #0]
		calib_skip_cnt--;
    5502:	3901      	subs	r1, #1
		total_skips_cnt++;
    5504:	3301      	adds	r3, #1
		calib_skip_cnt--;
    5506:	7021      	strb	r1, [r4, #0]
		total_skips_cnt++;
    5508:	6013      	str	r3, [r2, #0]
}
    550a:	b003      	add	sp, #12
    550c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		start_cycle();
    5510:	f7ff bfa8 	b.w	5464 <start_cycle>
    5514:	200015e4 	.word	0x200015e4
    5518:	200019d9 	.word	0x200019d9
    551c:	200019b0 	.word	0x200019b0
    5520:	0003d090 	.word	0x0003d090
    5524:	200015ec 	.word	0x200015ec

00005528 <cal_hf_callback>:
{
    5528:	b508      	push	{r3, lr}
	if ((temp_sensor == NULL) || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    552a:	4b07      	ldr	r3, [pc, #28]	; (5548 <cal_hf_callback+0x20>)
    552c:	681b      	ldr	r3, [r3, #0]
    552e:	b92b      	cbnz	r3, 553c <cal_hf_callback+0x14>
	nrfx_clock_calibration_start();
    5530:	f001 ffaa 	bl	7488 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    5534:	4b05      	ldr	r3, [pc, #20]	; (554c <cal_hf_callback+0x24>)
    5536:	2201      	movs	r2, #1
    5538:	701a      	strb	r2, [r3, #0]
}
    553a:	bd08      	pop	{r3, pc}
    553c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_submit(&temp_measure_work);
    5540:	4803      	ldr	r0, [pc, #12]	; (5550 <cal_hf_callback+0x28>)
    5542:	f004 bafd 	b.w	9b40 <k_work_submit>
    5546:	bf00      	nop
    5548:	200015e4 	.word	0x200015e4
    554c:	200019d9 	.word	0x200019d9
    5550:	20000018 	.word	0x20000018

00005554 <z_nrf_clock_calibration_init>:
	mgrs = onoff_mgrs;
    5554:	4b03      	ldr	r3, [pc, #12]	; (5564 <z_nrf_clock_calibration_init+0x10>)
	total_cnt = 0;
    5556:	4a04      	ldr	r2, [pc, #16]	; (5568 <z_nrf_clock_calibration_init+0x14>)
	mgrs = onoff_mgrs;
    5558:	6018      	str	r0, [r3, #0]
	total_cnt = 0;
    555a:	2300      	movs	r3, #0
    555c:	6013      	str	r3, [r2, #0]
	total_skips_cnt = 0;
    555e:	4a03      	ldr	r2, [pc, #12]	; (556c <z_nrf_clock_calibration_init+0x18>)
    5560:	6013      	str	r3, [r2, #0]
}
    5562:	4770      	bx	lr
    5564:	200015e0 	.word	0x200015e0
    5568:	200015e8 	.word	0x200015e8
    556c:	200015ec 	.word	0x200015ec

00005570 <z_nrf_clock_calibration_lfclk_started>:
SYS_INIT(temp_sensor_init, APPLICATION, 0);
#endif /* CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP */

static void start_unconditional_cal_process(void)
{
	calib_skip_cnt = 0;
    5570:	4b02      	ldr	r3, [pc, #8]	; (557c <z_nrf_clock_calibration_lfclk_started+0xc>)
    5572:	2200      	movs	r2, #0
    5574:	701a      	strb	r2, [r3, #0]
	start_cal_process();
    5576:	f7ff bf3f 	b.w	53f8 <start_cal_process>
    557a:	bf00      	nop
    557c:	200019d9 	.word	0x200019d9

00005580 <z_nrf_clock_calibration_lfclk_stopped>:
	z_impl_k_timer_stop(timer);
    5580:	4801      	ldr	r0, [pc, #4]	; (5588 <z_nrf_clock_calibration_lfclk_stopped+0x8>)
    5582:	f006 bf34 	b.w	c3ee <z_impl_k_timer_stop>
    5586:	bf00      	nop
    5588:	20000118 	.word	0x20000118

0000558c <z_nrf_clock_calibration_done_handler>:
	LOG_DBG("Calibration stopped");
}

void z_nrf_clock_calibration_done_handler(void)
{
	total_cnt++;
    558c:	4a02      	ldr	r2, [pc, #8]	; (5598 <z_nrf_clock_calibration_done_handler+0xc>)
    558e:	6813      	ldr	r3, [r2, #0]
    5590:	3301      	adds	r3, #1
    5592:	6013      	str	r3, [r2, #0]
	LOG_DBG("Calibration done.");

	start_cycle();
    5594:	f7ff bf66 	b.w	5464 <start_cycle>
    5598:	200015e8 	.word	0x200015e8

0000559c <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    559c:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    559e:	4c04      	ldr	r4, [pc, #16]	; (55b0 <rtt_console_init+0x14>)
    55a0:	4620      	mov	r0, r4
    55a2:	f7fb fcc1 	bl	f28 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    55a6:	4620      	mov	r0, r4
    55a8:	f7fe fcb4 	bl	3f14 <__stdout_hook_install>

	return 0;
}
    55ac:	2000      	movs	r0, #0
    55ae:	bd10      	pop	{r4, pc}
    55b0:	000055b5 	.word	0x000055b5

000055b4 <rtt_console_out>:
{
    55b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    55b8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5618 <rtt_console_out+0x64>
    55bc:	4e17      	ldr	r6, [pc, #92]	; (561c <rtt_console_out+0x68>)
	char c = (char)character;
    55be:	f88d 0007 	strb.w	r0, [sp, #7]
{
    55c2:	4604      	mov	r4, r0
	char c = (char)character;
    55c4:	2503      	movs	r5, #3
    55c6:	f04f 33ff 	mov.w	r3, #4294967295
    55ca:	f04f 32ff 	mov.w	r2, #4294967295
    55ce:	4640      	mov	r0, r8
    55d0:	f004 f880 	bl	96d4 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    55d4:	2201      	movs	r2, #1
    55d6:	f10d 0107 	add.w	r1, sp, #7
    55da:	2000      	movs	r0, #0
    55dc:	f003 fd8a 	bl	90f4 <SEGGER_RTT_WriteNoLock>
    55e0:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    55e2:	4640      	mov	r0, r8
    55e4:	f004 f8ee 	bl	97c4 <z_impl_k_mutex_unlock>
		if (cnt) {
    55e8:	b12f      	cbz	r7, 55f6 <rtt_console_out+0x42>
			host_present = true;
    55ea:	2301      	movs	r3, #1
    55ec:	7033      	strb	r3, [r6, #0]
}
    55ee:	4620      	mov	r0, r4
    55f0:	b002      	add	sp, #8
    55f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    55f6:	7833      	ldrb	r3, [r6, #0]
    55f8:	2b00      	cmp	r3, #0
    55fa:	d0f8      	beq.n	55ee <rtt_console_out+0x3a>
			if (max_cnt) {
    55fc:	3d01      	subs	r5, #1
    55fe:	d008      	beq.n	5612 <rtt_console_out+0x5e>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    5600:	f006 fc60 	bl	bec4 <k_is_in_isr>
    5604:	2800      	cmp	r0, #0
    5606:	d1de      	bne.n	55c6 <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    5608:	2100      	movs	r1, #0
    560a:	2042      	movs	r0, #66	; 0x42
    560c:	f004 fdde 	bl	a1cc <z_impl_k_sleep>
    5610:	e7d9      	b.n	55c6 <rtt_console_out+0x12>
				host_present = false;
    5612:	7035      	strb	r5, [r6, #0]
    5614:	e7eb      	b.n	55ee <rtt_console_out+0x3a>
    5616:	bf00      	nop
    5618:	2000016c 	.word	0x2000016c
    561c:	200019da 	.word	0x200019da

00005620 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    5620:	b530      	push	{r4, r5, lr}
	return port->config;
    5622:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5624:	7b04      	ldrb	r4, [r0, #12]
    5626:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    562a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    562e:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    5632:	b085      	sub	sp, #20
    5634:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    5638:	d104      	bne.n	5644 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    563a:	4628      	mov	r0, r5
    563c:	f002 f9bc 	bl	79b8 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    5640:	2000      	movs	r0, #0
    5642:	e02e      	b.n	56a2 <gpio_nrfx_pin_interrupt_configure+0x82>
	if (mode == GPIO_INT_MODE_LEVEL) {
    5644:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    5648:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    564c:	d12b      	bne.n	56a6 <gpio_nrfx_pin_interrupt_configure+0x86>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    564e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    5652:	bf0c      	ite	eq
    5654:	2304      	moveq	r3, #4
    5656:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    5658:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    565c:	6883      	ldr	r3, [r0, #8]
    565e:	fa23 f101 	lsr.w	r1, r3, r1
    5662:	07c9      	lsls	r1, r1, #31
    5664:	d42b      	bmi.n	56be <gpio_nrfx_pin_interrupt_configure+0x9e>
    5666:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    566a:	d128      	bne.n	56be <gpio_nrfx_pin_interrupt_configure+0x9e>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    566c:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5670:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5674:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    567c:	07db      	lsls	r3, r3, #31
    567e:	d41e      	bmi.n	56be <gpio_nrfx_pin_interrupt_configure+0x9e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5680:	f10d 0407 	add.w	r4, sp, #7
    5684:	4621      	mov	r1, r4
    5686:	4628      	mov	r0, r5
    5688:	f002 f8fe 	bl	7888 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    568c:	4b14      	ldr	r3, [pc, #80]	; (56e0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    568e:	4298      	cmp	r0, r3
    5690:	d114      	bne.n	56bc <gpio_nrfx_pin_interrupt_configure+0x9c>
			err = nrfx_gpiote_channel_alloc(&ch);
    5692:	4620      	mov	r0, r4
    5694:	f002 f946 	bl	7924 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    5698:	4b12      	ldr	r3, [pc, #72]	; (56e4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    569a:	4298      	cmp	r0, r3
    569c:	d00e      	beq.n	56bc <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
    569e:	f06f 000b 	mvn.w	r0, #11
}
    56a2:	b005      	add	sp, #20
    56a4:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    56a6:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    56aa:	d005      	beq.n	56b8 <gpio_nrfx_pin_interrupt_configure+0x98>
    56ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    56b0:	bf0c      	ite	eq
    56b2:	2302      	moveq	r3, #2
    56b4:	2301      	movne	r3, #1
    56b6:	e7cf      	b.n	5658 <gpio_nrfx_pin_interrupt_configure+0x38>
    56b8:	2303      	movs	r3, #3
    56ba:	e7cd      	b.n	5658 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    56bc:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    56be:	2300      	movs	r3, #0
    56c0:	4619      	mov	r1, r3
    56c2:	aa02      	add	r2, sp, #8
    56c4:	4628      	mov	r0, r5
    56c6:	f001 ffb7 	bl	7638 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    56ca:	4b06      	ldr	r3, [pc, #24]	; (56e4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    56cc:	4298      	cmp	r0, r3
    56ce:	d104      	bne.n	56da <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    56d0:	2101      	movs	r1, #1
    56d2:	4628      	mov	r0, r5
    56d4:	f002 f92c 	bl	7930 <nrfx_gpiote_trigger_enable>
    56d8:	e7b2      	b.n	5640 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    56da:	f06f 0004 	mvn.w	r0, #4
    56de:	e7e0      	b.n	56a2 <gpio_nrfx_pin_interrupt_configure+0x82>
    56e0:	0bad0004 	.word	0x0bad0004
    56e4:	0bad0000 	.word	0x0bad0000

000056e8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    56e8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    56ea:	f002 f90b 	bl	7904 <nrfx_gpiote_is_init>
    56ee:	4604      	mov	r4, r0
    56f0:	b968      	cbnz	r0, 570e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    56f2:	f002 f8df 	bl	78b4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    56f6:	4b08      	ldr	r3, [pc, #32]	; (5718 <gpio_nrfx_init+0x30>)
    56f8:	4298      	cmp	r0, r3
    56fa:	d10a      	bne.n	5712 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    56fc:	4807      	ldr	r0, [pc, #28]	; (571c <gpio_nrfx_init+0x34>)
    56fe:	4621      	mov	r1, r4
    5700:	f002 f8bc 	bl	787c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    5704:	4622      	mov	r2, r4
    5706:	2105      	movs	r1, #5
    5708:	2006      	movs	r0, #6
    570a:	f7fd febd 	bl	3488 <z_arm_irq_priority_set>
		return 0;
    570e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    5710:	bd10      	pop	{r4, pc}
		return -EIO;
    5712:	f06f 0004 	mvn.w	r0, #4
    5716:	e7fb      	b.n	5710 <gpio_nrfx_init+0x28>
    5718:	0bad0000 	.word	0x0bad0000
    571c:	00005721 	.word	0x00005721

00005720 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5720:	0943      	lsrs	r3, r0, #5
{
    5722:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5724:	d110      	bne.n	5748 <nrfx_gpio_handler+0x28>
	return list->head;
    5726:	4b09      	ldr	r3, [pc, #36]	; (574c <nrfx_gpio_handler+0x2c>)
    5728:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    572a:	b169      	cbz	r1, 5748 <nrfx_gpio_handler+0x28>
	gpio_fire_callbacks(list, port, BIT(pin));
    572c:	2501      	movs	r5, #1
	return node->next;
    572e:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5730:	4e07      	ldr	r6, [pc, #28]	; (5750 <nrfx_gpio_handler+0x30>)
    5732:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
    5734:	688a      	ldr	r2, [r1, #8]
    5736:	402a      	ands	r2, r5
    5738:	d002      	beq.n	5740 <nrfx_gpio_handler+0x20>
			cb->handler(port, cb, cb->pin_mask & pins);
    573a:	684b      	ldr	r3, [r1, #4]
    573c:	4630      	mov	r0, r6
    573e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5740:	b114      	cbz	r4, 5748 <nrfx_gpio_handler+0x28>
    5742:	4621      	mov	r1, r4
    5744:	6824      	ldr	r4, [r4, #0]
    5746:	e7f5      	b.n	5734 <nrfx_gpio_handler+0x14>
}
    5748:	bd70      	pop	{r4, r5, r6, pc}
    574a:	bf00      	nop
    574c:	200015f0 	.word	0x200015f0
    5750:	0000c5b8 	.word	0x0000c5b8

00005754 <gpio_nrfx_pin_configure>:
{
    5754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    5758:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    575a:	7b3b      	ldrb	r3, [r7, #12]
    575c:	f001 051f 	and.w	r5, r1, #31
{
    5760:	b085      	sub	sp, #20
    5762:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5764:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    5768:	4614      	mov	r4, r2
    576a:	b9ca      	cbnz	r2, 57a0 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    576c:	a902      	add	r1, sp, #8
    576e:	4628      	mov	r0, r5
    5770:	f002 f88a 	bl	7888 <nrfx_gpiote_channel_get>
    5774:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    5776:	4628      	mov	r0, r5
    5778:	f002 f946 	bl	7a08 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    577c:	4b4a      	ldr	r3, [pc, #296]	; (58a8 <gpio_nrfx_pin_configure+0x154>)
    577e:	4298      	cmp	r0, r3
    5780:	d004      	beq.n	578c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    5782:	f06f 0004 	mvn.w	r0, #4
}
    5786:	b005      	add	sp, #20
    5788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    578c:	4284      	cmp	r4, r0
    578e:	d105      	bne.n	579c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    5790:	f89d 0008 	ldrb.w	r0, [sp, #8]
    5794:	f002 f8c0 	bl	7918 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    5798:	42a0      	cmp	r0, r4
    579a:	d1f2      	bne.n	5782 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    579c:	2000      	movs	r0, #0
    579e:	e7f2      	b.n	5786 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    57a0:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    57a4:	f10d 0103 	add.w	r1, sp, #3
    57a8:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    57aa:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    57ae:	f002 f86b 	bl	7888 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    57b2:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    57b4:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    57b6:	aa02      	add	r2, sp, #8
    57b8:	4649      	mov	r1, r9
    57ba:	4628      	mov	r0, r5
    57bc:	f001 ff3c 	bl	7638 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    57c0:	4b39      	ldr	r3, [pc, #228]	; (58a8 <gpio_nrfx_pin_configure+0x154>)
    57c2:	4298      	cmp	r0, r3
    57c4:	d002      	beq.n	57cc <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    57c6:	f06f 0015 	mvn.w	r0, #21
    57ca:	e7dc      	b.n	5786 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    57cc:	4580      	cmp	r8, r0
    57ce:	d103      	bne.n	57d8 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    57d0:	f89d 0003 	ldrb.w	r0, [sp, #3]
    57d4:	f002 f8a0 	bl	7918 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    57d8:	03a3      	lsls	r3, r4, #14
    57da:	d551      	bpl.n	5880 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    57dc:	f240 6306 	movw	r3, #1542	; 0x606
    57e0:	4023      	ands	r3, r4
    57e2:	f240 2206 	movw	r2, #518	; 0x206
    57e6:	4293      	cmp	r3, r2
    57e8:	d03b      	beq.n	5862 <gpio_nrfx_pin_configure+0x10e>
    57ea:	d80c      	bhi.n	5806 <gpio_nrfx_pin_configure+0xb2>
    57ec:	2b06      	cmp	r3, #6
    57ee:	d015      	beq.n	581c <gpio_nrfx_pin_configure+0xc8>
    57f0:	d804      	bhi.n	57fc <gpio_nrfx_pin_configure+0xa8>
    57f2:	b19b      	cbz	r3, 581c <gpio_nrfx_pin_configure+0xc8>
    57f4:	2b02      	cmp	r3, #2
    57f6:	d1e6      	bne.n	57c6 <gpio_nrfx_pin_configure+0x72>
    57f8:	2304      	movs	r3, #4
    57fa:	e00f      	b.n	581c <gpio_nrfx_pin_configure+0xc8>
    57fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5800:	d1e1      	bne.n	57c6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    5802:	2301      	movs	r3, #1
    5804:	e00a      	b.n	581c <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    5806:	f240 4202 	movw	r2, #1026	; 0x402
    580a:	4293      	cmp	r3, r2
    580c:	d02b      	beq.n	5866 <gpio_nrfx_pin_configure+0x112>
    580e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    5812:	d02a      	beq.n	586a <gpio_nrfx_pin_configure+0x116>
    5814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    5818:	d1d5      	bne.n	57c6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    581a:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    581c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    5820:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    5824:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    5828:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    582a:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    582e:	bf54      	ite	pl
    5830:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    5834:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5836:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    5838:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    583c:	d517      	bpl.n	586e <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    583e:	687b      	ldr	r3, [r7, #4]
    5840:	2101      	movs	r1, #1
    5842:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    5846:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    584a:	2200      	movs	r2, #0
    584c:	a901      	add	r1, sp, #4
    584e:	4628      	mov	r0, r5
    5850:	f001 ff9c 	bl	778c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5854:	4b14      	ldr	r3, [pc, #80]	; (58a8 <gpio_nrfx_pin_configure+0x154>)
    5856:	4298      	cmp	r0, r3
    5858:	bf14      	ite	ne
    585a:	f06f 0015 	mvnne.w	r0, #21
    585e:	2000      	moveq	r0, #0
    5860:	e791      	b.n	5786 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    5862:	2307      	movs	r3, #7
    5864:	e7da      	b.n	581c <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    5866:	2305      	movs	r3, #5
    5868:	e7d8      	b.n	581c <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    586a:	2303      	movs	r3, #3
    586c:	e7d6      	b.n	581c <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    586e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    5870:	bf41      	itttt	mi
    5872:	687b      	ldrmi	r3, [r7, #4]
    5874:	2101      	movmi	r1, #1
    5876:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    587a:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    587e:	e7e4      	b.n	584a <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    5880:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5882:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    5886:	bf54      	ite	pl
    5888:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    588c:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    588e:	461a      	mov	r2, r3
    5890:	a901      	add	r1, sp, #4
    5892:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    5894:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5898:	f001 fece 	bl	7638 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    589c:	4b02      	ldr	r3, [pc, #8]	; (58a8 <gpio_nrfx_pin_configure+0x154>)
    589e:	4298      	cmp	r0, r3
    58a0:	f43f af7c 	beq.w	579c <gpio_nrfx_pin_configure+0x48>
    58a4:	e78f      	b.n	57c6 <gpio_nrfx_pin_configure+0x72>
    58a6:	bf00      	nop
    58a8:	0bad0000 	.word	0x0bad0000

000058ac <qdec_nrfx_channel_get>:
	const int32_t steps = DT_INST_PROP(0, steps);

	ARG_UNUSED(dev);
	LOG_DBG("");

	if (chan != SENSOR_CHAN_ROTATION) {
    58ac:	2922      	cmp	r1, #34	; 0x22
{
    58ae:	b510      	push	{r4, lr}
	if (chan != SENSOR_CHAN_ROTATION) {
    58b0:	d115      	bne.n	58de <qdec_nrfx_channel_get+0x32>
	__asm__ volatile(
    58b2:	f04f 0320 	mov.w	r3, #32
    58b6:	f3ef 8011 	mrs	r0, BASEPRI
    58ba:	f383 8812 	msr	BASEPRI_MAX, r3
    58be:	f3bf 8f6f 	isb	sy
		return -ENOTSUP;
	}

	key = irq_lock();
	acc = data->acc;
    58c2:	4908      	ldr	r1, [pc, #32]	; (58e4 <qdec_nrfx_channel_get+0x38>)
	data->acc = 0;
    58c4:	2400      	movs	r4, #0
	acc = data->acc;
    58c6:	680b      	ldr	r3, [r1, #0]
	data->acc = 0;
    58c8:	600c      	str	r4, [r1, #0]
	__asm__ volatile(
    58ca:	f380 8811 	msr	BASEPRI, r0
    58ce:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BUILD_ASSERT(steps > 0, "only positive number valid");
	BUILD_ASSERT(steps <= 2048, "overflow possible");

	val->val1 = (acc * FULL_ANGLE) / steps;
    58d2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    58d6:	6013      	str	r3, [r2, #0]
	val->val2 = (acc * FULL_ANGLE) - (val->val1 * steps);
    58d8:	4620      	mov	r0, r4
    58da:	6054      	str	r4, [r2, #4]
		val->val2 *= 1000000;
		val->val2 /= steps;
	}

	return 0;
}
    58dc:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    58de:	f06f 0085 	mvn.w	r0, #133	; 0x85
    58e2:	e7fb      	b.n	58dc <qdec_nrfx_channel_get+0x30>
    58e4:	200015fc 	.word	0x200015fc

000058e8 <qdec_nrfx_trigger_set>:
	unsigned int key;

	ARG_UNUSED(dev);
	LOG_DBG("");

	if (trig->type != SENSOR_TRIG_DATA_READY) {
    58e8:	880b      	ldrh	r3, [r1, #0]
    58ea:	2b01      	cmp	r3, #1
    58ec:	d114      	bne.n	5918 <qdec_nrfx_trigger_set+0x30>
		return -ENOTSUP;
	}

	if ((trig->chan != SENSOR_CHAN_ALL) &&
    58ee:	884b      	ldrh	r3, [r1, #2]
    58f0:	2b39      	cmp	r3, #57	; 0x39
    58f2:	d001      	beq.n	58f8 <qdec_nrfx_trigger_set+0x10>
    58f4:	2b22      	cmp	r3, #34	; 0x22
    58f6:	d10f      	bne.n	5918 <qdec_nrfx_trigger_set+0x30>
	__asm__ volatile(
    58f8:	f04f 0120 	mov.w	r1, #32
    58fc:	f3ef 8311 	mrs	r3, BASEPRI
    5900:	f381 8812 	msr	BASEPRI_MAX, r1
    5904:	f3bf 8f6f 	isb	sy
	    (trig->chan != SENSOR_CHAN_ROTATION)) {
		return -ENOTSUP;
	}

	key = irq_lock();
	data->data_ready_handler = handler;
    5908:	4905      	ldr	r1, [pc, #20]	; (5920 <qdec_nrfx_trigger_set+0x38>)
    590a:	604a      	str	r2, [r1, #4]
	__asm__ volatile(
    590c:	f383 8811 	msr	BASEPRI, r3
    5910:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	return 0;
    5914:	2000      	movs	r0, #0
    5916:	4770      	bx	lr
		return -ENOTSUP;
    5918:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    591c:	4770      	bx	lr
    591e:	bf00      	nop
    5920:	200015fc 	.word	0x200015fc

00005924 <accumulate.constprop.0>:
static void accumulate(struct qdec_nrfx_data *data, int16_t acc)
    5924:	b510      	push	{r4, lr}
	__asm__ volatile(
    5926:	f04f 0320 	mov.w	r3, #32
    592a:	f3ef 8111 	mrs	r1, BASEPRI
    592e:	f383 8812 	msr	BASEPRI_MAX, r3
    5932:	f3bf 8f6f 	isb	sy
	bool overflow = ((acc > 0) && (ACC_MAX - acc < data->acc)) ||
    5936:	2800      	cmp	r0, #0
    5938:	4b0b      	ldr	r3, [pc, #44]	; (5968 <accumulate.constprop.0+0x44>)
    593a:	dd0a      	ble.n	5952 <accumulate.constprop.0+0x2e>
    593c:	681c      	ldr	r4, [r3, #0]
    593e:	f5c0 02b6 	rsb	r2, r0, #5963776	; 0x5b0000
    5942:	f502 62b6 	add.w	r2, r2, #1456	; 0x5b0
    5946:	42a2      	cmp	r2, r4
    5948:	db09      	blt.n	595e <accumulate.constprop.0+0x3a>
		data->acc += acc;
    594a:	681a      	ldr	r2, [r3, #0]
    594c:	4410      	add	r0, r2
    594e:	6018      	str	r0, [r3, #0]
    5950:	e005      	b.n	595e <accumulate.constprop.0+0x3a>
	bool overflow = ((acc > 0) && (ACC_MAX - acc < data->acc)) ||
    5952:	d0fa      	beq.n	594a <accumulate.constprop.0+0x26>
			((acc < 0) && (ACC_MIN - acc > data->acc));
    5954:	4a05      	ldr	r2, [pc, #20]	; (596c <accumulate.constprop.0+0x48>)
    5956:	681c      	ldr	r4, [r3, #0]
    5958:	1a12      	subs	r2, r2, r0
    595a:	42a2      	cmp	r2, r4
    595c:	ddf5      	ble.n	594a <accumulate.constprop.0+0x26>
	__asm__ volatile(
    595e:	f381 8811 	msr	BASEPRI, r1
    5962:	f3bf 8f6f 	isb	sy
}
    5966:	bd10      	pop	{r4, pc}
    5968:	200015fc 	.word	0x200015fc
    596c:	ffa4fa50 	.word	0xffa4fa50

00005970 <qdec_nrfx_event_handler>:

static void qdec_nrfx_event_handler(nrfx_qdec_event_t event)
{
    5970:	b590      	push	{r4, r7, lr}
    5972:	b085      	sub	sp, #20
    5974:	af00      	add	r7, sp, #0
    5976:	e9c7 0100 	strd	r0, r1, [r7]
    597a:	883b      	ldrh	r3, [r7, #0]
	sensor_trigger_handler_t handler;
	unsigned int key;

	switch (event.type) {
    597c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
    5980:	d11d      	bne.n	59be <qdec_nrfx_event_handler+0x4e>
	case NRF_QDEC_EVENT_REPORTRDY:
		accumulate(&qdec_nrfx_data, event.data.report.acc);
    5982:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
    5986:	f7ff ffcd 	bl	5924 <accumulate.constprop.0>
	__asm__ volatile(
    598a:	f04f 0320 	mov.w	r3, #32
    598e:	f3ef 8211 	mrs	r2, BASEPRI
    5992:	f383 8812 	msr	BASEPRI_MAX, r3
    5996:	f3bf 8f6f 	isb	sy

		key = irq_lock();
		handler = qdec_nrfx_data.data_ready_handler;
    599a:	4b11      	ldr	r3, [pc, #68]	; (59e0 <qdec_nrfx_event_handler+0x70>)
    599c:	685b      	ldr	r3, [r3, #4]
	__asm__ volatile(
    599e:	f382 8811 	msr	BASEPRI, r2
    59a2:	f3bf 8f6f 	isb	sy
		irq_unlock(key);

		if (handler) {
    59a6:	b13b      	cbz	r3, 59b8 <qdec_nrfx_event_handler+0x48>
			struct sensor_trigger trig = {
    59a8:	2201      	movs	r2, #1
    59aa:	81ba      	strh	r2, [r7, #12]
    59ac:	2222      	movs	r2, #34	; 0x22
				.type = SENSOR_TRIG_DATA_READY,
				.chan = SENSOR_CHAN_ROTATION,
			};

			handler(DEVICE_DT_INST_GET(0), &trig);
    59ae:	480d      	ldr	r0, [pc, #52]	; (59e4 <qdec_nrfx_event_handler+0x74>)
			struct sensor_trigger trig = {
    59b0:	81fa      	strh	r2, [r7, #14]
			handler(DEVICE_DT_INST_GET(0), &trig);
    59b2:	f107 010c 	add.w	r1, r7, #12
    59b6:	4798      	blx	r3

	default:
		LOG_ERR("unhandled event (0x%x)", event.type);
		break;
	}
}
    59b8:	3714      	adds	r7, #20
    59ba:	46bd      	mov	sp, r7
    59bc:	bd90      	pop	{r4, r7, pc}
		LOG_ERR("unhandled event (0x%x)", event.type);
    59be:	490a      	ldr	r1, [pc, #40]	; (59e8 <qdec_nrfx_event_handler+0x78>)
    59c0:	466c      	mov	r4, sp
    59c2:	b088      	sub	sp, #32
    59c4:	466a      	mov	r2, sp
	switch (event.type) {
    59c6:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("unhandled event (0x%x)", event.type);
    59ca:	2303      	movs	r3, #3
    59cc:	f842 3f10 	str.w	r3, [r2, #16]!
    59d0:	4806      	ldr	r0, [pc, #24]	; (59ec <qdec_nrfx_event_handler+0x7c>)
    59d2:	2300      	movs	r3, #0
    59d4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    59d8:	f005 fcee 	bl	b3b8 <z_impl_z_log_msg2_static_create>
    59dc:	46a5      	mov	sp, r4
}
    59de:	e7eb      	b.n	59b8 <qdec_nrfx_event_handler+0x48>
    59e0:	200015fc 	.word	0x200015fc
    59e4:	0000c600 	.word	0x0000c600
    59e8:	0000d755 	.word	0x0000d755
    59ec:	0000c7d8 	.word	0x0000c7d8

000059f0 <qdec_nrfx_init.part.0>:
#endif
}

NRF_DT_CHECK_PIN_ASSIGNMENTS(DT_DRV_INST(0), 1, a_pin, b_pin, led_pin);

static int qdec_nrfx_init(const struct device *dev)
    59f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (ret < 0) {
		return ret;
	}
#endif

	nerr = nrfx_qdec_init(&config, qdec_nrfx_event_handler);
    59f2:	491a      	ldr	r1, [pc, #104]	; (5a5c <qdec_nrfx_init.part.0+0x6c>)
    59f4:	481a      	ldr	r0, [pc, #104]	; (5a60 <qdec_nrfx_init.part.0+0x70>)
    59f6:	f002 f9af 	bl	7d58 <nrfx_qdec_init>
	if (nerr == NRFX_ERROR_INVALID_STATE) {
    59fa:	4b1a      	ldr	r3, [pc, #104]	; (5a64 <qdec_nrfx_init.part.0+0x74>)
    59fc:	4298      	cmp	r0, r3
    59fe:	d10f      	bne.n	5a20 <qdec_nrfx_init.part.0+0x30>
		LOG_ERR("qdec already in use");
    5a00:	4b19      	ldr	r3, [pc, #100]	; (5a68 <qdec_nrfx_init.part.0+0x78>)
    5a02:	9305      	str	r3, [sp, #20]
    5a04:	2302      	movs	r3, #2
    5a06:	9304      	str	r3, [sp, #16]
    5a08:	4818      	ldr	r0, [pc, #96]	; (5a6c <qdec_nrfx_init.part.0+0x7c>)
    5a0a:	2300      	movs	r3, #0
    5a0c:	aa04      	add	r2, sp, #16
    5a0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5a12:	f005 fcd1 	bl	b3b8 <z_impl_z_log_msg2_static_create>
		return -EBUSY;
    5a16:	f06f 000f 	mvn.w	r0, #15

	qdec_nrfx_gpio_ctrl(true);
	nrfx_qdec_enable();

	return 0;
}
    5a1a:	b007      	add	sp, #28
    5a1c:	f85d fb04 	ldr.w	pc, [sp], #4
	} else if (nerr != NRFX_SUCCESS) {
    5a20:	4b13      	ldr	r3, [pc, #76]	; (5a70 <qdec_nrfx_init.part.0+0x80>)
    5a22:	4298      	cmp	r0, r3
    5a24:	d00d      	beq.n	5a42 <qdec_nrfx_init.part.0+0x52>
		LOG_ERR("failed to initialize qdec");
    5a26:	4b13      	ldr	r3, [pc, #76]	; (5a74 <qdec_nrfx_init.part.0+0x84>)
    5a28:	9305      	str	r3, [sp, #20]
    5a2a:	2302      	movs	r3, #2
    5a2c:	9304      	str	r3, [sp, #16]
    5a2e:	480f      	ldr	r0, [pc, #60]	; (5a6c <qdec_nrfx_init.part.0+0x7c>)
    5a30:	2300      	movs	r3, #0
    5a32:	aa04      	add	r2, sp, #16
    5a34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5a38:	f005 fcbe 	bl	b3b8 <z_impl_z_log_msg2_static_create>
		return -EFAULT;
    5a3c:	f06f 000d 	mvn.w	r0, #13
    5a40:	e7eb      	b.n	5a1a <qdec_nrfx_init.part.0+0x2a>
    p_reg->OUTCLR = clr_mask;
    5a42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5a46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5a4a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = cnf;
    5a4e:	2203      	movs	r2, #3
    5a50:	f8c3 2778 	str.w	r2, [r3, #1912]	; 0x778
	nrfx_qdec_enable();
    5a54:	f002 f9ec 	bl	7e30 <nrfx_qdec_enable>
	return 0;
    5a58:	2000      	movs	r0, #0
    5a5a:	e7de      	b.n	5a1a <qdec_nrfx_init.part.0+0x2a>
    5a5c:	00005971 	.word	0x00005971
    5a60:	0000c9e8 	.word	0x0000c9e8
    5a64:	0bad0005 	.word	0x0bad0005
    5a68:	0000d76c 	.word	0x0000d76c
    5a6c:	0000c7d8 	.word	0x0000c7d8
    5a70:	0bad0000 	.word	0x0bad0000
    5a74:	0000d780 	.word	0x0000d780

00005a78 <qdec_nrfx_init>:
{
    5a78:	b507      	push	{r0, r1, r2, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5a7a:	2200      	movs	r2, #0
    5a7c:	2101      	movs	r1, #1
    5a7e:	2012      	movs	r0, #18
    5a80:	f7fd fd02 	bl	3488 <z_arm_irq_priority_set>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    5a84:	480b      	ldr	r0, [pc, #44]	; (5ab4 <qdec_nrfx_init+0x3c>)
    5a86:	aa01      	add	r2, sp, #4
    5a88:	2100      	movs	r1, #0
    5a8a:	f005 ff4f 	bl	b92c <pinctrl_lookup_state>
	if (ret < 0) {
    5a8e:	2800      	cmp	r0, #0
    5a90:	db0c      	blt.n	5aac <qdec_nrfx_init+0x34>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    5a92:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    5a94:	4a08      	ldr	r2, [pc, #32]	; (5ab8 <qdec_nrfx_init+0x40>)
    5a96:	7919      	ldrb	r1, [r3, #4]
    5a98:	6818      	ldr	r0, [r3, #0]
    5a9a:	f005 ff7c 	bl	b996 <pinctrl_configure_pins>
	if (ret < 0) {
    5a9e:	2800      	cmp	r0, #0
    5aa0:	db04      	blt.n	5aac <qdec_nrfx_init+0x34>
}
    5aa2:	b003      	add	sp, #12
    5aa4:	f85d eb04 	ldr.w	lr, [sp], #4
    5aa8:	f7ff bfa2 	b.w	59f0 <qdec_nrfx_init.part.0>
    5aac:	b003      	add	sp, #12
    5aae:	f85d fb04 	ldr.w	pc, [sp], #4
    5ab2:	bf00      	nop
    5ab4:	0000c9cc 	.word	0x0000c9cc
    5ab8:	40012000 	.word	0x40012000

00005abc <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    5abc:	4b01      	ldr	r3, [pc, #4]	; (5ac4 <hfclk_on_callback+0x8>)
    5abe:	2201      	movs	r2, #1
    5ac0:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    5ac2:	4770      	bx	lr
    5ac4:	4000c000 	.word	0x4000c000

00005ac8 <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    5ac8:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
    5aca:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
    5acc:	d10b      	bne.n	5ae6 <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    5ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5ad0:	4906      	ldr	r1, [pc, #24]	; (5aec <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
    5ad2:	4807      	ldr	r0, [pc, #28]	; (5af0 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    5ad4:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
    5ad6:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
    5ada:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
    5ade:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    5ae0:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    5ae2:	2000      	movs	r0, #0
    5ae4:	4770      	bx	lr
		return -ENOTSUP;
    5ae6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    5aea:	4770      	bx	lr
    5aec:	0003d090 	.word	0x0003d090
    5af0:	000f4240 	.word	0x000f4240

00005af4 <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5af4:	4b04      	ldr	r3, [pc, #16]	; (5b08 <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
    5af6:	6900      	ldr	r0, [r0, #16]
    5af8:	2200      	movs	r2, #0
    5afa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    5afe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	z_impl_k_sem_give(sem);
    5b02:	f003 bed5 	b.w	98b0 <z_impl_k_sem_give>
    5b06:	bf00      	nop
    5b08:	4000c000 	.word	0x4000c000

00005b0c <temp_nrf5_sample_fetch>:
{
    5b0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
    5b0e:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
    5b10:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5b12:	b363      	cbz	r3, 5b6e <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    5b14:	2939      	cmp	r1, #57	; 0x39
    5b16:	d001      	beq.n	5b1c <temp_nrf5_sample_fetch+0x10>
    5b18:	290c      	cmp	r1, #12
    5b1a:	d12b      	bne.n	5b74 <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
    5b1c:	f105 0610 	add.w	r6, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    5b20:	f04f 32ff 	mov.w	r2, #4294967295
    5b24:	f04f 33ff 	mov.w	r3, #4294967295
    5b28:	4630      	mov	r0, r6
    5b2a:	f003 fdd3 	bl	96d4 <z_impl_k_mutex_lock>
    5b2e:	4b13      	ldr	r3, [pc, #76]	; (5b7c <temp_nrf5_sample_fetch+0x70>)
    5b30:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
    5b32:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5b34:	2303      	movs	r3, #3
    5b36:	2400      	movs	r4, #0
    5b38:	4669      	mov	r1, sp
    5b3a:	9403      	str	r4, [sp, #12]
    5b3c:	9302      	str	r3, [sp, #8]
    5b3e:	f004 ff04 	bl	a94a <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    5b42:	f04f 32ff 	mov.w	r2, #4294967295
    5b46:	f04f 33ff 	mov.w	r3, #4294967295
    5b4a:	4628      	mov	r0, r5
    5b4c:	f003 fed0 	bl	98f0 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    5b50:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5b52:	f004 ff43 	bl	a9dc <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    5b56:	4b0a      	ldr	r3, [pc, #40]	; (5b80 <temp_nrf5_sample_fetch+0x74>)
    5b58:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    5b5c:	626a      	str	r2, [r5, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    5b5e:	2201      	movs	r2, #1
    5b60:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    5b62:	4630      	mov	r0, r6
    5b64:	f003 fe2e 	bl	97c4 <z_impl_k_mutex_unlock>
	return 0;
    5b68:	4620      	mov	r0, r4
}
    5b6a:	b004      	add	sp, #16
    5b6c:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    5b6e:	f06f 000a 	mvn.w	r0, #10
    5b72:	e7fa      	b.n	5b6a <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
    5b74:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5b78:	e7f7      	b.n	5b6a <temp_nrf5_sample_fetch+0x5e>
    5b7a:	bf00      	nop
    5b7c:	00005abd 	.word	0x00005abd
    5b80:	4000c000 	.word	0x4000c000

00005b84 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    5b84:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    5b86:	6904      	ldr	r4, [r0, #16]

	LOG_DBG("");

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    5b88:	2000      	movs	r0, #0
    5b8a:	f7ff fbbd 	bl	5308 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    5b8e:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    5b90:	f04f 32ff 	mov.w	r2, #4294967295
    5b94:	2100      	movs	r1, #0
    5b96:	4620      	mov	r0, r4
    5b98:	f006 fa2e 	bl	bff8 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
    5b9c:	f104 0010 	add.w	r0, r4, #16
    5ba0:	f006 f9ac 	bl	befc <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
    5ba4:	2200      	movs	r2, #0
    5ba6:	2101      	movs	r1, #1
    5ba8:	200c      	movs	r0, #12
    5baa:	f7fd fc6d 	bl	3488 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    5bae:	200c      	movs	r0, #12
    5bb0:	f7fd fc38 	bl	3424 <arch_irq_enable>
    p_reg->INTENSET = mask;
    5bb4:	4b02      	ldr	r3, [pc, #8]	; (5bc0 <temp_nrf5_init+0x3c>)
    5bb6:	2201      	movs	r2, #1
    5bb8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    5bbc:	2000      	movs	r0, #0
    5bbe:	bd10      	pop	{r4, pc}
    5bc0:	4000c000 	.word	0x4000c000

00005bc4 <spi_0_init>:
		      &spi_##idx##z_config,				       \
		      POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		       \
		      &spi_nrfx_driver_api)

#ifdef CONFIG_SPI_0_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(0);
    5bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5bc8:	b083      	sub	sp, #12
    5bca:	4604      	mov	r4, r0
    5bcc:	af00      	add	r7, sp, #0
    5bce:	6905      	ldr	r5, [r0, #16]
    5bd0:	2200      	movs	r2, #0
    5bd2:	2101      	movs	r1, #1
    5bd4:	2003      	movs	r0, #3
    5bd6:	f7fd fc57 	bl	3488 <z_arm_irq_priority_set>
    5bda:	6863      	ldr	r3, [r4, #4]
    5bdc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	ret = pinctrl_lookup_state(config, id, &state);
    5bde:	1d3a      	adds	r2, r7, #4
    5be0:	2100      	movs	r1, #0
    5be2:	4620      	mov	r0, r4
    5be4:	f005 fea2 	bl	b92c <pinctrl_lookup_state>
	if (ret < 0) {
    5be8:	2800      	cmp	r0, #0
    5bea:	db30      	blt.n	5c4e <spi_0_init+0x8a>
	return pinctrl_apply_state_direct(config, state);
    5bec:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    5bee:	6822      	ldr	r2, [r4, #0]
    5bf0:	7919      	ldrb	r1, [r3, #4]
    5bf2:	6818      	ldr	r0, [r3, #0]
    5bf4:	f005 fecf 	bl	b996 <pinctrl_configure_pins>
    5bf8:	2800      	cmp	r0, #0
    5bfa:	db28      	blt.n	5c4e <spi_0_init+0x8a>
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    5bfc:	68ac      	ldr	r4, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5bfe:	2601      	movs	r6, #1
    5c00:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    5c04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    5c08:	429c      	cmp	r4, r3
    5c0a:	d304      	bcc.n	5c16 <spi_0_init+0x52>
    5c0c:	4628      	mov	r0, r5
    5c0e:	f005 fe52 	bl	b8b6 <spi_context_unlock_unconditionally>
    5c12:	2000      	movs	r0, #0
    5c14:	e01b      	b.n	5c4e <spi_0_init+0x8a>
		if (!device_is_ready(cs_gpio->port)) {
    5c16:	6820      	ldr	r0, [r4, #0]
    5c18:	f006 f91d 	bl	be56 <z_device_is_ready>
    5c1c:	b9d8      	cbnz	r0, 5c56 <spi_0_init+0x92>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    5c1e:	6823      	ldr	r3, [r4, #0]
    5c20:	481e      	ldr	r0, [pc, #120]	; (5c9c <spi_0_init+0xd8>)
    5c22:	6819      	ldr	r1, [r3, #0]
    5c24:	7923      	ldrb	r3, [r4, #4]
    5c26:	466c      	mov	r4, sp
    5c28:	b08a      	sub	sp, #40	; 0x28
    5c2a:	466a      	mov	r2, sp
    5c2c:	e9c2 0105 	strd	r0, r1, [r2, #20]
    5c30:	61d3      	str	r3, [r2, #28]
    5c32:	2302      	movs	r3, #2
    5c34:	f882 3020 	strb.w	r3, [r2, #32]
    5c38:	4b19      	ldr	r3, [pc, #100]	; (5ca0 <spi_0_init+0xdc>)
    5c3a:	481a      	ldr	r0, [pc, #104]	; (5ca4 <spi_0_init+0xe0>)
    5c3c:	f842 3f10 	str.w	r3, [r2, #16]!
    5c40:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    5c44:	f005 fdfe 	bl	b844 <z_log_msg2_static_create.constprop.0>
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
    5c48:	f06f 0012 	mvn.w	r0, #18
    5c4c:	46a5      	mov	sp, r4
    5c4e:	370c      	adds	r7, #12
    5c50:	46bd      	mov	sp, r7
    5c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return gpio_pin_configure(spec->port,
    5c56:	6820      	ldr	r0, [r4, #0]
    5c58:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
    5c5a:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
    5c5c:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
    5c60:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5c64:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    5c68:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    5c6a:	bf54      	ite	pl
    5c6c:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    5c70:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    5c74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5c78:	fa06 f801 	lsl.w	r8, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    5c7c:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5c7e:	bf4c      	ite	mi
    5c80:	ea4c 0308 	orrmi.w	r3, ip, r8
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    5c84:	ea2c 0308 	bicpl.w	r3, ip, r8
    5c88:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
    5c8c:	f8d9 3000 	ldr.w	r3, [r9]
    5c90:	4798      	blx	r3
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
    5c92:	2800      	cmp	r0, #0
    5c94:	dbdb      	blt.n	5c4e <spi_0_init+0x8a>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    5c96:	3408      	adds	r4, #8
    5c98:	e7b2      	b.n	5c00 <spi_0_init+0x3c>
    5c9a:	bf00      	nop
    5c9c:	0000d7ba 	.word	0x0000d7ba
    5ca0:	01000004 	.word	0x01000004
    5ca4:	0000c7e8 	.word	0x0000c7e8

00005ca8 <transfer_next_chunk>:
{
    5ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    5caa:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    5cac:	6cab      	ldr	r3, [r5, #72]	; 0x48
		return ctx->rx_len;
    5cae:	6d2c      	ldr	r4, [r5, #80]	; 0x50
{
    5cb0:	b085      	sub	sp, #20
	if (!ctx->tx_len) {
    5cb2:	b97b      	cbnz	r3, 5cd4 <transfer_next_chunk+0x2c>
	if (chunk_len > 0) {
    5cb4:	b99c      	cbnz	r4, 5cde <transfer_next_chunk+0x36>
	_spi_context_cs_control(ctx, on, false);
    5cb6:	2200      	movs	r2, #0
    5cb8:	4611      	mov	r1, r2
    5cba:	4628      	mov	r0, r5
    5cbc:	f005 fdd9 	bl	b872 <_spi_context_cs_control>
	ctx->sync_status = status;
    5cc0:	632c      	str	r4, [r5, #48]	; 0x30
	z_impl_k_sem_give(sem);
    5cc2:	f105 0020 	add.w	r0, r5, #32
    5cc6:	f003 fdf3 	bl	98b0 <z_impl_k_sem_give>
	dev_data->busy = false;
    5cca:	2300      	movs	r3, #0
    5ccc:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
}
    5cd0:	b005      	add	sp, #20
    5cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (!ctx->rx_len) {
    5cd4:	2c00      	cmp	r4, #0
    5cd6:	d035      	beq.n	5d44 <transfer_next_chunk+0x9c>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    5cd8:	429c      	cmp	r4, r3
    5cda:	bf28      	it	cs
    5cdc:	461c      	movcs	r4, r3
		const uint8_t *tx_buf = ctx->tx_buf;
    5cde:	6c69      	ldr	r1, [r5, #68]	; 0x44
	const struct spi_nrfx_config *dev_config = dev->config;
    5ce0:	6846      	ldr	r6, [r0, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
    5ce2:	b179      	cbz	r1, 5d04 <transfer_next_chunk+0x5c>
    5ce4:	b173      	cbz	r3, 5d04 <transfer_next_chunk+0x5c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    5ce6:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    5cea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5cee:	d009      	beq.n	5d04 <transfer_next_chunk+0x5c>
			if (chunk_len > sizeof(dev_data->buffer)) {
    5cf0:	2c08      	cmp	r4, #8
    5cf2:	bf28      	it	cs
    5cf4:	2408      	movcs	r4, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
    5cf6:	f105 075e 	add.w	r7, r5, #94	; 0x5e
    5cfa:	4622      	mov	r2, r4
    5cfc:	4638      	mov	r0, r7
    5cfe:	f005 fc20 	bl	b542 <memcpy>
			tx_buf = dev_data->buffer;
    5d02:	4639      	mov	r1, r7
		if (chunk_len > dev_config->max_chunk_len) {
    5d04:	68b2      	ldr	r2, [r6, #8]
    5d06:	6c6b      	ldr	r3, [r5, #68]	; 0x44
		xfer.p_tx_buffer = tx_buf;
    5d08:	9100      	str	r1, [sp, #0]
    5d0a:	4294      	cmp	r4, r2
    5d0c:	bf28      	it	cs
    5d0e:	4614      	movcs	r4, r2
		dev_data->chunk_len = chunk_len;
    5d10:	65ac      	str	r4, [r5, #88]	; 0x58
    5d12:	b11b      	cbz	r3, 5d1c <transfer_next_chunk+0x74>
    5d14:	6cab      	ldr	r3, [r5, #72]	; 0x48
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    5d16:	2b00      	cmp	r3, #0
    5d18:	bf18      	it	ne
    5d1a:	4623      	movne	r3, r4
    5d1c:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    5d1e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    5d20:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    5d22:	b11b      	cbz	r3, 5d2c <transfer_next_chunk+0x84>
    5d24:	6d2b      	ldr	r3, [r5, #80]	; 0x50
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    5d26:	2b00      	cmp	r3, #0
    5d28:	bf18      	it	ne
    5d2a:	4623      	movne	r3, r4
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    5d2c:	2200      	movs	r2, #0
    5d2e:	4669      	mov	r1, sp
    5d30:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    5d32:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    5d34:	f002 f986 	bl	8044 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    5d38:	4b03      	ldr	r3, [pc, #12]	; (5d48 <transfer_next_chunk+0xa0>)
    5d3a:	4298      	cmp	r0, r3
    5d3c:	d0c8      	beq.n	5cd0 <transfer_next_chunk+0x28>
			error = -EIO;
    5d3e:	f06f 0404 	mvn.w	r4, #4
    5d42:	e7b8      	b.n	5cb6 <transfer_next_chunk+0xe>
    5d44:	461c      	mov	r4, r3
    5d46:	e7ca      	b.n	5cde <transfer_next_chunk+0x36>
    5d48:	0bad0000 	.word	0x0bad0000

00005d4c <event_handler>:
{
    5d4c:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    5d4e:	7803      	ldrb	r3, [r0, #0]
{
    5d50:	b086      	sub	sp, #24
    5d52:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    5d54:	2b00      	cmp	r3, #0
    5d56:	d154      	bne.n	5e02 <event_handler+0xb6>
	if (!ctx->tx_len) {
    5d58:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    5d5a:	b163      	cbz	r3, 5d76 <event_handler+0x2a>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    5d5c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
	if (len > ctx->tx_len) {
    5d5e:	429a      	cmp	r2, r3
    5d60:	d91e      	bls.n	5da0 <event_handler+0x54>
		LOG_ERR("Update exceeds current buffer");
    5d62:	4b29      	ldr	r3, [pc, #164]	; (5e08 <event_handler+0xbc>)
    5d64:	9305      	str	r3, [sp, #20]
    5d66:	4829      	ldr	r0, [pc, #164]	; (5e0c <event_handler+0xc0>)
    5d68:	2302      	movs	r3, #2
    5d6a:	aa04      	add	r2, sp, #16
    5d6c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5d70:	9304      	str	r3, [sp, #16]
    5d72:	f005 fd67 	bl	b844 <z_log_msg2_static_create.constprop.0>
	if (!ctx->rx_len) {
    5d76:	6d23      	ldr	r3, [r4, #80]	; 0x50
    5d78:	b163      	cbz	r3, 5d94 <event_handler+0x48>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    5d7a:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (len > ctx->rx_len) {
    5d7c:	429a      	cmp	r2, r3
    5d7e:	d927      	bls.n	5dd0 <event_handler+0x84>
		LOG_ERR("Update exceeds current buffer");
    5d80:	4b21      	ldr	r3, [pc, #132]	; (5e08 <event_handler+0xbc>)
    5d82:	9305      	str	r3, [sp, #20]
    5d84:	4821      	ldr	r0, [pc, #132]	; (5e0c <event_handler+0xc0>)
    5d86:	2302      	movs	r3, #2
    5d88:	aa04      	add	r2, sp, #16
    5d8a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5d8e:	9304      	str	r3, [sp, #16]
    5d90:	f005 fd58 	bl	b844 <z_log_msg2_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
    5d94:	6d60      	ldr	r0, [r4, #84]	; 0x54
}
    5d96:	b006      	add	sp, #24
    5d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    5d9c:	f7ff bf84 	b.w	5ca8 <transfer_next_chunk>
	ctx->tx_len -= len;
    5da0:	1a9b      	subs	r3, r3, r2
    5da2:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
    5da4:	b973      	cbnz	r3, 5dc4 <event_handler+0x78>
		++ctx->current_tx;
    5da6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    5da8:	3308      	adds	r3, #8
    5daa:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
    5dac:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    5dae:	3b01      	subs	r3, #1
    5db0:	638b      	str	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
    5db2:	f101 0248 	add.w	r2, r1, #72	; 0x48
    5db6:	f104 0034 	add.w	r0, r4, #52	; 0x34
    5dba:	3138      	adds	r1, #56	; 0x38
    5dbc:	f005 fd31 	bl	b822 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    5dc0:	6460      	str	r0, [r4, #68]	; 0x44
    5dc2:	e7d8      	b.n	5d76 <event_handler+0x2a>
	} else if (ctx->tx_buf) {
    5dc4:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    5dc6:	2b00      	cmp	r3, #0
    5dc8:	d0d5      	beq.n	5d76 <event_handler+0x2a>
		ctx->tx_buf += dfs * len;
    5dca:	4413      	add	r3, r2
    5dcc:	644b      	str	r3, [r1, #68]	; 0x44
    5dce:	e7d2      	b.n	5d76 <event_handler+0x2a>
	ctx->rx_len -= len;
    5dd0:	1a9b      	subs	r3, r3, r2
    5dd2:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
    5dd4:	b97b      	cbnz	r3, 5df6 <event_handler+0xaa>
		++ctx->current_rx;
    5dd6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5dd8:	3308      	adds	r3, #8
    5dda:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
    5ddc:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5dde:	3b01      	subs	r3, #1
    5de0:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
    5de2:	f104 0250 	add.w	r2, r4, #80	; 0x50
    5de6:	f104 0140 	add.w	r1, r4, #64	; 0x40
    5dea:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    5dee:	f005 fd18 	bl	b822 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    5df2:	64e0      	str	r0, [r4, #76]	; 0x4c
    5df4:	e7ce      	b.n	5d94 <event_handler+0x48>
	} else if (ctx->rx_buf) {
    5df6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    5df8:	2b00      	cmp	r3, #0
    5dfa:	d0cb      	beq.n	5d94 <event_handler+0x48>
		ctx->rx_buf += dfs * len;
    5dfc:	4413      	add	r3, r2
    5dfe:	64e3      	str	r3, [r4, #76]	; 0x4c
    5e00:	e7c8      	b.n	5d94 <event_handler+0x48>
}
    5e02:	b006      	add	sp, #24
    5e04:	bd10      	pop	{r4, pc}
    5e06:	bf00      	nop
    5e08:	0000d7de 	.word	0x0000d7de
    5e0c:	0000c7e8 	.word	0x0000c7e8

00005e10 <spi_nrfx_transceive>:
{
    5e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e14:	b08b      	sub	sp, #44	; 0x2c
    5e16:	af00      	add	r7, sp, #0
    5e18:	e9c7 3202 	strd	r3, r2, [r7, #8]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    5e1c:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    5e1e:	6904      	ldr	r4, [r0, #16]
    5e20:	049b      	lsls	r3, r3, #18
{
    5e22:	4683      	mov	fp, r0
    5e24:	460e      	mov	r6, r1
    5e26:	d434      	bmi.n	5e92 <spi_nrfx_transceive+0x82>
	return z_impl_k_sem_take(sem, timeout);
    5e28:	f04f 32ff 	mov.w	r2, #4294967295
    5e2c:	f04f 33ff 	mov.w	r3, #4294967295
    5e30:	f104 0010 	add.w	r0, r4, #16
    5e34:	f003 fd5c 	bl	98f0 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    5e38:	6066      	str	r6, [r4, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    5e3a:	f8db 8010 	ldr.w	r8, [fp, #16]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    5e3e:	f898 305d 	ldrb.w	r3, [r8, #93]	; 0x5d
    5e42:	607b      	str	r3, [r7, #4]
    5e44:	b123      	cbz	r3, 5e50 <spi_nrfx_transceive+0x40>
    5e46:	f8d8 3000 	ldr.w	r3, [r8]
    5e4a:	429e      	cmp	r6, r3
    5e4c:	f000 80d2 	beq.w	5ff4 <spi_nrfx_transceive+0x1e4>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    5e50:	f8b6 c004 	ldrh.w	ip, [r6, #4]
    5e54:	f41c 6f00 	tst.w	ip, #2048	; 0x800
    5e58:	d022      	beq.n	5ea0 <spi_nrfx_transceive+0x90>
		LOG_ERR("Half-duplex not supported");
    5e5a:	4b9b      	ldr	r3, [pc, #620]	; (60c8 <spi_nrfx_transceive+0x2b8>)
    5e5c:	627b      	str	r3, [r7, #36]	; 0x24
    5e5e:	489b      	ldr	r0, [pc, #620]	; (60cc <spi_nrfx_transceive+0x2bc>)
    5e60:	2302      	movs	r3, #2
    5e62:	f107 0220 	add.w	r2, r7, #32
    5e66:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENOTSUP;
    5e6a:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
    5e6e:	623b      	str	r3, [r7, #32]
    5e70:	f005 fce8 	bl	b844 <z_log_msg2_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    5e74:	6823      	ldr	r3, [r4, #0]
    5e76:	889b      	ldrh	r3, [r3, #4]
    5e78:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    5e7c:	d104      	bne.n	5e88 <spi_nrfx_transceive+0x78>
		ctx->owner = NULL;
    5e7e:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    5e80:	f104 0010 	add.w	r0, r4, #16
    5e84:	f003 fd14 	bl	98b0 <z_impl_k_sem_give>
}
    5e88:	4628      	mov	r0, r5
    5e8a:	372c      	adds	r7, #44	; 0x2c
    5e8c:	46bd      	mov	sp, r7
    5e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    5e92:	69a3      	ldr	r3, [r4, #24]
    5e94:	2b00      	cmp	r3, #0
    5e96:	d1c7      	bne.n	5e28 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
    5e98:	6863      	ldr	r3, [r4, #4]
    5e9a:	4299      	cmp	r1, r3
    5e9c:	d1c4      	bne.n	5e28 <spi_nrfx_transceive+0x18>
    5e9e:	e7cc      	b.n	5e3a <spi_nrfx_transceive+0x2a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    5ea0:	f01c 0f01 	tst.w	ip, #1
    5ea4:	d015      	beq.n	5ed2 <spi_nrfx_transceive+0xc2>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    5ea6:	f8db 3000 	ldr.w	r3, [fp]
    5eaa:	4989      	ldr	r1, [pc, #548]	; (60d0 <spi_nrfx_transceive+0x2c0>)
    5eac:	4887      	ldr	r0, [pc, #540]	; (60cc <spi_nrfx_transceive+0x2bc>)
    5eae:	466d      	mov	r5, sp
    5eb0:	b088      	sub	sp, #32
    5eb2:	466a      	mov	r2, sp
    5eb4:	e9c2 1305 	strd	r1, r3, [r2, #20]
    5eb8:	2302      	movs	r3, #2
    5eba:	7713      	strb	r3, [r2, #28]
    5ebc:	4b85      	ldr	r3, [pc, #532]	; (60d4 <spi_nrfx_transceive+0x2c4>)
    5ebe:	f842 3f10 	str.w	r3, [r2, #16]!
    5ec2:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
    5ec6:	f005 fcbd 	bl	b844 <z_log_msg2_static_create.constprop.0>
    5eca:	46ad      	mov	sp, r5
		return -EINVAL;
    5ecc:	f06f 0515 	mvn.w	r5, #21
    5ed0:	e7d0      	b.n	5e74 <spi_nrfx_transceive+0x64>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    5ed2:	f01c 0f08 	tst.w	ip, #8
    5ed6:	d00b      	beq.n	5ef0 <spi_nrfx_transceive+0xe0>
		LOG_ERR("Loopback mode is not supported");
    5ed8:	4b7f      	ldr	r3, [pc, #508]	; (60d8 <spi_nrfx_transceive+0x2c8>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    5eda:	627b      	str	r3, [r7, #36]	; 0x24
    5edc:	487b      	ldr	r0, [pc, #492]	; (60cc <spi_nrfx_transceive+0x2bc>)
    5ede:	2302      	movs	r3, #2
    5ee0:	f107 0220 	add.w	r2, r7, #32
    5ee4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5ee8:	623b      	str	r3, [r7, #32]
    5eea:	f005 fcab 	bl	b844 <z_log_msg2_static_create.constprop.0>
    5eee:	e7ed      	b.n	5ecc <spi_nrfx_transceive+0xbc>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    5ef0:	f3cc 1345 	ubfx	r3, ip, #5, #6
    5ef4:	2b08      	cmp	r3, #8
    5ef6:	d001      	beq.n	5efc <spi_nrfx_transceive+0xec>
		LOG_ERR("Word sizes other than 8 bits are not supported");
    5ef8:	4b78      	ldr	r3, [pc, #480]	; (60dc <spi_nrfx_transceive+0x2cc>)
    5efa:	e7ee      	b.n	5eda <spi_nrfx_transceive+0xca>
	if (spi_cfg->frequency < 125000) {
    5efc:	6835      	ldr	r5, [r6, #0]
    5efe:	4b78      	ldr	r3, [pc, #480]	; (60e0 <spi_nrfx_transceive+0x2d0>)
    5f00:	429d      	cmp	r5, r3
    5f02:	d801      	bhi.n	5f08 <spi_nrfx_transceive+0xf8>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    5f04:	4b77      	ldr	r3, [pc, #476]	; (60e4 <spi_nrfx_transceive+0x2d4>)
    5f06:	e7e8      	b.n	5eda <spi_nrfx_transceive+0xca>
	const struct spi_nrfx_config *dev_config = dev->config;
    5f08:	f8db 9004 	ldr.w	r9, [fp, #4]
	uint32_t max_freq = dev_config->max_freq;
    5f0c:	f8d9 300c 	ldr.w	r3, [r9, #12]
    5f10:	603b      	str	r3, [r7, #0]
	config = dev_config->def_config;
    5f12:	f109 0a10 	add.w	sl, r9, #16
    5f16:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
    5f1a:	f107 0e10 	add.w	lr, r7, #16
    5f1e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    5f22:	f8da 3000 	ldr.w	r3, [sl]
    5f26:	f8ce 3000 	str.w	r3, [lr]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    5f2a:	683b      	ldr	r3, [r7, #0]
    5f2c:	429d      	cmp	r5, r3
    5f2e:	bf28      	it	cs
    5f30:	461d      	movcs	r5, r3
	if (frequency < 250000) {
    5f32:	4b6d      	ldr	r3, [pc, #436]	; (60e8 <spi_nrfx_transceive+0x2d8>)
    5f34:	429d      	cmp	r5, r3
    5f36:	d945      	bls.n	5fc4 <spi_nrfx_transceive+0x1b4>
	} else if (frequency < 500000) {
    5f38:	4b6c      	ldr	r3, [pc, #432]	; (60ec <spi_nrfx_transceive+0x2dc>)
    5f3a:	429d      	cmp	r5, r3
    5f3c:	d945      	bls.n	5fca <spi_nrfx_transceive+0x1ba>
	} else if (frequency < 1000000) {
    5f3e:	4b6c      	ldr	r3, [pc, #432]	; (60f0 <spi_nrfx_transceive+0x2e0>)
    5f40:	429d      	cmp	r5, r3
    5f42:	d945      	bls.n	5fd0 <spi_nrfx_transceive+0x1c0>
	} else if (frequency < 2000000) {
    5f44:	4b6b      	ldr	r3, [pc, #428]	; (60f4 <spi_nrfx_transceive+0x2e4>)
    5f46:	429d      	cmp	r5, r3
    5f48:	d945      	bls.n	5fd6 <spi_nrfx_transceive+0x1c6>
	} else if (frequency < 4000000) {
    5f4a:	4b6b      	ldr	r3, [pc, #428]	; (60f8 <spi_nrfx_transceive+0x2e8>)
    5f4c:	429d      	cmp	r5, r3
    5f4e:	d945      	bls.n	5fdc <spi_nrfx_transceive+0x1cc>
		return NRF_SPIM_FREQ_8M;
    5f50:	4b6a      	ldr	r3, [pc, #424]	; (60fc <spi_nrfx_transceive+0x2ec>)
    5f52:	429d      	cmp	r5, r3
    5f54:	bf34      	ite	cc
    5f56:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
    5f5a:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    5f5e:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    5f62:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    5f64:	f00c 0304 	and.w	r3, ip, #4
    5f68:	d03b      	beq.n	5fe2 <spi_nrfx_transceive+0x1d2>
			return NRF_SPIM_MODE_2;
    5f6a:	2b00      	cmp	r3, #0
    5f6c:	bf14      	ite	ne
    5f6e:	2303      	movne	r3, #3
    5f70:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    5f72:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
    5f74:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
    5f76:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    5f7a:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
    5f7e:	b12b      	cbz	r3, 5f8c <spi_nrfx_transceive+0x17c>
		nrfx_spim_uninit(&dev_config->spim);
    5f80:	4648      	mov	r0, r9
    5f82:	f002 f817 	bl	7fb4 <nrfx_spim_uninit>
		dev_data->initialized = false;
    5f86:	2300      	movs	r3, #0
    5f88:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
	result = nrfx_spim_init(&dev_config->spim, &config,
    5f8c:	4643      	mov	r3, r8
    5f8e:	4a5c      	ldr	r2, [pc, #368]	; (6100 <spi_nrfx_transceive+0x2f0>)
    5f90:	f107 0110 	add.w	r1, r7, #16
    5f94:	4648      	mov	r0, r9
    5f96:	f001 ff65 	bl	7e64 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    5f9a:	4b5a      	ldr	r3, [pc, #360]	; (6104 <spi_nrfx_transceive+0x2f4>)
    5f9c:	4298      	cmp	r0, r3
    5f9e:	d024      	beq.n	5fea <spi_nrfx_transceive+0x1da>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    5fa0:	466d      	mov	r5, sp
    5fa2:	4b59      	ldr	r3, [pc, #356]	; (6108 <spi_nrfx_transceive+0x2f8>)
    5fa4:	b088      	sub	sp, #32
    5fa6:	466a      	mov	r2, sp
    5fa8:	e9c2 3005 	strd	r3, r0, [r2, #20]
    5fac:	2303      	movs	r3, #3
    5fae:	f842 3f10 	str.w	r3, [r2, #16]!
    5fb2:	4846      	ldr	r0, [pc, #280]	; (60cc <spi_nrfx_transceive+0x2bc>)
    5fb4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5fb8:	f005 fc44 	bl	b844 <z_log_msg2_static_create.constprop.0>
    5fbc:	46ad      	mov	sp, r5
		return -EIO;
    5fbe:	f06f 0504 	mvn.w	r5, #4
    5fc2:	e757      	b.n	5e74 <spi_nrfx_transceive+0x64>
		return NRF_SPIM_FREQ_125K;
    5fc4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    5fc8:	e7c9      	b.n	5f5e <spi_nrfx_transceive+0x14e>
		return NRF_SPIM_FREQ_250K;
    5fca:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    5fce:	e7c6      	b.n	5f5e <spi_nrfx_transceive+0x14e>
		return NRF_SPIM_FREQ_500K;
    5fd0:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    5fd4:	e7c3      	b.n	5f5e <spi_nrfx_transceive+0x14e>
		return NRF_SPIM_FREQ_1M;
    5fd6:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    5fda:	e7c0      	b.n	5f5e <spi_nrfx_transceive+0x14e>
		return NRF_SPIM_FREQ_2M;
    5fdc:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    5fe0:	e7bd      	b.n	5f5e <spi_nrfx_transceive+0x14e>
			return NRF_SPIM_MODE_0;
    5fe2:	3b00      	subs	r3, #0
    5fe4:	bf18      	it	ne
    5fe6:	2301      	movne	r3, #1
    5fe8:	e7c3      	b.n	5f72 <spi_nrfx_transceive+0x162>
	dev_data->initialized = true;
    5fea:	2301      	movs	r3, #1
    5fec:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
	ctx->config = spi_cfg;
    5ff0:	f8c8 6000 	str.w	r6, [r8]
		dev_data->busy = true;
    5ff4:	2301      	movs	r3, #1
    5ff6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    5ffa:	68fb      	ldr	r3, [r7, #12]
    5ffc:	2b00      	cmp	r3, #0
    5ffe:	d152      	bne.n	60a6 <spi_nrfx_transceive+0x296>
    6000:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    6002:	461a      	mov	r2, r3
    6004:	63a2      	str	r2, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    6006:	f104 0138 	add.w	r1, r4, #56	; 0x38
    600a:	f104 0248 	add.w	r2, r4, #72	; 0x48
    600e:	f104 0034 	add.w	r0, r4, #52	; 0x34
    6012:	f005 fc06 	bl	b822 <spi_context_get_next_buf.constprop.0>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    6016:	68bb      	ldr	r3, [r7, #8]
	ctx->tx_buf = (const uint8_t *)
    6018:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    601a:	2b00      	cmp	r3, #0
    601c:	d14a      	bne.n	60b4 <spi_nrfx_transceive+0x2a4>
    601e:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    6020:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    6022:	f104 0250 	add.w	r2, r4, #80	; 0x50
    6026:	f104 0140 	add.w	r1, r4, #64	; 0x40
    602a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    602e:	f005 fbf8 	bl	b822 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    6032:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
    6034:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
    6036:	64e0      	str	r0, [r4, #76]	; 0x4c
	_spi_context_cs_control(ctx, on, false);
    6038:	2101      	movs	r1, #1
    603a:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    603c:	6326      	str	r6, [r4, #48]	; 0x30
	_spi_context_cs_control(ctx, on, false);
    603e:	f005 fc18 	bl	b872 <_spi_context_cs_control>
		transfer_next_chunk(dev);
    6042:	4658      	mov	r0, fp
    6044:	f7ff fe30 	bl	5ca8 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    6048:	6d25      	ldr	r5, [r4, #80]	; 0x50
    604a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			     ctx->config->frequency;
    604c:	46a0      	mov	r8, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    604e:	429d      	cmp	r5, r3
    6050:	bf38      	it	cc
    6052:	461d      	movcc	r5, r3
    6054:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
    6058:	435d      	muls	r5, r3
			     ctx->config->frequency;
    605a:	f858 3b20 	ldr.w	r3, [r8], #32
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    605e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    6062:	681b      	ldr	r3, [r3, #0]
    6064:	fbb5 f5f3 	udiv	r5, r5, r3
    6068:	4631      	mov	r1, r6
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    606a:	35c8      	adds	r5, #200	; 0xc8
    606c:	f240 30e7 	movw	r0, #999	; 0x3e7
    6070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6074:	2300      	movs	r3, #0
    6076:	fbe5 010c 	umlal	r0, r1, r5, ip
    607a:	f7fa f831 	bl	e0 <__aeabi_uldivmod>
    607e:	4602      	mov	r2, r0
    6080:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    6082:	4640      	mov	r0, r8
    6084:	f003 fc34 	bl	98f0 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
    6088:	b1e0      	cbz	r0, 60c4 <spi_nrfx_transceive+0x2b4>
		LOG_ERR("Timeout waiting for transfer complete");
    608a:	4b20      	ldr	r3, [pc, #128]	; (610c <spi_nrfx_transceive+0x2fc>)
    608c:	627b      	str	r3, [r7, #36]	; 0x24
    608e:	480f      	ldr	r0, [pc, #60]	; (60cc <spi_nrfx_transceive+0x2bc>)
    6090:	2302      	movs	r3, #2
    6092:	f107 0220 	add.w	r2, r7, #32
    6096:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    609a:	623b      	str	r3, [r7, #32]
		return -ETIMEDOUT;
    609c:	f06f 0573 	mvn.w	r5, #115	; 0x73
		LOG_ERR("Timeout waiting for transfer complete");
    60a0:	f005 fbd0 	bl	b844 <z_log_msg2_static_create.constprop.0>
		return -ETIMEDOUT;
    60a4:	e6e6      	b.n	5e74 <spi_nrfx_transceive+0x64>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    60a6:	68fb      	ldr	r3, [r7, #12]
    60a8:	681a      	ldr	r2, [r3, #0]
    60aa:	6362      	str	r2, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    60ac:	2a00      	cmp	r2, #0
    60ae:	d0a9      	beq.n	6004 <spi_nrfx_transceive+0x1f4>
    60b0:	685a      	ldr	r2, [r3, #4]
    60b2:	e7a7      	b.n	6004 <spi_nrfx_transceive+0x1f4>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    60b4:	68bb      	ldr	r3, [r7, #8]
    60b6:	681b      	ldr	r3, [r3, #0]
    60b8:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    60ba:	2b00      	cmp	r3, #0
    60bc:	d0b0      	beq.n	6020 <spi_nrfx_transceive+0x210>
    60be:	68bb      	ldr	r3, [r7, #8]
    60c0:	685b      	ldr	r3, [r3, #4]
    60c2:	e7ad      	b.n	6020 <spi_nrfx_transceive+0x210>
	status = ctx->sync_status;
    60c4:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return status;
    60c6:	e6d5      	b.n	5e74 <spi_nrfx_transceive+0x64>
    60c8:	0000d7fc 	.word	0x0000d7fc
    60cc:	0000c7e8 	.word	0x0000c7e8
    60d0:	0000d816 	.word	0x0000d816
    60d4:	01000003 	.word	0x01000003
    60d8:	0000d838 	.word	0x0000d838
    60dc:	0000d857 	.word	0x0000d857
    60e0:	0001e847 	.word	0x0001e847
    60e4:	0000d886 	.word	0x0000d886
    60e8:	0003d08f 	.word	0x0003d08f
    60ec:	0007a11f 	.word	0x0007a11f
    60f0:	000f423f 	.word	0x000f423f
    60f4:	001e847f 	.word	0x001e847f
    60f8:	003d08ff 	.word	0x003d08ff
    60fc:	007a1200 	.word	0x007a1200
    6100:	00005d4d 	.word	0x00005d4d
    6104:	0bad0000 	.word	0x0bad0000
    6108:	0000d8b7 	.word	0x0000d8b7
    610c:	0000d8de 	.word	0x0000d8de

00006110 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    6110:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    6112:	2301      	movs	r3, #1
    6114:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6116:	4a11      	ldr	r2, [pc, #68]	; (615c <compare_int_lock+0x4c>)
    6118:	f3bf 8f5b 	dmb	ish
    611c:	43dc      	mvns	r4, r3
    611e:	e852 1f00 	ldrex	r1, [r2]
    6122:	ea01 0c04 	and.w	ip, r1, r4
    6126:	e842 ce00 	strex	lr, ip, [r2]
    612a:	f1be 0f00 	cmp.w	lr, #0
    612e:	d1f6      	bne.n	611e <compare_int_lock+0xe>
    6130:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6134:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6138:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    613c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6140:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    6144:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    6148:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    614c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    6150:	420b      	tst	r3, r1
}
    6152:	bf14      	ite	ne
    6154:	2001      	movne	r0, #1
    6156:	2000      	moveq	r0, #0
    6158:	bd10      	pop	{r4, pc}
    615a:	bf00      	nop
    615c:	20001634 	.word	0x20001634

00006160 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    6160:	4919      	ldr	r1, [pc, #100]	; (61c8 <sys_clock_timeout_handler+0x68>)
{
    6162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6164:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    6166:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    616a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    616c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    6170:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    6174:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    6176:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    617a:	d222      	bcs.n	61c2 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    617c:	4b13      	ldr	r3, [pc, #76]	; (61cc <sys_clock_timeout_handler+0x6c>)
    617e:	681b      	ldr	r3, [r3, #0]
    6180:	0a1a      	lsrs	r2, r3, #8
    6182:	061b      	lsls	r3, r3, #24
    6184:	195e      	adds	r6, r3, r5
    6186:	4b12      	ldr	r3, [pc, #72]	; (61d0 <sys_clock_timeout_handler+0x70>)
    6188:	f142 0700 	adc.w	r7, r2, #0
    618c:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    6190:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    6192:	f004 f97d 	bl	a490 <sys_clock_announce>
    return p_reg->CC[ch];
    6196:	00a3      	lsls	r3, r4, #2
    6198:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    619c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    61a0:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    61a4:	42aa      	cmp	r2, r5
    61a6:	d10b      	bne.n	61c0 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    61a8:	b91e      	cbnz	r6, 61b2 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    61aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    61ae:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    61b2:	4b08      	ldr	r3, [pc, #32]	; (61d4 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    61b4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    61b8:	fa00 f404 	lsl.w	r4, r0, r4
    61bc:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    61c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    61c2:	2600      	movs	r6, #0
    61c4:	e7e5      	b.n	6192 <sys_clock_timeout_handler+0x32>
    61c6:	bf00      	nop
    61c8:	200007d0 	.word	0x200007d0
    61cc:	20001638 	.word	0x20001638
    61d0:	200007b8 	.word	0x200007b8
    61d4:	40011000 	.word	0x40011000

000061d8 <compare_int_unlock>:
	if (key) {
    61d8:	b319      	cbz	r1, 6222 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    61da:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    61de:	2301      	movs	r3, #1
    61e0:	4a10      	ldr	r2, [pc, #64]	; (6224 <compare_int_unlock+0x4c>)
    61e2:	4083      	lsls	r3, r0
    61e4:	e852 1f00 	ldrex	r1, [r2]
    61e8:	4319      	orrs	r1, r3
    61ea:	e842 1c00 	strex	ip, r1, [r2]
    61ee:	f1bc 0f00 	cmp.w	ip, #0
    61f2:	d1f7      	bne.n	61e4 <compare_int_unlock+0xc>
    61f4:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    61f8:	4a0b      	ldr	r2, [pc, #44]	; (6228 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    61fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    61fe:	4083      	lsls	r3, r0
    6200:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6204:	4b09      	ldr	r3, [pc, #36]	; (622c <compare_int_unlock+0x54>)
    6206:	f3bf 8f5b 	dmb	ish
    620a:	681b      	ldr	r3, [r3, #0]
    620c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    6210:	fa23 f000 	lsr.w	r0, r3, r0
    6214:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6216:	bf42      	ittt	mi
    6218:	4b05      	ldrmi	r3, [pc, #20]	; (6230 <compare_int_unlock+0x58>)
    621a:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    621e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    6222:	4770      	bx	lr
    6224:	20001634 	.word	0x20001634
    6228:	40011000 	.word	0x40011000
    622c:	20001630 	.word	0x20001630
    6230:	e000e100 	.word	0xe000e100

00006234 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    6234:	4b0d      	ldr	r3, [pc, #52]	; (626c <z_nrf_rtc_timer_read+0x38>)
    6236:	6818      	ldr	r0, [r3, #0]
    6238:	0a01      	lsrs	r1, r0, #8
    623a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    623c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    6240:	4b0b      	ldr	r3, [pc, #44]	; (6270 <z_nrf_rtc_timer_read+0x3c>)
    6242:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    6246:	1818      	adds	r0, r3, r0
    6248:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    624c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    6250:	d20a      	bcs.n	6268 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    6252:	4b08      	ldr	r3, [pc, #32]	; (6274 <z_nrf_rtc_timer_read+0x40>)
    6254:	e9d3 2300 	ldrd	r2, r3, [r3]
    6258:	4290      	cmp	r0, r2
    625a:	eb71 0303 	sbcs.w	r3, r1, r3
    625e:	d203      	bcs.n	6268 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    6260:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    6264:	f141 0100 	adc.w	r1, r1, #0
}
    6268:	4770      	bx	lr
    626a:	bf00      	nop
    626c:	20001638 	.word	0x20001638
    6270:	40011000 	.word	0x40011000
    6274:	200007b8 	.word	0x200007b8

00006278 <compare_set>:
{
    6278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    627c:	b085      	sub	sp, #20
    627e:	4616      	mov	r6, r2
    6280:	4698      	mov	r8, r3
    6282:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    6284:	f7ff ff44 	bl	6110 <compare_int_lock>
    6288:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    628a:	f7ff ffd3 	bl	6234 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    628e:	42b0      	cmp	r0, r6
    6290:	eb71 0308 	sbcs.w	r3, r1, r8
    6294:	d278      	bcs.n	6388 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    6296:	4b46      	ldr	r3, [pc, #280]	; (63b0 <compare_set+0x138>)
    6298:	1a30      	subs	r0, r6, r0
    629a:	eb68 0101 	sbc.w	r1, r8, r1
    629e:	4298      	cmp	r0, r3
    62a0:	f171 0300 	sbcs.w	r3, r1, #0
    62a4:	f080 8081 	bcs.w	63aa <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    62a8:	4b42      	ldr	r3, [pc, #264]	; (63b4 <compare_set+0x13c>)
    62aa:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    62ae:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    62b2:	45d8      	cmp	r8, fp
    62b4:	bf08      	it	eq
    62b6:	4556      	cmpeq	r6, sl
    62b8:	d051      	beq.n	635e <compare_set+0xe6>
    62ba:	ea4f 0985 	mov.w	r9, r5, lsl #2
    62be:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    62c2:	f105 0750 	add.w	r7, r5, #80	; 0x50
    62c6:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    62ca:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    62cc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    62d0:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    62d4:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    62d6:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    62da:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    62de:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    62e0:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    62e4:	4b34      	ldr	r3, [pc, #208]	; (63b8 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    62e6:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    62ea:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    62ec:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    62f0:	1a40      	subs	r0, r0, r1
    62f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    62f6:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    62fa:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    62fc:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    6300:	d107      	bne.n	6312 <compare_set+0x9a>
    6302:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    6306:	2013      	movs	r0, #19
    6308:	f006 f836 	bl	c378 <z_impl_k_busy_wait>
    630c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    6310:	4b29      	ldr	r3, [pc, #164]	; (63b8 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    6312:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    6316:	eba4 000c 	sub.w	r0, r4, ip
    631a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    631e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6322:	bf88      	it	hi
    6324:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6326:	2000      	movs	r0, #0
    6328:	6038      	str	r0, [r7, #0]
    632a:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    632c:	9801      	ldr	r0, [sp, #4]
    632e:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    6332:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    6336:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    633a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    633e:	4281      	cmp	r1, r0
    6340:	d006      	beq.n	6350 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    6342:	1a20      	subs	r0, r4, r0
    6344:	3802      	subs	r0, #2
    6346:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    634a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    634e:	d819      	bhi.n	6384 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    6350:	1aa4      	subs	r4, r4, r2
    6352:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    6356:	eb14 0a06 	adds.w	sl, r4, r6
    635a:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    635e:	4915      	ldr	r1, [pc, #84]	; (63b4 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    6360:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    6362:	012b      	lsls	r3, r5, #4
    6364:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    6368:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    636c:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    636e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6370:	6053      	str	r3, [r2, #4]
	return ret;
    6372:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    6374:	4628      	mov	r0, r5
    6376:	9900      	ldr	r1, [sp, #0]
    6378:	f7ff ff2e 	bl	61d8 <compare_int_unlock>
}
    637c:	4620      	mov	r0, r4
    637e:	b005      	add	sp, #20
    6380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6384:	4620      	mov	r0, r4
    6386:	e7b1      	b.n	62ec <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    6388:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    638a:	4a0c      	ldr	r2, [pc, #48]	; (63bc <compare_set+0x144>)
    638c:	f3bf 8f5b 	dmb	ish
    6390:	40ab      	lsls	r3, r5
    6392:	e852 1f00 	ldrex	r1, [r2]
    6396:	4319      	orrs	r1, r3
    6398:	e842 1000 	strex	r0, r1, [r2]
    639c:	2800      	cmp	r0, #0
    639e:	d1f8      	bne.n	6392 <compare_set+0x11a>
    63a0:	f3bf 8f5b 	dmb	ish
    63a4:	46b2      	mov	sl, r6
    63a6:	46c3      	mov	fp, r8
    63a8:	e7d9      	b.n	635e <compare_set+0xe6>
			return -EINVAL;
    63aa:	f06f 0415 	mvn.w	r4, #21
    63ae:	e7e1      	b.n	6374 <compare_set+0xfc>
    63b0:	01000001 	.word	0x01000001
    63b4:	200007c0 	.word	0x200007c0
    63b8:	40011000 	.word	0x40011000
    63bc:	20001630 	.word	0x20001630

000063c0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    63c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    63c2:	4b19      	ldr	r3, [pc, #100]	; (6428 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    63c4:	4d19      	ldr	r5, [pc, #100]	; (642c <sys_clock_driver_init+0x6c>)
    63c6:	2400      	movs	r4, #0
    63c8:	f04f 30ff 	mov.w	r0, #4294967295
    63cc:	f04f 31ff 	mov.w	r1, #4294967295
    63d0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    63d4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    63d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    63dc:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    63e0:	4b13      	ldr	r3, [pc, #76]	; (6430 <sys_clock_driver_init+0x70>)
    63e2:	2602      	movs	r6, #2
    63e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    63e8:	2101      	movs	r1, #1
    63ea:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    63ee:	2011      	movs	r0, #17
    63f0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    63f4:	4622      	mov	r2, r4
    63f6:	f7fd f847 	bl	3488 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    63fa:	2011      	movs	r0, #17
    63fc:	f7fd f812 	bl	3424 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    6400:	4a0c      	ldr	r2, [pc, #48]	; (6434 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    6402:	2301      	movs	r3, #1
    6404:	60ab      	str	r3, [r5, #8]
    6406:	602b      	str	r3, [r5, #0]
    6408:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    640a:	4b0b      	ldr	r3, [pc, #44]	; (6438 <sys_clock_driver_init+0x78>)
    640c:	4a0b      	ldr	r2, [pc, #44]	; (643c <sys_clock_driver_init+0x7c>)
    640e:	9300      	str	r3, [sp, #0]
    6410:	9401      	str	r4, [sp, #4]
    6412:	2300      	movs	r3, #0
    6414:	4620      	mov	r0, r4
    6416:	f7ff ff2f 	bl	6278 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    641a:	4630      	mov	r0, r6
    641c:	f7fe ff7c 	bl	5318 <z_nrf_clock_control_lf_on>

	return 0;
}
    6420:	4620      	mov	r0, r4
    6422:	b002      	add	sp, #8
    6424:	bd70      	pop	{r4, r5, r6, pc}
    6426:	bf00      	nop
    6428:	200007c0 	.word	0x200007c0
    642c:	40011000 	.word	0x40011000
    6430:	e000e100 	.word	0xe000e100
    6434:	20001634 	.word	0x20001634
    6438:	00006161 	.word	0x00006161
    643c:	007fffff 	.word	0x007fffff

00006440 <rtc_nrf_isr>:
{
    6440:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    6444:	4c35      	ldr	r4, [pc, #212]	; (651c <rtc_nrf_isr+0xdc>)
    6446:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    644a:	079a      	lsls	r2, r3, #30
    644c:	d50b      	bpl.n	6466 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    644e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    6452:	b143      	cbz	r3, 6466 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    6454:	4a32      	ldr	r2, [pc, #200]	; (6520 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6456:	2300      	movs	r3, #0
    6458:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    645c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    6460:	6813      	ldr	r3, [r2, #0]
    6462:	3301      	adds	r3, #1
    6464:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    6466:	f04f 0320 	mov.w	r3, #32
    646a:	f3ef 8211 	mrs	r2, BASEPRI
    646e:	f383 8812 	msr	BASEPRI_MAX, r3
    6472:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    6476:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    647a:	03db      	lsls	r3, r3, #15
    647c:	d512      	bpl.n	64a4 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    647e:	f3bf 8f5b 	dmb	ish
    6482:	4b28      	ldr	r3, [pc, #160]	; (6524 <rtc_nrf_isr+0xe4>)
    6484:	e853 1f00 	ldrex	r1, [r3]
    6488:	f021 0001 	bic.w	r0, r1, #1
    648c:	e843 0600 	strex	r6, r0, [r3]
    6490:	2e00      	cmp	r6, #0
    6492:	d1f7      	bne.n	6484 <rtc_nrf_isr+0x44>
    6494:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    6498:	2900      	cmp	r1, #0
    649a:	d136      	bne.n	650a <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    649c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    64a0:	2b00      	cmp	r3, #0
    64a2:	d132      	bne.n	650a <rtc_nrf_isr+0xca>
{
    64a4:	2300      	movs	r3, #0
	__asm__ volatile(
    64a6:	f382 8811 	msr	BASEPRI, r2
    64aa:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    64ae:	b34b      	cbz	r3, 6504 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    64b0:	f7ff fec0 	bl	6234 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    64b4:	f04f 0320 	mov.w	r3, #32
    64b8:	f3ef 8c11 	mrs	ip, BASEPRI
    64bc:	f383 8812 	msr	BASEPRI_MAX, r3
    64c0:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    64c4:	4b18      	ldr	r3, [pc, #96]	; (6528 <rtc_nrf_isr+0xe8>)
    64c6:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    64ca:	42b0      	cmp	r0, r6
    64cc:	eb71 0207 	sbcs.w	r2, r1, r7
    64d0:	f04f 0200 	mov.w	r2, #0
    64d4:	d320      	bcc.n	6518 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    64d6:	f04f 38ff 	mov.w	r8, #4294967295
    64da:	f04f 39ff 	mov.w	r9, #4294967295
			user_context = cc_data[chan].user_context;
    64de:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    64e2:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    64e6:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    64e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    64ec:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    64f0:	f38c 8811 	msr	BASEPRI, ip
    64f4:	f3bf 8f6f 	isb	sy
		if (handler) {
    64f8:	b121      	cbz	r1, 6504 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    64fa:	9500      	str	r5, [sp, #0]
    64fc:	4632      	mov	r2, r6
    64fe:	463b      	mov	r3, r7
    6500:	2000      	movs	r0, #0
    6502:	4788      	blx	r1
}
    6504:	b003      	add	sp, #12
    6506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    650a:	2300      	movs	r3, #0
    650c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    6510:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    6514:	2301      	movs	r3, #1
}
    6516:	e7c6      	b.n	64a6 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    6518:	4611      	mov	r1, r2
    651a:	e7e9      	b.n	64f0 <rtc_nrf_isr+0xb0>
    651c:	40011000 	.word	0x40011000
    6520:	20001638 	.word	0x20001638
    6524:	20001630 	.word	0x20001630
    6528:	200007c0 	.word	0x200007c0

0000652c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    652c:	1c43      	adds	r3, r0, #1
{
    652e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6530:	d021      	beq.n	6576 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    6532:	2801      	cmp	r0, #1
    6534:	dd21      	ble.n	657a <sys_clock_set_timeout+0x4e>
    6536:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    653a:	da20      	bge.n	657e <sys_clock_set_timeout+0x52>
    653c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    653e:	f7ff fe79 	bl	6234 <z_nrf_rtc_timer_read>
    6542:	4b10      	ldr	r3, [pc, #64]	; (6584 <sys_clock_set_timeout+0x58>)
    6544:	e9d3 1300 	ldrd	r1, r3, [r3]
    6548:	1a40      	subs	r0, r0, r1
		ticks = 0;
    654a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    654e:	bf28      	it	cs
    6550:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    6552:	3001      	adds	r0, #1
    6554:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    6556:	480c      	ldr	r0, [pc, #48]	; (6588 <sys_clock_set_timeout+0x5c>)
    6558:	4282      	cmp	r2, r0
    655a:	bf28      	it	cs
    655c:	4602      	movcs	r2, r0
    655e:	1852      	adds	r2, r2, r1
    6560:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    6564:	4909      	ldr	r1, [pc, #36]	; (658c <sys_clock_set_timeout+0x60>)
    6566:	9001      	str	r0, [sp, #4]
    6568:	9100      	str	r1, [sp, #0]
    656a:	f143 0300 	adc.w	r3, r3, #0
    656e:	f7ff fe83 	bl	6278 <compare_set>
}
    6572:	b002      	add	sp, #8
    6574:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6576:	4804      	ldr	r0, [pc, #16]	; (6588 <sys_clock_set_timeout+0x5c>)
    6578:	e7e0      	b.n	653c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    657a:	2400      	movs	r4, #0
    657c:	e7df      	b.n	653e <sys_clock_set_timeout+0x12>
    657e:	4c02      	ldr	r4, [pc, #8]	; (6588 <sys_clock_set_timeout+0x5c>)
    6580:	e7dd      	b.n	653e <sys_clock_set_timeout+0x12>
    6582:	bf00      	nop
    6584:	200007d0 	.word	0x200007d0
    6588:	007fffff 	.word	0x007fffff
    658c:	00006161 	.word	0x00006161

00006590 <sys_clock_elapsed>:
{
    6590:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    6592:	f7ff fe4f 	bl	6234 <z_nrf_rtc_timer_read>
    6596:	4b02      	ldr	r3, [pc, #8]	; (65a0 <sys_clock_elapsed+0x10>)
    6598:	681b      	ldr	r3, [r3, #0]
}
    659a:	1ac0      	subs	r0, r0, r3
    659c:	bd08      	pop	{r3, pc}
    659e:	bf00      	nop
    65a0:	200007d0 	.word	0x200007d0

000065a4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    65a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    65a6:	f7fb fb37 	bl	1c18 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    65aa:	4b07      	ldr	r3, [pc, #28]	; (65c8 <k_sys_fatal_error_handler+0x24>)
    65ac:	9305      	str	r3, [sp, #20]
    65ae:	2302      	movs	r3, #2
    65b0:	9304      	str	r3, [sp, #16]
    65b2:	4806      	ldr	r0, [pc, #24]	; (65cc <k_sys_fatal_error_handler+0x28>)
    65b4:	2300      	movs	r3, #0
    65b6:	aa04      	add	r2, sp, #16
    65b8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    65bc:	f004 fefc 	bl	b3b8 <z_impl_z_log_msg2_static_create>
		sys_arch_reboot(0);
    65c0:	2000      	movs	r0, #0
    65c2:	f7fd fcad 	bl	3f20 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    65c6:	bf00      	nop
    65c8:	0000d918 	.word	0x0000d918
    65cc:	0000c798 	.word	0x0000c798

000065d0 <RADIO_IRQHandler>:
	irq_unlock(key);
}

static void radio_irq_handler(void)
{
	if (NRF_RADIO->EVENTS_READY &&
    65d0:	4b19      	ldr	r3, [pc, #100]	; (6638 <RADIO_IRQHandler+0x68>)
			event_handler(&event);
		}
	}
}

ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    65d2:	4668      	mov	r0, sp
    65d4:	f020 0107 	bic.w	r1, r0, #7
	if (NRF_RADIO->EVENTS_READY &&
    65d8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    65dc:	468d      	mov	sp, r1
    65de:	b501      	push	{r0, lr}
	if (NRF_RADIO->EVENTS_READY &&
    65e0:	b14a      	cbz	r2, 65f6 <RADIO_IRQHandler+0x26>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_READY_Msk)) {
    65e2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_READY &&
    65e6:	07d0      	lsls	r0, r2, #31
		NRF_RADIO->EVENTS_READY = 0;
    65e8:	bf41      	itttt	mi
    65ea:	2200      	movmi	r2, #0
    65ec:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
		ESB_SYS_TIMER->TASKS_START;
    65f0:	f503 4310 	addmi.w	r3, r3, #36864	; 0x9000
    65f4:	681b      	ldrmi	r3, [r3, #0]
	if (NRF_RADIO->EVENTS_END &&
    65f6:	4b10      	ldr	r3, [pc, #64]	; (6638 <RADIO_IRQHandler+0x68>)
    65f8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    65fc:	b132      	cbz	r2, 660c <RADIO_IRQHandler+0x3c>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_END_Msk)) {
    65fe:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_END &&
    6602:	0711      	lsls	r1, r2, #28
		NRF_RADIO->EVENTS_END = 0;
    6604:	bf44      	itt	mi
    6606:	2200      	movmi	r2, #0
    6608:	f8c3 210c 	strmi.w	r2, [r3, #268]	; 0x10c
	if (NRF_RADIO->EVENTS_DISABLED &&
    660c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    6610:	b152      	cbz	r2, 6628 <RADIO_IRQHandler+0x58>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_DISABLED_Msk)) {
    6612:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_DISABLED &&
    6616:	06d2      	lsls	r2, r2, #27
    6618:	d506      	bpl.n	6628 <RADIO_IRQHandler+0x58>
		NRF_RADIO->EVENTS_DISABLED = 0;
    661a:	2200      	movs	r2, #0
    661c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		if (on_radio_disabled) {
    6620:	4b06      	ldr	r3, [pc, #24]	; (663c <RADIO_IRQHandler+0x6c>)
    6622:	681b      	ldr	r3, [r3, #0]
    6624:	b103      	cbz	r3, 6628 <RADIO_IRQHandler+0x58>
			on_radio_disabled();
    6626:	4798      	blx	r3
{
	radio_irq_handler();

	ISR_DIRECT_PM();
    6628:	f7fc ff46 	bl	34b8 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
    662c:	f7fd f828 	bl	3680 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    6630:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    6634:	4685      	mov	sp, r0
    6636:	4770      	bx	lr
    6638:	40001000 	.word	0x40001000
    663c:	20001648 	.word	0x20001648

00006640 <SWI0_EGU0_IRQHandler>:

	return 1;
}


ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    6640:	4668      	mov	r0, sp
    6642:	f020 0107 	bic.w	r1, r0, #7
    6646:	468d      	mov	sp, r1
    6648:	b531      	push	{r0, r4, r5, lr}
	event.tx_attempts = last_tx_attempts;
    664a:	4b1b      	ldr	r3, [pc, #108]	; (66b8 <SWI0_EGU0_IRQHandler+0x78>)
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    664c:	b082      	sub	sp, #8
	event.tx_attempts = last_tx_attempts;
    664e:	681b      	ldr	r3, [r3, #0]
    6650:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
    6652:	f04f 0320 	mov.w	r3, #32
    6656:	f3ef 8111 	mrs	r1, BASEPRI
    665a:	f383 8812 	msr	BASEPRI_MAX, r3
    665e:	f3bf 8f6f 	isb	sy
	*interrupts = interrupt_flags;
    6662:	4b16      	ldr	r3, [pc, #88]	; (66bc <SWI0_EGU0_IRQHandler+0x7c>)
	interrupt_flags = 0;
    6664:	2200      	movs	r2, #0
	*interrupts = interrupt_flags;
    6666:	681d      	ldr	r5, [r3, #0]
	interrupt_flags = 0;
    6668:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    666a:	f381 8811 	msr	BASEPRI, r1
    666e:	f3bf 8f6f 	isb	sy
	if (event_handler != NULL) {
    6672:	4c13      	ldr	r4, [pc, #76]	; (66c0 <SWI0_EGU0_IRQHandler+0x80>)
    6674:	6823      	ldr	r3, [r4, #0]
    6676:	b1ab      	cbz	r3, 66a4 <SWI0_EGU0_IRQHandler+0x64>
		if (interrupts & INT_TX_SUCCESS_MSK) {
    6678:	07e9      	lsls	r1, r5, #31
    667a:	d503      	bpl.n	6684 <SWI0_EGU0_IRQHandler+0x44>
			event.evt_id = ESB_EVENT_TX_SUCCESS;
    667c:	f88d 2000 	strb.w	r2, [sp]
			event_handler(&event);
    6680:	4668      	mov	r0, sp
    6682:	4798      	blx	r3
		if (interrupts & INT_TX_FAILED_MSK) {
    6684:	07aa      	lsls	r2, r5, #30
    6686:	d505      	bpl.n	6694 <SWI0_EGU0_IRQHandler+0x54>
			event.evt_id = ESB_EVENT_TX_FAILED;
    6688:	2301      	movs	r3, #1
    668a:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    668e:	4668      	mov	r0, sp
    6690:	6823      	ldr	r3, [r4, #0]
    6692:	4798      	blx	r3
		if (interrupts & INT_RX_DATA_RECEIVED_MSK) {
    6694:	076b      	lsls	r3, r5, #29
    6696:	d505      	bpl.n	66a4 <SWI0_EGU0_IRQHandler+0x64>
			event.evt_id = ESB_EVENT_RX_RECEIVED;
    6698:	2302      	movs	r3, #2
    669a:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    669e:	4668      	mov	r0, sp
    66a0:	6823      	ldr	r3, [r4, #0]
    66a2:	4798      	blx	r3
{
	esb_evt_irq_handler();

	ISR_DIRECT_PM();
    66a4:	f7fc ff08 	bl	34b8 <_arch_isr_direct_pm>
    66a8:	f7fc ffea 	bl	3680 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    66ac:	b002      	add	sp, #8
    66ae:	e8bd 4031 	ldmia.w	sp!, {r0, r4, r5, lr}
    66b2:	4685      	mov	sp, r0
    66b4:	4770      	bx	lr
    66b6:	bf00      	nop
    66b8:	20001644 	.word	0x20001644
    66bc:	20001640 	.word	0x20001640
    66c0:	2000163c 	.word	0x2000163c

000066c4 <pmw3360_channel_get>:
{
	struct pmw3360_data *dev_data = &pmw3360_data;

	ARG_UNUSED(dev);

	if (unlikely(!dev_data->ready)) {
    66c4:	4b0b      	ldr	r3, [pc, #44]	; (66f4 <pmw3360_channel_get+0x30>)
    66c6:	f893 0068 	ldrb.w	r0, [r3, #104]	; 0x68
    66ca:	b178      	cbz	r0, 66ec <pmw3360_channel_get+0x28>
		LOG_DBG("Device is not initialized yet");
		return -EBUSY;
	}

	switch (chan) {
    66cc:	2923      	cmp	r1, #35	; 0x23
    66ce:	d004      	beq.n	66da <pmw3360_channel_get+0x16>
    66d0:	2924      	cmp	r1, #36	; 0x24
    66d2:	d008      	beq.n	66e6 <pmw3360_channel_get+0x22>
    66d4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    66d8:	4770      	bx	lr
	case SENSOR_CHAN_POS_DX:
		val->val1 = dev_data->x;
    66da:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
		val->val2 = 0;
		break;

	case SENSOR_CHAN_POS_DY:
		val->val1 = dev_data->y;
    66de:	6013      	str	r3, [r2, #0]
		val->val2 = 0;
    66e0:	2000      	movs	r0, #0
    66e2:	6050      	str	r0, [r2, #4]
		break;
    66e4:	4770      	bx	lr
		val->val1 = dev_data->y;
    66e6:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
    66ea:	e7f8      	b.n	66de <pmw3360_channel_get+0x1a>
		return -EBUSY;
    66ec:	f06f 000f 	mvn.w	r0, #15
	default:
		return -ENOTSUP;
	}

	return 0;
}
    66f0:	4770      	bx	lr
    66f2:	bf00      	nop
    66f4:	200007d8 	.word	0x200007d8

000066f8 <pmw3360_async_init>:
{
    66f8:	b570      	push	{r4, r5, r6, lr}
	dev_data->err = async_init_fn[dev_data->async_init_step](dev_data);
    66fa:	4c22      	ldr	r4, [pc, #136]	; (6784 <pmw3360_async_init+0x8c>)
    66fc:	4b22      	ldr	r3, [pc, #136]	; (6788 <pmw3360_async_init+0x90>)
    66fe:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
{
    6702:	b086      	sub	sp, #24
	dev_data->err = async_init_fn[dev_data->async_init_step](dev_data);
    6704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6708:	4620      	mov	r0, r4
    670a:	4798      	blx	r3
    670c:	4601      	mov	r1, r0
    670e:	6660      	str	r0, [r4, #100]	; 0x64
	if (dev_data->err) {
    6710:	b158      	cbz	r0, 672a <pmw3360_async_init+0x32>
		LOG_ERR("PMW3360 initialization failed");
    6712:	4b1e      	ldr	r3, [pc, #120]	; (678c <pmw3360_async_init+0x94>)
    6714:	9305      	str	r3, [sp, #20]
    6716:	2302      	movs	r3, #2
    6718:	9304      	str	r3, [sp, #16]
    671a:	aa04      	add	r2, sp, #16
    671c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			LOG_INF("PMW3360 initialized");
    6720:	481b      	ldr	r0, [pc, #108]	; (6790 <pmw3360_async_init+0x98>)
    6722:	f005 f9a1 	bl	ba68 <z_log_msg2_static_create.constprop.0>
}
    6726:	b006      	add	sp, #24
    6728:	bd70      	pop	{r4, r5, r6, pc}
		dev_data->async_init_step++;
    672a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    672e:	3301      	adds	r3, #1
    6730:	b2db      	uxtb	r3, r3
		if (dev_data->async_init_step == ASYNC_INIT_STEP_COUNT) {
    6732:	2b05      	cmp	r3, #5
		dev_data->async_init_step++;
    6734:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		if (dev_data->async_init_step == ASYNC_INIT_STEP_COUNT) {
    6738:	d10a      	bne.n	6750 <pmw3360_async_init+0x58>
			dev_data->ready = true;
    673a:	2301      	movs	r3, #1
    673c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
			LOG_INF("PMW3360 initialized");
    6740:	4b14      	ldr	r3, [pc, #80]	; (6794 <pmw3360_async_init+0x9c>)
    6742:	9305      	str	r3, [sp, #20]
    6744:	2302      	movs	r3, #2
    6746:	9304      	str	r3, [sp, #16]
    6748:	aa04      	add	r2, sp, #16
    674a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    674e:	e7e7      	b.n	6720 <pmw3360_async_init+0x28>
					K_MSEC(async_init_delay[
    6750:	4a11      	ldr	r2, [pc, #68]	; (6798 <pmw3360_async_init+0xa0>)
    6752:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    6756:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    675a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    675e:	f240 30e7 	movw	r0, #999	; 0x3e7
    6762:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6766:	2300      	movs	r3, #0
    6768:	fbc5 0106 	smlal	r0, r1, r5, r6
    676c:	f7f9 fcb8 	bl	e0 <__aeabi_uldivmod>
    6770:	4602      	mov	r2, r0
    6772:	460b      	mov	r3, r1
			k_work_schedule(&dev_data->init_work,
    6774:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    6778:	b006      	add	sp, #24
    677a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&dev_data->init_work,
    677e:	f003 ba47 	b.w	9c10 <k_work_schedule>
    6782:	bf00      	nop
    6784:	200007d8 	.word	0x200007d8
    6788:	0000ca98 	.word	0x0000ca98
    678c:	0000d935 	.word	0x0000d935
    6790:	0000c7d0 	.word	0x0000c7d0
    6794:	0000d953 	.word	0x0000d953
    6798:	0000ca84 	.word	0x0000ca84

0000679c <spi_write.constprop.0>:
 * @param tx_bufs Buffer array where data to be sent originates from.
 *
 * @retval 0 If successful.
 * @retval -errno Negative errno code on failure.
 */
static inline int spi_write(const struct device *dev,
    679c:	b410      	push	{r4}
    679e:	460a      	mov	r2, r1
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    67a0:	6883      	ldr	r3, [r0, #8]
    67a2:	4903      	ldr	r1, [pc, #12]	; (67b0 <spi_write.constprop.0+0x14>)
    67a4:	681c      	ldr	r4, [r3, #0]
    67a6:	2300      	movs	r3, #0
    67a8:	46a4      	mov	ip, r4
			    const struct spi_config *config,
			    const struct spi_buf_set *tx_bufs)
{
	return spi_transceive(dev, config, tx_bufs, NULL);
}
    67aa:	bc10      	pop	{r4}
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    67ac:	4760      	bx	ip
    67ae:	bf00      	nop
    67b0:	0000cac0 	.word	0x0000cac0

000067b4 <spi_cs_ctrl>:
{
    67b4:	b530      	push	{r4, r5, lr}
    67b6:	4604      	mov	r4, r0
    67b8:	b087      	sub	sp, #28
	if (!enable) {
    67ba:	460d      	mov	r5, r1
    67bc:	b911      	cbnz	r1, 67c4 <spi_cs_ctrl+0x10>
		k_busy_wait(T_NCS_SCLK);
    67be:	2001      	movs	r0, #1
    67c0:	f005 f950 	bl	ba64 <k_busy_wait>
	err = gpio_pin_set_raw(dev_data->cs_gpio_dev, PMW3360_CS_GPIO_PIN, val);
    67c4:	6820      	ldr	r0, [r4, #0]
	if (value != 0)	{
    67c6:	b9b5      	cbnz	r5, 67f6 <spi_cs_ctrl+0x42>
	return api->port_set_bits_raw(port, pins);
    67c8:	6883      	ldr	r3, [r0, #8]
    67ca:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    67cc:	2140      	movs	r1, #64	; 0x40
    67ce:	4798      	blx	r3
    67d0:	4604      	mov	r4, r0
	if (err) {
    67d2:	b148      	cbz	r0, 67e8 <spi_cs_ctrl+0x34>
		LOG_ERR("SPI CS ctrl failed");
    67d4:	4b09      	ldr	r3, [pc, #36]	; (67fc <spi_cs_ctrl+0x48>)
    67d6:	9305      	str	r3, [sp, #20]
    67d8:	4809      	ldr	r0, [pc, #36]	; (6800 <spi_cs_ctrl+0x4c>)
    67da:	2302      	movs	r3, #2
    67dc:	aa04      	add	r2, sp, #16
    67de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    67e2:	9304      	str	r3, [sp, #16]
    67e4:	f005 f940 	bl	ba68 <z_log_msg2_static_create.constprop.0>
	if (enable) {
    67e8:	b115      	cbz	r5, 67f0 <spi_cs_ctrl+0x3c>
		k_busy_wait(T_NCS_SCLK);
    67ea:	2001      	movs	r0, #1
    67ec:	f005 f93a 	bl	ba64 <k_busy_wait>
}
    67f0:	4620      	mov	r0, r4
    67f2:	b007      	add	sp, #28
    67f4:	bd30      	pop	{r4, r5, pc}
    67f6:	6883      	ldr	r3, [r0, #8]
    67f8:	691b      	ldr	r3, [r3, #16]
    67fa:	e7e7      	b.n	67cc <spi_cs_ctrl+0x18>
    67fc:	0000d967 	.word	0x0000d967
    6800:	0000c7d0 	.word	0x0000c7d0

00006804 <reg_write.part.0>:
static int reg_write(struct pmw3360_data *dev_data, uint8_t reg, uint8_t val)
    6804:	b570      	push	{r4, r5, r6, lr}
    6806:	b08c      	sub	sp, #48	; 0x30
	const struct spi_buf tx_buf = {
    6808:	ab01      	add	r3, sp, #4
	uint8_t buf[] = {
    680a:	f061 017f 	orn	r1, r1, #127	; 0x7f
	const struct spi_buf tx_buf = {
    680e:	9302      	str	r3, [sp, #8]
	const struct spi_buf_set tx = {
    6810:	ab02      	add	r3, sp, #8
	uint8_t buf[] = {
    6812:	f88d 1004 	strb.w	r1, [sp, #4]
	const struct spi_buf_set tx = {
    6816:	9304      	str	r3, [sp, #16]
static int reg_write(struct pmw3360_data *dev_data, uint8_t reg, uint8_t val)
    6818:	4605      	mov	r5, r0
	const struct spi_buf_set tx = {
    681a:	2301      	movs	r3, #1
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    681c:	6880      	ldr	r0, [r0, #8]
	uint8_t buf[] = {
    681e:	f88d 2005 	strb.w	r2, [sp, #5]
	const struct spi_buf tx_buf = {
    6822:	2602      	movs	r6, #2
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    6824:	a904      	add	r1, sp, #16
	const struct spi_buf tx_buf = {
    6826:	9603      	str	r6, [sp, #12]
	const struct spi_buf_set tx = {
    6828:	9305      	str	r3, [sp, #20]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    682a:	f7ff ffb7 	bl	679c <spi_write.constprop.0>
	if (err) {
    682e:	4604      	mov	r4, r0
    6830:	b158      	cbz	r0, 684a <reg_write.part.0+0x46>
		LOG_ERR("Reg write failed on SPI write");
    6832:	4b0e      	ldr	r3, [pc, #56]	; (686c <reg_write.part.0+0x68>)
    6834:	480e      	ldr	r0, [pc, #56]	; (6870 <reg_write.part.0+0x6c>)
    6836:	aa0a      	add	r2, sp, #40	; 0x28
    6838:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    683c:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
    6840:	f005 f912 	bl	ba68 <z_log_msg2_static_create.constprop.0>
}
    6844:	4620      	mov	r0, r4
    6846:	b00c      	add	sp, #48	; 0x30
    6848:	bd70      	pop	{r4, r5, r6, pc}
	k_busy_wait(T_SCLK_NCS_WR);
    684a:	2022      	movs	r0, #34	; 0x22
    684c:	f005 f90a 	bl	ba64 <k_busy_wait>
	err = spi_cs_ctrl(dev_data, false);
    6850:	4621      	mov	r1, r4
    6852:	4628      	mov	r0, r5
    6854:	f7ff ffae 	bl	67b4 <spi_cs_ctrl>
	if (err) {
    6858:	4604      	mov	r4, r0
    685a:	2800      	cmp	r0, #0
    685c:	d1f2      	bne.n	6844 <reg_write.part.0+0x40>
	k_busy_wait(T_SWX);
    685e:	2092      	movs	r0, #146	; 0x92
    6860:	f005 f900 	bl	ba64 <k_busy_wait>
	dev_data->last_read_burst = false;
    6864:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69
	return 0;
    6868:	e7ec      	b.n	6844 <reg_write.part.0+0x40>
    686a:	bf00      	nop
    686c:	0000d97a 	.word	0x0000d97a
    6870:	0000c7d0 	.word	0x0000c7d0

00006874 <update_cpi>:
{
    6874:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((cpi > PMW3360_MAX_CPI) || (cpi < PMW3360_MIN_CPI)) {
    6876:	f1a1 0264 	sub.w	r2, r1, #100	; 0x64
    687a:	f642 637c 	movw	r3, #11900	; 0x2e7c
{
    687e:	b087      	sub	sp, #28
	if ((cpi > PMW3360_MAX_CPI) || (cpi < PMW3360_MIN_CPI)) {
    6880:	429a      	cmp	r2, r3
{
    6882:	4605      	mov	r5, r0
    6884:	af00      	add	r7, sp, #0
	if ((cpi > PMW3360_MAX_CPI) || (cpi < PMW3360_MIN_CPI)) {
    6886:	d914      	bls.n	68b2 <update_cpi+0x3e>
		LOG_ERR("CPI value %u out of range", cpi);
    6888:	466c      	mov	r4, sp
    688a:	4b1e      	ldr	r3, [pc, #120]	; (6904 <update_cpi+0x90>)
    688c:	481e      	ldr	r0, [pc, #120]	; (6908 <update_cpi+0x94>)
    688e:	b088      	sub	sp, #32
    6890:	466a      	mov	r2, sp
    6892:	e9c2 3105 	strd	r3, r1, [r2, #20]
    6896:	2303      	movs	r3, #3
    6898:	f842 3f10 	str.w	r3, [r2, #16]!
    689c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    68a0:	f005 f8e2 	bl	ba68 <z_log_msg2_static_create.constprop.0>
    68a4:	46a5      	mov	sp, r4
		return -EINVAL;
    68a6:	f06f 0415 	mvn.w	r4, #21
}
    68aa:	4620      	mov	r0, r4
    68ac:	371c      	adds	r7, #28
    68ae:	46bd      	mov	sp, r7
    68b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("Setting CPI to %u (reg value 0x%x)", cpi, value);
    68b2:	4b16      	ldr	r3, [pc, #88]	; (690c <update_cpi+0x98>)
    68b4:	4814      	ldr	r0, [pc, #80]	; (6908 <update_cpi+0x94>)
    68b6:	466e      	mov	r6, sp
    68b8:	b088      	sub	sp, #32
    68ba:	466a      	mov	r2, sp
	uint8_t value = (cpi / 100) - 1;
    68bc:	2464      	movs	r4, #100	; 0x64
    68be:	fbb1 f4f4 	udiv	r4, r1, r4
    68c2:	3c01      	subs	r4, #1
	LOG_INF("Setting CPI to %u (reg value 0x%x)", cpi, value);
    68c4:	e9c2 3105 	strd	r3, r1, [r2, #20]
	uint8_t value = (cpi / 100) - 1;
    68c8:	b2e4      	uxtb	r4, r4
	LOG_INF("Setting CPI to %u (reg value 0x%x)", cpi, value);
    68ca:	2304      	movs	r3, #4
    68cc:	61d4      	str	r4, [r2, #28]
    68ce:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    68d2:	f842 3f10 	str.w	r3, [r2, #16]!
    68d6:	f005 f8c7 	bl	ba68 <z_log_msg2_static_create.constprop.0>
	int err = reg_write(dev_data, PMW3360_REG_CONFIG1, value);
    68da:	4622      	mov	r2, r4
    68dc:	46b5      	mov	sp, r6
    68de:	210f      	movs	r1, #15
    68e0:	4628      	mov	r0, r5
    68e2:	f005 f8c4 	bl	ba6e <reg_write>
	if (err) {
    68e6:	4604      	mov	r4, r0
    68e8:	2800      	cmp	r0, #0
    68ea:	d0de      	beq.n	68aa <update_cpi+0x36>
		LOG_ERR("Failed to change CPI");
    68ec:	4b08      	ldr	r3, [pc, #32]	; (6910 <update_cpi+0x9c>)
    68ee:	617b      	str	r3, [r7, #20]
    68f0:	4805      	ldr	r0, [pc, #20]	; (6908 <update_cpi+0x94>)
    68f2:	2302      	movs	r3, #2
    68f4:	f107 0210 	add.w	r2, r7, #16
    68f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    68fc:	613b      	str	r3, [r7, #16]
    68fe:	f005 f8b3 	bl	ba68 <z_log_msg2_static_create.constprop.0>
    6902:	e7d2      	b.n	68aa <update_cpi+0x36>
    6904:	0000d998 	.word	0x0000d998
    6908:	0000c7d0 	.word	0x0000c7d0
    690c:	0000d9b2 	.word	0x0000d9b2
    6910:	0000d9d5 	.word	0x0000d9d5

00006914 <update_downshift_time>:
{
    6914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (reg_addr) {
    6918:	2917      	cmp	r1, #23
{
    691a:	b086      	sub	sp, #24
    691c:	4606      	mov	r6, r0
    691e:	af00      	add	r7, sp, #0
    6920:	460d      	mov	r5, r1
    6922:	4614      	mov	r4, r2
	switch (reg_addr) {
    6924:	d015      	beq.n	6952 <update_downshift_time+0x3e>
    6926:	291a      	cmp	r1, #26
    6928:	d02c      	beq.n	6984 <update_downshift_time+0x70>
    692a:	2914      	cmp	r1, #20
    692c:	d02e      	beq.n	698c <update_downshift_time+0x78>
		LOG_ERR("Not supported");
    692e:	4b2d      	ldr	r3, [pc, #180]	; (69e4 <update_downshift_time+0xd0>)
    6930:	617b      	str	r3, [r7, #20]
    6932:	482d      	ldr	r0, [pc, #180]	; (69e8 <update_downshift_time+0xd4>)
    6934:	2302      	movs	r3, #2
    6936:	f107 0210 	add.w	r2, r7, #16
    693a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENOTSUP;
    693e:	f06f 0485 	mvn.w	r4, #133	; 0x85
		LOG_ERR("Not supported");
    6942:	613b      	str	r3, [r7, #16]
    6944:	f005 f890 	bl	ba68 <z_log_msg2_static_create.constprop.0>
}
    6948:	4620      	mov	r0, r4
    694a:	3718      	adds	r7, #24
    694c:	46bd      	mov	sp, r7
    694e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		maxtime = 81600;
    6952:	4a26      	ldr	r2, [pc, #152]	; (69ec <update_downshift_time+0xd8>)
		mintime = 320;
    6954:	f44f 73a0 	mov.w	r3, #320	; 0x140
	if ((time > maxtime) || (time < mintime)) {
    6958:	4294      	cmp	r4, r2
    695a:	d801      	bhi.n	6960 <update_downshift_time+0x4c>
    695c:	429c      	cmp	r4, r3
    695e:	d219      	bcs.n	6994 <update_downshift_time+0x80>
		LOG_WRN("Downshift time %u out of range", time);
    6960:	4b23      	ldr	r3, [pc, #140]	; (69f0 <update_downshift_time+0xdc>)
    6962:	4821      	ldr	r0, [pc, #132]	; (69e8 <update_downshift_time+0xd4>)
    6964:	466d      	mov	r5, sp
    6966:	b088      	sub	sp, #32
    6968:	466a      	mov	r2, sp
    696a:	e9c2 3405 	strd	r3, r4, [r2, #20]
    696e:	2303      	movs	r3, #3
    6970:	f842 3f10 	str.w	r3, [r2, #16]!
    6974:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    6978:	f005 f876 	bl	ba68 <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    697c:	f06f 0415 	mvn.w	r4, #21
    6980:	46ad      	mov	sp, r5
    6982:	e7e1      	b.n	6948 <update_downshift_time+0x34>
	switch (reg_addr) {
    6984:	4a1b      	ldr	r2, [pc, #108]	; (69f4 <update_downshift_time+0xe0>)
    6986:	f44f 6348 	mov.w	r3, #3200	; 0xc80
    698a:	e7e5      	b.n	6958 <update_downshift_time+0x44>
		mintime = 10;
    698c:	230a      	movs	r3, #10
		maxtime = 2550;
    698e:	f640 12f6 	movw	r2, #2550	; 0x9f6
    6992:	e7e1      	b.n	6958 <update_downshift_time+0x44>
	LOG_INF("Set downshift time to %u ms (reg value 0x%x)", time, value);
    6994:	4918      	ldr	r1, [pc, #96]	; (69f8 <update_downshift_time+0xe4>)
	uint8_t value = time / mintime;
    6996:	fbb4 f3f3 	udiv	r3, r4, r3
	LOG_INF("Set downshift time to %u ms (reg value 0x%x)", time, value);
    699a:	46e8      	mov	r8, sp
    699c:	b088      	sub	sp, #32
    699e:	466a      	mov	r2, sp
    69a0:	e9c2 1405 	strd	r1, r4, [r2, #20]
    69a4:	b2dc      	uxtb	r4, r3
    69a6:	2304      	movs	r3, #4
    69a8:	61d4      	str	r4, [r2, #28]
    69aa:	480f      	ldr	r0, [pc, #60]	; (69e8 <update_downshift_time+0xd4>)
    69ac:	f842 3f10 	str.w	r3, [r2, #16]!
    69b0:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    69b4:	f005 f858 	bl	ba68 <z_log_msg2_static_create.constprop.0>
	int err = reg_write(dev_data, reg_addr, value);
    69b8:	4622      	mov	r2, r4
    69ba:	46c5      	mov	sp, r8
    69bc:	4629      	mov	r1, r5
    69be:	4630      	mov	r0, r6
    69c0:	f005 f855 	bl	ba6e <reg_write>
	if (err) {
    69c4:	4604      	mov	r4, r0
    69c6:	2800      	cmp	r0, #0
    69c8:	d0be      	beq.n	6948 <update_downshift_time+0x34>
		LOG_ERR("Failed to change downshift time");
    69ca:	4b0c      	ldr	r3, [pc, #48]	; (69fc <update_downshift_time+0xe8>)
    69cc:	617b      	str	r3, [r7, #20]
    69ce:	4806      	ldr	r0, [pc, #24]	; (69e8 <update_downshift_time+0xd4>)
    69d0:	2302      	movs	r3, #2
    69d2:	f107 0210 	add.w	r2, r7, #16
    69d6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    69da:	613b      	str	r3, [r7, #16]
    69dc:	f005 f844 	bl	ba68 <z_log_msg2_static_create.constprop.0>
    69e0:	e7b2      	b.n	6948 <update_downshift_time+0x34>
    69e2:	bf00      	nop
    69e4:	0000d9ea 	.word	0x0000d9ea
    69e8:	0000c7d0 	.word	0x0000c7d0
    69ec:	00013ec0 	.word	0x00013ec0
    69f0:	0000d9f8 	.word	0x0000d9f8
    69f4:	000c7380 	.word	0x000c7380
    69f8:	0000da17 	.word	0x0000da17
    69fc:	0000da44 	.word	0x0000da44

00006a00 <pmw3360_async_init_configure>:
{
    6a00:	b510      	push	{r4, lr}
	err = update_cpi(dev_data, CONFIG_PMW3360_CPI);
    6a02:	f44f 71c8 	mov.w	r1, #400	; 0x190
{
    6a06:	4604      	mov	r4, r0
	err = update_cpi(dev_data, CONFIG_PMW3360_CPI);
    6a08:	f7ff ff34 	bl	6874 <update_cpi>
	if (!err) {
    6a0c:	b9a0      	cbnz	r0, 6a38 <pmw3360_async_init_configure+0x38>
		err = update_downshift_time(dev_data,
    6a0e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    6a12:	2114      	movs	r1, #20
    6a14:	4620      	mov	r0, r4
    6a16:	f7ff ff7d 	bl	6914 <update_downshift_time>
	if (!err) {
    6a1a:	b968      	cbnz	r0, 6a38 <pmw3360_async_init_configure+0x38>
		err = update_downshift_time(dev_data,
    6a1c:	f242 4204 	movw	r2, #9220	; 0x2404
    6a20:	2117      	movs	r1, #23
    6a22:	4620      	mov	r0, r4
    6a24:	f7ff ff76 	bl	6914 <update_downshift_time>
	if (!err) {
    6a28:	b930      	cbnz	r0, 6a38 <pmw3360_async_init_configure+0x38>
		err = update_downshift_time(dev_data,
    6a2a:	4620      	mov	r0, r4
    6a2c:	4a03      	ldr	r2, [pc, #12]	; (6a3c <pmw3360_async_init_configure+0x3c>)
}
    6a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = update_downshift_time(dev_data,
    6a32:	211a      	movs	r1, #26
    6a34:	f7ff bf6e 	b.w	6914 <update_downshift_time>
}
    6a38:	bd10      	pop	{r4, pc}
    6a3a:	bf00      	nop
    6a3c:	000249f0 	.word	0x000249f0

00006a40 <update_sample_time.constprop.0>:
static int update_sample_time(struct pmw3360_data *dev_data,
    6a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((sample_time > maxtime) || (sample_time < mintime)) {
    6a44:	1e56      	subs	r6, r2, #1
static int update_sample_time(struct pmw3360_data *dev_data,
    6a46:	b086      	sub	sp, #24
	if ((sample_time > maxtime) || (sample_time < mintime)) {
    6a48:	f5b6 6f1b 	cmp.w	r6, #2480	; 0x9b0
static int update_sample_time(struct pmw3360_data *dev_data,
    6a4c:	4604      	mov	r4, r0
    6a4e:	af00      	add	r7, sp, #0
    6a50:	460d      	mov	r5, r1
    6a52:	4613      	mov	r3, r2
	if ((sample_time > maxtime) || (sample_time < mintime)) {
    6a54:	d315      	bcc.n	6a82 <update_sample_time.constprop.0+0x42>
		LOG_WRN("Sample time %u out of range", sample_time);
    6a56:	466c      	mov	r4, sp
    6a58:	491f      	ldr	r1, [pc, #124]	; (6ad8 <update_sample_time.constprop.0+0x98>)
    6a5a:	4820      	ldr	r0, [pc, #128]	; (6adc <update_sample_time.constprop.0+0x9c>)
    6a5c:	b088      	sub	sp, #32
    6a5e:	466a      	mov	r2, sp
    6a60:	e9c2 1305 	strd	r1, r3, [r2, #20]
    6a64:	2303      	movs	r3, #3
    6a66:	f842 3f10 	str.w	r3, [r2, #16]!
    6a6a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    6a6e:	f004 fffb 	bl	ba68 <z_log_msg2_static_create.constprop.0>
    6a72:	46a5      	mov	sp, r4
		return -EINVAL;
    6a74:	f06f 0415 	mvn.w	r4, #21
}
    6a78:	4620      	mov	r0, r4
    6a7a:	3718      	adds	r7, #24
    6a7c:	46bd      	mov	sp, r7
    6a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_INF("Set sample time to %u ms", sample_time);
    6a82:	4917      	ldr	r1, [pc, #92]	; (6ae0 <update_sample_time.constprop.0+0xa0>)
    6a84:	4815      	ldr	r0, [pc, #84]	; (6adc <update_sample_time.constprop.0+0x9c>)
    6a86:	46e8      	mov	r8, sp
    6a88:	b088      	sub	sp, #32
    6a8a:	466a      	mov	r2, sp
    6a8c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    6a90:	2303      	movs	r3, #3
    6a92:	f842 3f10 	str.w	r3, [r2, #16]!
    6a96:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    6a9a:	f004 ffe5 	bl	ba68 <z_log_msg2_static_create.constprop.0>
	int err = reg_write(dev_data, reg_addr_lower, buf[0]);
    6a9e:	4621      	mov	r1, r4
    6aa0:	4810      	ldr	r0, [pc, #64]	; (6ae4 <update_sample_time.constprop.0+0xa4>)
    6aa2:	46c5      	mov	sp, r8
    6aa4:	b2f2      	uxtb	r2, r6
    6aa6:	f004 ffe2 	bl	ba6e <reg_write>
	if (!err) {
    6aaa:	4604      	mov	r4, r0
    6aac:	b938      	cbnz	r0, 6abe <update_sample_time.constprop.0+0x7e>
		err = reg_write(dev_data, reg_addr_upper, buf[1]);
    6aae:	480d      	ldr	r0, [pc, #52]	; (6ae4 <update_sample_time.constprop.0+0xa4>)
    6ab0:	f3c6 2207 	ubfx	r2, r6, #8, #8
    6ab4:	4629      	mov	r1, r5
    6ab6:	f004 ffda 	bl	ba6e <reg_write>
    6aba:	4604      	mov	r4, r0
    6abc:	e7dc      	b.n	6a78 <update_sample_time.constprop.0+0x38>
		LOG_ERR("Failed to change sample time");
    6abe:	4b0a      	ldr	r3, [pc, #40]	; (6ae8 <update_sample_time.constprop.0+0xa8>)
    6ac0:	617b      	str	r3, [r7, #20]
    6ac2:	4806      	ldr	r0, [pc, #24]	; (6adc <update_sample_time.constprop.0+0x9c>)
    6ac4:	2302      	movs	r3, #2
    6ac6:	f107 0210 	add.w	r2, r7, #16
    6aca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6ace:	613b      	str	r3, [r7, #16]
    6ad0:	f004 ffca 	bl	ba68 <z_log_msg2_static_create.constprop.0>
    6ad4:	e7d0      	b.n	6a78 <update_sample_time.constprop.0+0x38>
    6ad6:	bf00      	nop
    6ad8:	0000da64 	.word	0x0000da64
    6adc:	0000c7d0 	.word	0x0000c7d0
    6ae0:	0000da80 	.word	0x0000da80
    6ae4:	200007d8 	.word	0x200007d8
    6ae8:	0000da99 	.word	0x0000da99

00006aec <pmw3360_async_init_fw_load_continue>:
{
    6aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    6aee:	b08f      	sub	sp, #60	; 0x3c
	LOG_INF("Uploading optical sensor firmware...");
    6af0:	4b35      	ldr	r3, [pc, #212]	; (6bc8 <pmw3360_async_init_fw_load_continue+0xdc>)
    6af2:	930d      	str	r3, [sp, #52]	; 0x34
{
    6af4:	4605      	mov	r5, r0
	LOG_INF("Uploading optical sensor firmware...");
    6af6:	aa0c      	add	r2, sp, #48	; 0x30
    6af8:	4834      	ldr	r0, [pc, #208]	; (6bcc <pmw3360_async_init_fw_load_continue+0xe0>)
    6afa:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    6afe:	2602      	movs	r6, #2
    6b00:	960c      	str	r6, [sp, #48]	; 0x30
    6b02:	f004 ffb1 	bl	ba68 <z_log_msg2_static_create.constprop.0>
	err = reg_write(dev_data, PMW3360_REG_SROM_ENABLE, 0x18);
    6b06:	2218      	movs	r2, #24
    6b08:	2113      	movs	r1, #19
    6b0a:	4628      	mov	r0, r5
    6b0c:	f004 ffaf 	bl	ba6e <reg_write>
	if (err) {
    6b10:	4604      	mov	r4, r0
    6b12:	b148      	cbz	r0, 6b28 <pmw3360_async_init_fw_load_continue+0x3c>
		LOG_ERR("Cannot start SROM download");
    6b14:	4b2e      	ldr	r3, [pc, #184]	; (6bd0 <pmw3360_async_init_fw_load_continue+0xe4>)
    6b16:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
		LOG_ERR("Cannot write firmware to sensor");
    6b1a:	482c      	ldr	r0, [pc, #176]	; (6bcc <pmw3360_async_init_fw_load_continue+0xe0>)
    6b1c:	aa0c      	add	r2, sp, #48	; 0x30
    6b1e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6b22:	f004 ffa1 	bl	ba68 <z_log_msg2_static_create.constprop.0>
    6b26:	e029      	b.n	6b7c <pmw3360_async_init_fw_load_continue+0x90>
	err = burst_write(dev_data, PMW3360_REG_SROM_LOAD_BURST,
    6b28:	4b2a      	ldr	r3, [pc, #168]	; (6bd4 <pmw3360_async_init_fw_load_continue+0xe8>)
	err = spi_cs_ctrl(dev_data, true);
    6b2a:	2101      	movs	r1, #1
	err = burst_write(dev_data, PMW3360_REG_SROM_LOAD_BURST,
    6b2c:	681b      	ldr	r3, [r3, #0]
    6b2e:	9301      	str	r3, [sp, #4]
	err = spi_cs_ctrl(dev_data, true);
    6b30:	4628      	mov	r0, r5
    6b32:	f7ff fe3f 	bl	67b4 <spi_cs_ctrl>
	if (err) {
    6b36:	4604      	mov	r4, r0
    6b38:	bb60      	cbnz	r0, 6b94 <pmw3360_async_init_fw_load_continue+0xa8>
	uint8_t write_buf = reg | SPI_WRITE_BIT;
    6b3a:	23e2      	movs	r3, #226	; 0xe2
    6b3c:	f88d 300f 	strb.w	r3, [sp, #15]
	struct spi_buf tx_buf = {
    6b40:	f10d 030f 	add.w	r3, sp, #15
    6b44:	9304      	str	r3, [sp, #16]
	const struct spi_buf_set tx = {
    6b46:	aa04      	add	r2, sp, #16
	struct spi_buf tx_buf = {
    6b48:	2301      	movs	r3, #1
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    6b4a:	68a8      	ldr	r0, [r5, #8]
	struct spi_buf tx_buf = {
    6b4c:	9305      	str	r3, [sp, #20]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    6b4e:	a906      	add	r1, sp, #24
	const struct spi_buf_set tx = {
    6b50:	e9cd 2306 	strd	r2, r3, [sp, #24]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    6b54:	f7ff fe22 	bl	679c <spi_write.constprop.0>
	if (err) {
    6b58:	4604      	mov	r4, r0
    6b5a:	b990      	cbnz	r0, 6b82 <pmw3360_async_init_fw_load_continue+0x96>
    6b5c:	4f1e      	ldr	r7, [pc, #120]	; (6bd8 <pmw3360_async_init_fw_load_continue+0xec>)
	for (size_t i = 0; i < size; i++) {
    6b5e:	4606      	mov	r6, r0
    6b60:	9b01      	ldr	r3, [sp, #4]
    6b62:	42b3      	cmp	r3, r6
    6b64:	d11b      	bne.n	6b9e <pmw3360_async_init_fw_load_continue+0xb2>
	err = spi_cs_ctrl(dev_data, false);
    6b66:	2100      	movs	r1, #0
    6b68:	4628      	mov	r0, r5
    6b6a:	f7ff fe23 	bl	67b4 <spi_cs_ctrl>
	if (err) {
    6b6e:	4604      	mov	r4, r0
    6b70:	b980      	cbnz	r0, 6b94 <pmw3360_async_init_fw_load_continue+0xa8>
	k_busy_wait(T_BEXIT);
    6b72:	2001      	movs	r0, #1
    6b74:	f004 ff76 	bl	ba64 <k_busy_wait>
	dev_data->last_read_burst = false;
    6b78:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69
}
    6b7c:	4620      	mov	r0, r4
    6b7e:	b00f      	add	sp, #60	; 0x3c
    6b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Burst write failed on SPI write");
    6b82:	4b16      	ldr	r3, [pc, #88]	; (6bdc <pmw3360_async_init_fw_load_continue+0xf0>)
    6b84:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
			LOG_ERR("Burst write failed on SPI write (data)");
    6b88:	4810      	ldr	r0, [pc, #64]	; (6bcc <pmw3360_async_init_fw_load_continue+0xe0>)
    6b8a:	aa0c      	add	r2, sp, #48	; 0x30
    6b8c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6b90:	f004 ff6a 	bl	ba68 <z_log_msg2_static_create.constprop.0>
		LOG_ERR("Cannot write firmware to sensor");
    6b94:	4b12      	ldr	r3, [pc, #72]	; (6be0 <pmw3360_async_init_fw_load_continue+0xf4>)
    6b96:	930d      	str	r3, [sp, #52]	; 0x34
    6b98:	2302      	movs	r3, #2
    6b9a:	930c      	str	r3, [sp, #48]	; 0x30
    6b9c:	e7bd      	b.n	6b1a <pmw3360_async_init_fw_load_continue+0x2e>
		write_buf = buf[i];
    6b9e:	f817 3b01 	ldrb.w	r3, [r7], #1
		err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    6ba2:	68a8      	ldr	r0, [r5, #8]
		write_buf = buf[i];
    6ba4:	f88d 300f 	strb.w	r3, [sp, #15]
		err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    6ba8:	a906      	add	r1, sp, #24
    6baa:	f7ff fdf7 	bl	679c <spi_write.constprop.0>
		if (err) {
    6bae:	4604      	mov	r4, r0
    6bb0:	b120      	cbz	r0, 6bbc <pmw3360_async_init_fw_load_continue+0xd0>
			LOG_ERR("Burst write failed on SPI write (data)");
    6bb2:	4b0c      	ldr	r3, [pc, #48]	; (6be4 <pmw3360_async_init_fw_load_continue+0xf8>)
    6bb4:	930d      	str	r3, [sp, #52]	; 0x34
    6bb6:	2302      	movs	r3, #2
    6bb8:	930c      	str	r3, [sp, #48]	; 0x30
    6bba:	e7e5      	b.n	6b88 <pmw3360_async_init_fw_load_continue+0x9c>
		k_busy_wait(T_BRSEP);
    6bbc:	200f      	movs	r0, #15
    6bbe:	f004 ff51 	bl	ba64 <k_busy_wait>
	for (size_t i = 0; i < size; i++) {
    6bc2:	3601      	adds	r6, #1
    6bc4:	e7cc      	b.n	6b60 <pmw3360_async_init_fw_load_continue+0x74>
    6bc6:	bf00      	nop
    6bc8:	0000dab6 	.word	0x0000dab6
    6bcc:	0000c7d0 	.word	0x0000c7d0
    6bd0:	0000dadb 	.word	0x0000dadb
    6bd4:	0000cacc 	.word	0x0000cacc
    6bd8:	0000ddd3 	.word	0x0000ddd3
    6bdc:	0000daf6 	.word	0x0000daf6
    6be0:	0000db3d 	.word	0x0000db3d
    6be4:	0000db16 	.word	0x0000db16

00006be8 <irq_handler>:
{
    6be8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	err = gpio_pin_interrupt_configure(pmw3360_data.irq_gpio_dev,
    6bea:	4b0e      	ldr	r3, [pc, #56]	; (6c24 <irq_handler+0x3c>)
    6bec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    6bf0:	6858      	ldr	r0, [r3, #4]
    6bf2:	f004 ff50 	bl	ba96 <gpio_pin_interrupt_configure.constprop.0>
	if (unlikely(err)) {
    6bf6:	b178      	cbz	r0, 6c18 <irq_handler+0x30>
		LOG_ERR("Cannot disable IRQ");
    6bf8:	4b0b      	ldr	r3, [pc, #44]	; (6c28 <irq_handler+0x40>)
    6bfa:	9305      	str	r3, [sp, #20]
    6bfc:	480b      	ldr	r0, [pc, #44]	; (6c2c <irq_handler+0x44>)
    6bfe:	2302      	movs	r3, #2
    6c00:	aa04      	add	r2, sp, #16
    6c02:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6c06:	9304      	str	r3, [sp, #16]
    6c08:	f004 ff2e 	bl	ba68 <z_log_msg2_static_create.constprop.0>
		k_panic();
    6c0c:	4040      	eors	r0, r0
    6c0e:	f380 8811 	msr	BASEPRI, r0
    6c12:	f04f 0004 	mov.w	r0, #4
    6c16:	df02      	svc	2
	k_work_submit(&pmw3360_data.trigger_handler_work);
    6c18:	4805      	ldr	r0, [pc, #20]	; (6c30 <irq_handler+0x48>)
}
    6c1a:	b007      	add	sp, #28
    6c1c:	f85d eb04 	ldr.w	lr, [sp], #4
	k_work_submit(&pmw3360_data.trigger_handler_work);
    6c20:	f002 bf8e 	b.w	9b40 <k_work_submit>
    6c24:	200007d8 	.word	0x200007d8
    6c28:	0000db5d 	.word	0x0000db5d
    6c2c:	0000c7d0 	.word	0x0000c7d0
    6c30:	200007f8 	.word	0x200007f8

00006c34 <trigger_handler>:
{
    6c34:	b530      	push	{r4, r5, lr}
    6c36:	b089      	sub	sp, #36	; 0x24
	__asm__ volatile(
    6c38:	f04f 0320 	mov.w	r3, #32
    6c3c:	f3ef 8211 	mrs	r2, BASEPRI
    6c40:	f383 8812 	msr	BASEPRI_MAX, r3
    6c44:	f3bf 8f6f 	isb	sy
	handler = pmw3360_data.data_ready_handler;
    6c48:	4c1a      	ldr	r4, [pc, #104]	; (6cb4 <trigger_handler+0x80>)
    6c4a:	69e3      	ldr	r3, [r4, #28]
	__asm__ volatile(
    6c4c:	f382 8811 	msr	BASEPRI, r2
    6c50:	f3bf 8f6f 	isb	sy
	if (!handler) {
    6c54:	b363      	cbz	r3, 6cb0 <trigger_handler+0x7c>
	struct sensor_trigger trig = {
    6c56:	2201      	movs	r2, #1
    6c58:	f8ad 2004 	strh.w	r2, [sp, #4]
    6c5c:	2239      	movs	r2, #57	; 0x39
	handler(DEVICE_DT_INST_GET(0), &trig);
    6c5e:	4816      	ldr	r0, [pc, #88]	; (6cb8 <trigger_handler+0x84>)
	struct sensor_trigger trig = {
    6c60:	f8ad 2006 	strh.w	r2, [sp, #6]
	handler(DEVICE_DT_INST_GET(0), &trig);
    6c64:	a901      	add	r1, sp, #4
    6c66:	4798      	blx	r3
	__asm__ volatile(
    6c68:	f04f 0320 	mov.w	r3, #32
    6c6c:	f3ef 8511 	mrs	r5, BASEPRI
    6c70:	f383 8812 	msr	BASEPRI_MAX, r3
    6c74:	f3bf 8f6f 	isb	sy
	if (pmw3360_data.data_ready_handler) {
    6c78:	69e0      	ldr	r0, [r4, #28]
    6c7a:	b120      	cbz	r0, 6c86 <trigger_handler+0x52>
		err = gpio_pin_interrupt_configure(pmw3360_data.irq_gpio_dev,
    6c7c:	6860      	ldr	r0, [r4, #4]
    6c7e:	f04f 7110 	mov.w	r1, #37748736	; 0x2400000
    6c82:	f004 ff08 	bl	ba96 <gpio_pin_interrupt_configure.constprop.0>
	__asm__ volatile(
    6c86:	f385 8811 	msr	BASEPRI, r5
    6c8a:	f3bf 8f6f 	isb	sy
	if (unlikely(err)) {
    6c8e:	b178      	cbz	r0, 6cb0 <trigger_handler+0x7c>
		LOG_ERR("Cannot re-enable IRQ");
    6c90:	4b0a      	ldr	r3, [pc, #40]	; (6cbc <trigger_handler+0x88>)
    6c92:	9307      	str	r3, [sp, #28]
    6c94:	480a      	ldr	r0, [pc, #40]	; (6cc0 <trigger_handler+0x8c>)
    6c96:	2302      	movs	r3, #2
    6c98:	aa06      	add	r2, sp, #24
    6c9a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6c9e:	9306      	str	r3, [sp, #24]
    6ca0:	f004 fee2 	bl	ba68 <z_log_msg2_static_create.constprop.0>
		k_panic();
    6ca4:	4040      	eors	r0, r0
    6ca6:	f380 8811 	msr	BASEPRI, r0
    6caa:	f04f 0004 	mov.w	r0, #4
    6cae:	df02      	svc	2
}
    6cb0:	b009      	add	sp, #36	; 0x24
    6cb2:	bd30      	pop	{r4, r5, pc}
    6cb4:	200007d8 	.word	0x200007d8
    6cb8:	0000c630 	.word	0x0000c630
    6cbc:	0000db70 	.word	0x0000db70
    6cc0:	0000c7d0 	.word	0x0000c7d0

00006cc4 <pmw3360_trigger_set>:
	struct pmw3360_data *dev_data = &pmw3360_data;
	int err;

	ARG_UNUSED(dev);

	if (unlikely(trig->type != SENSOR_TRIG_DATA_READY)) {
    6cc4:	880b      	ldrh	r3, [r1, #0]
    6cc6:	2b01      	cmp	r3, #1
{
    6cc8:	b570      	push	{r4, r5, r6, lr}
    6cca:	4615      	mov	r5, r2
	if (unlikely(trig->type != SENSOR_TRIG_DATA_READY)) {
    6ccc:	d11e      	bne.n	6d0c <pmw3360_trigger_set+0x48>
		return -ENOTSUP;
	}

	if (unlikely(trig->chan != SENSOR_CHAN_ALL)) {
    6cce:	884b      	ldrh	r3, [r1, #2]
    6cd0:	2b39      	cmp	r3, #57	; 0x39
    6cd2:	d11b      	bne.n	6d0c <pmw3360_trigger_set+0x48>
		return -ENOTSUP;
	}

	if (unlikely(!dev_data->ready)) {
    6cd4:	4c10      	ldr	r4, [pc, #64]	; (6d18 <pmw3360_trigger_set+0x54>)
    6cd6:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    6cda:	b1d3      	cbz	r3, 6d12 <pmw3360_trigger_set+0x4e>
	__asm__ volatile(
    6cdc:	f04f 0320 	mov.w	r3, #32
    6ce0:	f3ef 8611 	mrs	r6, BASEPRI
    6ce4:	f383 8812 	msr	BASEPRI_MAX, r3
    6ce8:	f3bf 8f6f 	isb	sy
		return -EBUSY;
	}

	k_spinlock_key_t key = k_spin_lock(&dev_data->lock);

	if (handler) {
    6cec:	b15a      	cbz	r2, 6d06 <pmw3360_trigger_set+0x42>
		err = gpio_pin_interrupt_configure(dev_data->irq_gpio_dev,
    6cee:	f04f 7110 	mov.w	r1, #37748736	; 0x2400000
						   PMW3360_IRQ_GPIO_PIN,
						   GPIO_INT_LEVEL_LOW);
	} else {
		err = gpio_pin_interrupt_configure(dev_data->irq_gpio_dev,
    6cf2:	6860      	ldr	r0, [r4, #4]
    6cf4:	f004 fecf 	bl	ba96 <gpio_pin_interrupt_configure.constprop.0>
						   PMW3360_IRQ_GPIO_PIN,
						   GPIO_INT_DISABLE);
	}

	if (!err) {
    6cf8:	b900      	cbnz	r0, 6cfc <pmw3360_trigger_set+0x38>
		dev_data->data_ready_handler = handler;
    6cfa:	61e5      	str	r5, [r4, #28]
	__asm__ volatile(
    6cfc:	f386 8811 	msr	BASEPRI, r6
    6d00:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&dev_data->lock, key);

	return err;
}
    6d04:	bd70      	pop	{r4, r5, r6, pc}
		err = gpio_pin_interrupt_configure(dev_data->irq_gpio_dev,
    6d06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    6d0a:	e7f2      	b.n	6cf2 <pmw3360_trigger_set+0x2e>
		return -ENOTSUP;
    6d0c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6d10:	e7f8      	b.n	6d04 <pmw3360_trigger_set+0x40>
		return -EBUSY;
    6d12:	f06f 000f 	mvn.w	r0, #15
    6d16:	e7f5      	b.n	6d04 <pmw3360_trigger_set+0x40>
    6d18:	200007d8 	.word	0x200007d8

00006d1c <reg_read>:
{
    6d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d1e:	b091      	sub	sp, #68	; 0x44
    6d20:	4607      	mov	r7, r0
    6d22:	f88d 1007 	strb.w	r1, [sp, #7]
	err = spi_cs_ctrl(dev_data, true);
    6d26:	2101      	movs	r1, #1
{
    6d28:	4616      	mov	r6, r2
	err = spi_cs_ctrl(dev_data, true);
    6d2a:	f7ff fd43 	bl	67b4 <spi_cs_ctrl>
	if (err) {
    6d2e:	4604      	mov	r4, r0
    6d30:	b9b8      	cbnz	r0, 6d62 <reg_read+0x46>
	const struct spi_buf tx_buf = {
    6d32:	f10d 0307 	add.w	r3, sp, #7
    6d36:	9302      	str	r3, [sp, #8]
    6d38:	2501      	movs	r5, #1
	const struct spi_buf_set tx = {
    6d3a:	ab02      	add	r3, sp, #8
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    6d3c:	68b8      	ldr	r0, [r7, #8]
	const struct spi_buf tx_buf = {
    6d3e:	9503      	str	r5, [sp, #12]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    6d40:	a904      	add	r1, sp, #16
	const struct spi_buf_set tx = {
    6d42:	e9cd 3504 	strd	r3, r5, [sp, #16]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    6d46:	f7ff fd29 	bl	679c <spi_write.constprop.0>
	if (err) {
    6d4a:	4604      	mov	r4, r0
    6d4c:	b160      	cbz	r0, 6d68 <reg_read+0x4c>
		LOG_ERR("Reg read failed on SPI write");
    6d4e:	4b16      	ldr	r3, [pc, #88]	; (6da8 <reg_read+0x8c>)
		LOG_ERR("Reg read failed on SPI read");
    6d50:	930f      	str	r3, [sp, #60]	; 0x3c
    6d52:	4816      	ldr	r0, [pc, #88]	; (6dac <reg_read+0x90>)
    6d54:	2302      	movs	r3, #2
    6d56:	aa0e      	add	r2, sp, #56	; 0x38
    6d58:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6d5c:	930e      	str	r3, [sp, #56]	; 0x38
    6d5e:	f004 fe83 	bl	ba68 <z_log_msg2_static_create.constprop.0>
}
    6d62:	4620      	mov	r0, r4
    6d64:	b011      	add	sp, #68	; 0x44
    6d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	k_busy_wait(T_SRAD);
    6d68:	20a0      	movs	r0, #160	; 0xa0
    6d6a:	f004 fe7b 	bl	ba64 <k_busy_wait>
	const struct spi_buf_set rx = {
    6d6e:	ab06      	add	r3, sp, #24
	struct spi_buf rx_buf = {
    6d70:	e9cd 6506 	strd	r6, r5, [sp, #24]
	const struct spi_buf_set rx = {
    6d74:	e9cd 3508 	strd	r3, r5, [sp, #32]
	err = spi_read(dev_data->spi_dev, &spi_cfg, &rx);
    6d78:	68b8      	ldr	r0, [r7, #8]
    6d7a:	6883      	ldr	r3, [r0, #8]
    6d7c:	490c      	ldr	r1, [pc, #48]	; (6db0 <reg_read+0x94>)
    6d7e:	681d      	ldr	r5, [r3, #0]
    6d80:	4622      	mov	r2, r4
    6d82:	ab08      	add	r3, sp, #32
    6d84:	47a8      	blx	r5
	if (err) {
    6d86:	4604      	mov	r4, r0
    6d88:	b108      	cbz	r0, 6d8e <reg_read+0x72>
		LOG_ERR("Reg read failed on SPI read");
    6d8a:	4b0a      	ldr	r3, [pc, #40]	; (6db4 <reg_read+0x98>)
    6d8c:	e7e0      	b.n	6d50 <reg_read+0x34>
	err = spi_cs_ctrl(dev_data, false);
    6d8e:	4601      	mov	r1, r0
    6d90:	4638      	mov	r0, r7
    6d92:	f7ff fd0f 	bl	67b4 <spi_cs_ctrl>
	if (err) {
    6d96:	4604      	mov	r4, r0
    6d98:	2800      	cmp	r0, #0
    6d9a:	d1e2      	bne.n	6d62 <reg_read+0x46>
	k_busy_wait(T_SRX);
    6d9c:	2013      	movs	r0, #19
    6d9e:	f004 fe61 	bl	ba64 <k_busy_wait>
	dev_data->last_read_burst = false;
    6da2:	f887 4069 	strb.w	r4, [r7, #105]	; 0x69
	return 0;
    6da6:	e7dc      	b.n	6d62 <reg_read+0x46>
    6da8:	0000db85 	.word	0x0000db85
    6dac:	0000c7d0 	.word	0x0000c7d0
    6db0:	0000cac0 	.word	0x0000cac0
    6db4:	0000dba2 	.word	0x0000dba2

00006db8 <pmw3360_async_init_fw_load_verify>:
{
    6db8:	b530      	push	{r4, r5, lr}
    6dba:	b089      	sub	sp, #36	; 0x24
	err = reg_read(dev_data, PMW3360_REG_SROM_ID, &fw_id);
    6dbc:	f10d 0206 	add.w	r2, sp, #6
    6dc0:	212a      	movs	r1, #42	; 0x2a
{
    6dc2:	4605      	mov	r5, r0
	err = reg_read(dev_data, PMW3360_REG_SROM_ID, &fw_id);
    6dc4:	f7ff ffaa 	bl	6d1c <reg_read>
	if (err) {
    6dc8:	4604      	mov	r4, r0
    6dca:	b150      	cbz	r0, 6de2 <pmw3360_async_init_fw_load_verify+0x2a>
		LOG_ERR("Cannot obtain firmware id");
    6dcc:	4b1b      	ldr	r3, [pc, #108]	; (6e3c <pmw3360_async_init_fw_load_verify+0x84>)
		LOG_ERR("Cannot enable REST modes");
    6dce:	9307      	str	r3, [sp, #28]
    6dd0:	481b      	ldr	r0, [pc, #108]	; (6e40 <pmw3360_async_init_fw_load_verify+0x88>)
    6dd2:	2302      	movs	r3, #2
    6dd4:	aa06      	add	r2, sp, #24
    6dd6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6dda:	9306      	str	r3, [sp, #24]
    6ddc:	f004 fe44 	bl	ba68 <z_log_msg2_static_create.constprop.0>
    6de0:	e00f      	b.n	6e02 <pmw3360_async_init_fw_load_verify+0x4a>
	if (fw_id != PMW3360_FIRMWARE_ID) {
    6de2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6de6:	2b04      	cmp	r3, #4
    6de8:	d00e      	beq.n	6e08 <pmw3360_async_init_fw_load_verify+0x50>
		LOG_ERR("Chip is not running from SROM!");
    6dea:	4b16      	ldr	r3, [pc, #88]	; (6e44 <pmw3360_async_init_fw_load_verify+0x8c>)
		LOG_ERR("Invalid product id!");
    6dec:	9307      	str	r3, [sp, #28]
    6dee:	4814      	ldr	r0, [pc, #80]	; (6e40 <pmw3360_async_init_fw_load_verify+0x88>)
    6df0:	2302      	movs	r3, #2
    6df2:	aa06      	add	r2, sp, #24
    6df4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
    6df8:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("Invalid product id!");
    6dfc:	9306      	str	r3, [sp, #24]
    6dfe:	f004 fe33 	bl	ba68 <z_log_msg2_static_create.constprop.0>
}
    6e02:	4620      	mov	r0, r4
    6e04:	b009      	add	sp, #36	; 0x24
    6e06:	bd30      	pop	{r4, r5, pc}
	err = reg_read(dev_data, PMW3360_REG_PRODUCT_ID, &product_id);
    6e08:	4601      	mov	r1, r0
    6e0a:	f10d 0207 	add.w	r2, sp, #7
    6e0e:	4628      	mov	r0, r5
    6e10:	f7ff ff84 	bl	6d1c <reg_read>
	if (err) {
    6e14:	4604      	mov	r4, r0
    6e16:	b108      	cbz	r0, 6e1c <pmw3360_async_init_fw_load_verify+0x64>
		LOG_ERR("Cannot obtain product id");
    6e18:	4b0b      	ldr	r3, [pc, #44]	; (6e48 <pmw3360_async_init_fw_load_verify+0x90>)
    6e1a:	e7d8      	b.n	6dce <pmw3360_async_init_fw_load_verify+0x16>
	if (product_id != PMW3360_PRODUCT_ID) {
    6e1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e20:	2b42      	cmp	r3, #66	; 0x42
    6e22:	d001      	beq.n	6e28 <pmw3360_async_init_fw_load_verify+0x70>
		LOG_ERR("Invalid product id!");
    6e24:	4b09      	ldr	r3, [pc, #36]	; (6e4c <pmw3360_async_init_fw_load_verify+0x94>)
    6e26:	e7e1      	b.n	6dec <pmw3360_async_init_fw_load_verify+0x34>
	err = reg_write(dev_data, PMW3360_REG_CONFIG2, 0x20);
    6e28:	2220      	movs	r2, #32
    6e2a:	2110      	movs	r1, #16
    6e2c:	4628      	mov	r0, r5
    6e2e:	f004 fe1e 	bl	ba6e <reg_write>
	if (err) {
    6e32:	4604      	mov	r4, r0
    6e34:	2800      	cmp	r0, #0
    6e36:	d0e4      	beq.n	6e02 <pmw3360_async_init_fw_load_verify+0x4a>
		LOG_ERR("Cannot enable REST modes");
    6e38:	4b05      	ldr	r3, [pc, #20]	; (6e50 <pmw3360_async_init_fw_load_verify+0x98>)
    6e3a:	e7c8      	b.n	6dce <pmw3360_async_init_fw_load_verify+0x16>
    6e3c:	0000dbbe 	.word	0x0000dbbe
    6e40:	0000c7d0 	.word	0x0000c7d0
    6e44:	0000dbd8 	.word	0x0000dbd8
    6e48:	0000dbf7 	.word	0x0000dbf7
    6e4c:	0000dc10 	.word	0x0000dc10
    6e50:	0000dc24 	.word	0x0000dc24

00006e54 <pmw3360_async_init_fw_load_start>:
{
    6e54:	b570      	push	{r4, r5, r6, lr}
    6e56:	4606      	mov	r6, r0
    6e58:	b086      	sub	sp, #24
	for (uint8_t reg = 0x02; (reg <= 0x06) && !err; reg++) {
    6e5a:	2502      	movs	r5, #2
		err = reg_read(dev_data, reg, buf);
    6e5c:	4629      	mov	r1, r5
    6e5e:	466a      	mov	r2, sp
    6e60:	4630      	mov	r0, r6
    6e62:	f7ff ff5b 	bl	6d1c <reg_read>
	for (uint8_t reg = 0x02; (reg <= 0x06) && !err; reg++) {
    6e66:	3501      	adds	r5, #1
    6e68:	b2ed      	uxtb	r5, r5
    6e6a:	2d07      	cmp	r5, #7
		err = reg_read(dev_data, reg, buf);
    6e6c:	4604      	mov	r4, r0
	for (uint8_t reg = 0x02; (reg <= 0x06) && !err; reg++) {
    6e6e:	d00e      	beq.n	6e8e <pmw3360_async_init_fw_load_start+0x3a>
    6e70:	2800      	cmp	r0, #0
    6e72:	d0f3      	beq.n	6e5c <pmw3360_async_init_fw_load_start+0x8>
		LOG_ERR("Cannot read from data registers");
    6e74:	4b10      	ldr	r3, [pc, #64]	; (6eb8 <pmw3360_async_init_fw_load_start+0x64>)
		LOG_ERR("Cannot initialize SROM");
    6e76:	9305      	str	r3, [sp, #20]
    6e78:	4810      	ldr	r0, [pc, #64]	; (6ebc <pmw3360_async_init_fw_load_start+0x68>)
    6e7a:	2302      	movs	r3, #2
    6e7c:	aa04      	add	r2, sp, #16
    6e7e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6e82:	9304      	str	r3, [sp, #16]
    6e84:	f004 fdf0 	bl	ba68 <z_log_msg2_static_create.constprop.0>
}
    6e88:	4620      	mov	r0, r4
    6e8a:	b006      	add	sp, #24
    6e8c:	bd70      	pop	{r4, r5, r6, pc}
	if (err) {
    6e8e:	2800      	cmp	r0, #0
    6e90:	d1f0      	bne.n	6e74 <pmw3360_async_init_fw_load_start+0x20>
	err = reg_write(dev_data, PMW3360_REG_CONFIG2, 0x00);
    6e92:	4602      	mov	r2, r0
    6e94:	2110      	movs	r1, #16
    6e96:	4630      	mov	r0, r6
    6e98:	f004 fde9 	bl	ba6e <reg_write>
	if (err) {
    6e9c:	4604      	mov	r4, r0
    6e9e:	b108      	cbz	r0, 6ea4 <pmw3360_async_init_fw_load_start+0x50>
		LOG_ERR("Cannot disable REST mode");
    6ea0:	4b07      	ldr	r3, [pc, #28]	; (6ec0 <pmw3360_async_init_fw_load_start+0x6c>)
    6ea2:	e7e8      	b.n	6e76 <pmw3360_async_init_fw_load_start+0x22>
	err = reg_write(dev_data, PMW3360_REG_SROM_ENABLE, 0x1D);
    6ea4:	221d      	movs	r2, #29
    6ea6:	2113      	movs	r1, #19
    6ea8:	4630      	mov	r0, r6
    6eaa:	f004 fde0 	bl	ba6e <reg_write>
	if (err) {
    6eae:	4604      	mov	r4, r0
    6eb0:	2800      	cmp	r0, #0
    6eb2:	d0e9      	beq.n	6e88 <pmw3360_async_init_fw_load_start+0x34>
		LOG_ERR("Cannot initialize SROM");
    6eb4:	4b03      	ldr	r3, [pc, #12]	; (6ec4 <pmw3360_async_init_fw_load_start+0x70>)
    6eb6:	e7de      	b.n	6e76 <pmw3360_async_init_fw_load_start+0x22>
    6eb8:	0000dc3d 	.word	0x0000dc3d
    6ebc:	0000c7d0 	.word	0x0000c7d0
    6ec0:	0000dc5d 	.word	0x0000dc5d
    6ec4:	0000dc76 	.word	0x0000dc76

00006ec8 <pmw3360_attr_set>:

static int pmw3360_attr_set(const struct device *dev, enum sensor_channel chan,
			    enum sensor_attribute attr,
			    const struct sensor_value *val)
{
    6ec8:	b5b0      	push	{r4, r5, r7, lr}
	struct pmw3360_data *dev_data = &pmw3360_data;
	int err;

	ARG_UNUSED(dev);

	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    6eca:	2939      	cmp	r1, #57	; 0x39
{
    6ecc:	b088      	sub	sp, #32
    6ece:	af00      	add	r7, sp, #0
	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    6ed0:	d179      	bne.n	6fc6 <pmw3360_attr_set+0xfe>
		return -ENOTSUP;
	}

	if (unlikely(!dev_data->ready)) {
    6ed2:	4940      	ldr	r1, [pc, #256]	; (6fd4 <pmw3360_attr_set+0x10c>)
    6ed4:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
    6ed8:	2900      	cmp	r1, #0
    6eda:	d077      	beq.n	6fcc <pmw3360_attr_set+0x104>
		LOG_DBG("Device is not initialized yet");
		return -EBUSY;
	}

	switch ((uint32_t)attr) {
    6edc:	3a0e      	subs	r2, #14
    6ede:	2a07      	cmp	r2, #7
    6ee0:	d866      	bhi.n	6fb0 <pmw3360_attr_set+0xe8>
    6ee2:	e8df f002 	tbb	[pc, r2]
    6ee6:	0a04      	.short	0x0a04
    6ee8:	5754514b 	.word	0x5754514b
    6eec:	615d      	.short	0x615d
	case PMW3360_ATTR_CPI:
		err = update_cpi(dev_data, PMW3360_SVALUE_TO_CPI(*val));
    6eee:	6819      	ldr	r1, [r3, #0]
    6ef0:	4838      	ldr	r0, [pc, #224]	; (6fd4 <pmw3360_attr_set+0x10c>)
    6ef2:	f7ff fcbf 	bl	6874 <update_cpi>
					PMW3360_REG_CONFIG2,
					PMW3360_SVALUE_TO_BOOL(*val));
		break;

	case PMW3360_ATTR_RUN_DOWNSHIFT_TIME:
		err = update_downshift_time(dev_data,
    6ef6:	4604      	mov	r4, r0
					    PMW3360_REG_RUN_DOWNSHIFT,
					    PMW3360_SVALUE_TO_TIME(*val));
		break;
    6ef8:	e012      	b.n	6f20 <pmw3360_attr_set+0x58>
	int err = reg_read(dev_data, reg_addr, &value);
    6efa:	4836      	ldr	r0, [pc, #216]	; (6fd4 <pmw3360_attr_set+0x10c>)
					PMW3360_SVALUE_TO_BOOL(*val));
    6efc:	681d      	ldr	r5, [r3, #0]
	int err = reg_read(dev_data, reg_addr, &value);
    6efe:	1dfa      	adds	r2, r7, #7
    6f00:	2110      	movs	r1, #16
    6f02:	f7ff ff0b 	bl	6d1c <reg_read>
	if (err) {
    6f06:	4604      	mov	r4, r0
    6f08:	b170      	cbz	r0, 6f28 <pmw3360_attr_set+0x60>
		LOG_ERR("Failed to read Config2 register");
    6f0a:	4b33      	ldr	r3, [pc, #204]	; (6fd8 <pmw3360_attr_set+0x110>)
    6f0c:	61fb      	str	r3, [r7, #28]
    6f0e:	2302      	movs	r3, #2
    6f10:	61bb      	str	r3, [r7, #24]
		LOG_ERR("Failed to set rest mode");
    6f12:	4832      	ldr	r0, [pc, #200]	; (6fdc <pmw3360_attr_set+0x114>)
    6f14:	f107 0218 	add.w	r2, r7, #24
    6f18:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6f1c:	f004 fda4 	bl	ba68 <z_log_msg2_static_create.constprop.0>
		LOG_ERR("Unknown attribute");
		return -ENOTSUP;
	}

	return err;
}
    6f20:	4620      	mov	r0, r4
    6f22:	3720      	adds	r7, #32
    6f24:	46bd      	mov	sp, r7
    6f26:	bdb0      	pop	{r4, r5, r7, pc}
	WRITE_BIT(value, PMW3360_REST_EN_POS, enable);
    6f28:	79fb      	ldrb	r3, [r7, #7]
    6f2a:	b325      	cbz	r5, 6f76 <pmw3360_attr_set+0xae>
    6f2c:	f043 0320 	orr.w	r3, r3, #32
	LOG_INF("%sable rest modes", (enable) ? ("En") : ("Dis"));
    6f30:	4a2b      	ldr	r2, [pc, #172]	; (6fe0 <pmw3360_attr_set+0x118>)
	WRITE_BIT(value, PMW3360_REST_EN_POS, enable);
    6f32:	71fb      	strb	r3, [r7, #7]
	LOG_INF("%sable rest modes", (enable) ? ("En") : ("Dis"));
    6f34:	4b2b      	ldr	r3, [pc, #172]	; (6fe4 <pmw3360_attr_set+0x11c>)
    6f36:	492c      	ldr	r1, [pc, #176]	; (6fe8 <pmw3360_attr_set+0x120>)
    6f38:	4828      	ldr	r0, [pc, #160]	; (6fdc <pmw3360_attr_set+0x114>)
    6f3a:	466c      	mov	r4, sp
    6f3c:	b088      	sub	sp, #32
    6f3e:	2d00      	cmp	r5, #0
    6f40:	bf08      	it	eq
    6f42:	4613      	moveq	r3, r2
    6f44:	466a      	mov	r2, sp
    6f46:	e9c2 1305 	strd	r1, r3, [r2, #20]
    6f4a:	2502      	movs	r5, #2
    6f4c:	4b27      	ldr	r3, [pc, #156]	; (6fec <pmw3360_attr_set+0x124>)
    6f4e:	7715      	strb	r5, [r2, #28]
    6f50:	f44f 51d6 	mov.w	r1, #6848	; 0x1ac0
    6f54:	f842 3f10 	str.w	r3, [r2, #16]!
    6f58:	f004 fd86 	bl	ba68 <z_log_msg2_static_create.constprop.0>
	err = reg_write(dev_data, reg_addr, value);
    6f5c:	481d      	ldr	r0, [pc, #116]	; (6fd4 <pmw3360_attr_set+0x10c>)
    6f5e:	79fa      	ldrb	r2, [r7, #7]
    6f60:	46a5      	mov	sp, r4
    6f62:	2110      	movs	r1, #16
    6f64:	f004 fd83 	bl	ba6e <reg_write>
	if (err) {
    6f68:	4604      	mov	r4, r0
    6f6a:	2800      	cmp	r0, #0
    6f6c:	d0d8      	beq.n	6f20 <pmw3360_attr_set+0x58>
		LOG_ERR("Failed to set rest mode");
    6f6e:	4b20      	ldr	r3, [pc, #128]	; (6ff0 <pmw3360_attr_set+0x128>)
    6f70:	e9c7 5306 	strd	r5, r3, [r7, #24]
    6f74:	e7cd      	b.n	6f12 <pmw3360_attr_set+0x4a>
	WRITE_BIT(value, PMW3360_REST_EN_POS, enable);
    6f76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    6f7a:	e7d9      	b.n	6f30 <pmw3360_attr_set+0x68>
		err = update_downshift_time(dev_data,
    6f7c:	681a      	ldr	r2, [r3, #0]
    6f7e:	2114      	movs	r1, #20
    6f80:	4814      	ldr	r0, [pc, #80]	; (6fd4 <pmw3360_attr_set+0x10c>)
    6f82:	f7ff fcc7 	bl	6914 <update_downshift_time>
    6f86:	e7b6      	b.n	6ef6 <pmw3360_attr_set+0x2e>
		err = update_downshift_time(dev_data,
    6f88:	681a      	ldr	r2, [r3, #0]
    6f8a:	2117      	movs	r1, #23
    6f8c:	e7f8      	b.n	6f80 <pmw3360_attr_set+0xb8>
		err = update_downshift_time(dev_data,
    6f8e:	681a      	ldr	r2, [r3, #0]
    6f90:	211a      	movs	r1, #26
    6f92:	e7f5      	b.n	6f80 <pmw3360_attr_set+0xb8>
		err = update_sample_time(dev_data,
    6f94:	681a      	ldr	r2, [r3, #0]
    6f96:	2116      	movs	r1, #22
    6f98:	2015      	movs	r0, #21
		err = update_sample_time(dev_data,
    6f9a:	f7ff fd51 	bl	6a40 <update_sample_time.constprop.0>
    6f9e:	e7aa      	b.n	6ef6 <pmw3360_attr_set+0x2e>
		err = update_sample_time(dev_data,
    6fa0:	681a      	ldr	r2, [r3, #0]
    6fa2:	2119      	movs	r1, #25
    6fa4:	2018      	movs	r0, #24
    6fa6:	e7f8      	b.n	6f9a <pmw3360_attr_set+0xd2>
		err = update_sample_time(dev_data,
    6fa8:	681a      	ldr	r2, [r3, #0]
    6faa:	211c      	movs	r1, #28
    6fac:	201b      	movs	r0, #27
    6fae:	e7f4      	b.n	6f9a <pmw3360_attr_set+0xd2>
		LOG_ERR("Unknown attribute");
    6fb0:	4b10      	ldr	r3, [pc, #64]	; (6ff4 <pmw3360_attr_set+0x12c>)
    6fb2:	61fb      	str	r3, [r7, #28]
    6fb4:	4809      	ldr	r0, [pc, #36]	; (6fdc <pmw3360_attr_set+0x114>)
    6fb6:	2302      	movs	r3, #2
    6fb8:	f107 0218 	add.w	r2, r7, #24
    6fbc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6fc0:	61bb      	str	r3, [r7, #24]
    6fc2:	f004 fd51 	bl	ba68 <z_log_msg2_static_create.constprop.0>
		return -ENOTSUP;
    6fc6:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6fca:	e7a9      	b.n	6f20 <pmw3360_attr_set+0x58>
		return -EBUSY;
    6fcc:	f06f 040f 	mvn.w	r4, #15
    6fd0:	e7a6      	b.n	6f20 <pmw3360_attr_set+0x58>
    6fd2:	bf00      	nop
    6fd4:	200007d8 	.word	0x200007d8
    6fd8:	0000dc94 	.word	0x0000dc94
    6fdc:	0000c7d0 	.word	0x0000c7d0
    6fe0:	0000dc90 	.word	0x0000dc90
    6fe4:	0000dc8d 	.word	0x0000dc8d
    6fe8:	0000dcb4 	.word	0x0000dcb4
    6fec:	01000003 	.word	0x01000003
    6ff0:	0000dcc6 	.word	0x0000dcc6
    6ff4:	0000dcde 	.word	0x0000dcde

00006ff8 <pmw3360_sample_fetch>:
{
    6ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    6ffa:	2939      	cmp	r1, #57	; 0x39
{
    6ffc:	b093      	sub	sp, #76	; 0x4c
	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    6ffe:	d15b      	bne.n	70b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8>
	if (unlikely(!dev_data->ready)) {
    7000:	4d30      	ldr	r5, [pc, #192]	; (70c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>)
    7002:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    7006:	2b00      	cmp	r3, #0
    7008:	d059      	beq.n	70be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbe>
	if (!dev_data->last_read_burst) {
    700a:	f895 2069 	ldrb.w	r2, [r5, #105]	; 0x69
    700e:	b302      	cbz	r2, 7052 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x52>
	err = spi_cs_ctrl(dev_data, true);
    7010:	482c      	ldr	r0, [pc, #176]	; (70c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>)
    7012:	2101      	movs	r1, #1
    7014:	f7ff fbce 	bl	67b4 <spi_cs_ctrl>
	if (err) {
    7018:	4604      	mov	r4, r0
    701a:	bb08      	cbnz	r0, 7060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>
	uint8_t reg_buf[] = {
    701c:	2350      	movs	r3, #80	; 0x50
    701e:	f88d 3004 	strb.w	r3, [sp, #4]
	const struct spi_buf tx_buf = {
    7022:	ab01      	add	r3, sp, #4
    7024:	9304      	str	r3, [sp, #16]
    7026:	2601      	movs	r6, #1
	const struct spi_buf_set tx = {
    7028:	ab04      	add	r3, sp, #16
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    702a:	68a8      	ldr	r0, [r5, #8]
	const struct spi_buf tx_buf = {
    702c:	9605      	str	r6, [sp, #20]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    702e:	a906      	add	r1, sp, #24
	const struct spi_buf_set tx = {
    7030:	e9cd 3606 	strd	r3, r6, [sp, #24]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    7034:	f7ff fbb2 	bl	679c <spi_write.constprop.0>
	if (err) {
    7038:	4604      	mov	r4, r0
    703a:	b1a0      	cbz	r0, 7066 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x66>
		LOG_ERR("Motion burst failed on SPI write");
    703c:	4b22      	ldr	r3, [pc, #136]	; (70c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>)
		LOG_ERR("Motion burst failed on SPI read");
    703e:	9311      	str	r3, [sp, #68]	; 0x44
    7040:	4822      	ldr	r0, [pc, #136]	; (70cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc>)
    7042:	2302      	movs	r3, #2
    7044:	aa10      	add	r2, sp, #64	; 0x40
    7046:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    704a:	9310      	str	r3, [sp, #64]	; 0x40
    704c:	f004 fd0c 	bl	ba68 <z_log_msg2_static_create.constprop.0>
		return err;
    7050:	e006      	b.n	7060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>
		err = reg_write(dev_data, PMW3360_REG_MOTION_BURST, 0x00);
    7052:	2150      	movs	r1, #80	; 0x50
    7054:	4628      	mov	r0, r5
    7056:	f004 fd0a 	bl	ba6e <reg_write>
		if (err) {
    705a:	4604      	mov	r4, r0
    705c:	2800      	cmp	r0, #0
    705e:	d0d7      	beq.n	7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
}
    7060:	4620      	mov	r0, r4
    7062:	b013      	add	sp, #76	; 0x4c
    7064:	bdf0      	pop	{r4, r5, r6, r7, pc}
	k_busy_wait(T_SRAD_MOTBR);
    7066:	2023      	movs	r0, #35	; 0x23
    7068:	f004 fcfc 	bl	ba64 <k_busy_wait>
	const struct spi_buf rx_buf = {
    706c:	ab02      	add	r3, sp, #8
    706e:	9308      	str	r3, [sp, #32]
    7070:	2306      	movs	r3, #6
    7072:	9309      	str	r3, [sp, #36]	; 0x24
	const struct spi_buf_set rx = {
    7074:	ab08      	add	r3, sp, #32
    7076:	e9cd 360a 	strd	r3, r6, [sp, #40]	; 0x28
	err = spi_read(dev_data->spi_dev, &spi_cfg, &rx);
    707a:	68a8      	ldr	r0, [r5, #8]
    707c:	6883      	ldr	r3, [r0, #8]
    707e:	4914      	ldr	r1, [pc, #80]	; (70d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd0>)
    7080:	681f      	ldr	r7, [r3, #0]
    7082:	4622      	mov	r2, r4
    7084:	ab0a      	add	r3, sp, #40	; 0x28
    7086:	47b8      	blx	r7
	if (err) {
    7088:	4604      	mov	r4, r0
    708a:	b108      	cbz	r0, 7090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
		LOG_ERR("Motion burst failed on SPI read");
    708c:	4b11      	ldr	r3, [pc, #68]	; (70d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd4>)
    708e:	e7d6      	b.n	703e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e>
	err = spi_cs_ctrl(dev_data, false);
    7090:	4601      	mov	r1, r0
    7092:	480c      	ldr	r0, [pc, #48]	; (70c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>)
    7094:	f7ff fb8e 	bl	67b4 <spi_cs_ctrl>
	if (err) {
    7098:	4604      	mov	r4, r0
    709a:	2800      	cmp	r0, #0
    709c:	d1e0      	bne.n	7060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>
	k_busy_wait(T_BEXIT);
    709e:	4630      	mov	r0, r6
    70a0:	f004 fce0 	bl	ba64 <k_busy_wait>
			dev_data->x = -x;
    70a4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    70a8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
	dev_data->last_read_burst = true;
    70ac:	f885 6069 	strb.w	r6, [r5, #105]	; 0x69
			dev_data->x = -x;
    70b0:	425b      	negs	r3, r3
    70b2:	832b      	strh	r3, [r5, #24]
			dev_data->y = y;
    70b4:	836a      	strh	r2, [r5, #26]
    70b6:	e7d3      	b.n	7060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>
		return -ENOTSUP;
    70b8:	f06f 0485 	mvn.w	r4, #133	; 0x85
    70bc:	e7d0      	b.n	7060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>
		return -EBUSY;
    70be:	f06f 040f 	mvn.w	r4, #15
    70c2:	e7cd      	b.n	7060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>
    70c4:	200007d8 	.word	0x200007d8
    70c8:	0000dcf0 	.word	0x0000dcf0
    70cc:	0000c7d0 	.word	0x0000c7d0
    70d0:	0000cac0 	.word	0x0000cac0
    70d4:	0000dd11 	.word	0x0000dd11

000070d8 <pmw3360_init>:
{
    70d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	k_work_init(&dev_data->trigger_handler_work, trigger_handler);
    70da:	4d45      	ldr	r5, [pc, #276]	; (71f0 <pmw3360_init+0x118>)
    70dc:	4945      	ldr	r1, [pc, #276]	; (71f4 <pmw3360_init+0x11c>)
{
    70de:	b087      	sub	sp, #28
	k_work_init(&dev_data->trigger_handler_work, trigger_handler);
    70e0:	f105 0020 	add.w	r0, r5, #32
    70e4:	f004 ffc5 	bl	c072 <k_work_init>
    70e8:	4843      	ldr	r0, [pc, #268]	; (71f8 <pmw3360_init+0x120>)
    70ea:	f002 f85d 	bl	91a8 <z_impl_device_get_binding>
	dev_data->cs_gpio_dev =
    70ee:	6028      	str	r0, [r5, #0]
	if (!dev_data->cs_gpio_dev) {
    70f0:	b960      	cbnz	r0, 710c <pmw3360_init+0x34>
		LOG_ERR("Cannot get CS GPIO device");
    70f2:	4b42      	ldr	r3, [pc, #264]	; (71fc <pmw3360_init+0x124>)
		LOG_ERR("Cannot get SPI device");
    70f4:	9305      	str	r3, [sp, #20]
    70f6:	4842      	ldr	r0, [pc, #264]	; (7200 <pmw3360_init+0x128>)
    70f8:	2302      	movs	r3, #2
    70fa:	aa04      	add	r2, sp, #16
    70fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7100:	9304      	str	r3, [sp, #16]
		return -ENXIO;
    7102:	f06f 0405 	mvn.w	r4, #5
		LOG_ERR("Cannot get SPI device");
    7106:	f004 fcaf 	bl	ba68 <z_log_msg2_static_create.constprop.0>
	if (err) {
    710a:	e012      	b.n	7132 <pmw3360_init+0x5a>
	struct gpio_driver_data *data =
    710c:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
    710e:	6881      	ldr	r1, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    7110:	6813      	ldr	r3, [r2, #0]
    7112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    7116:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    7118:	680b      	ldr	r3, [r1, #0]
    711a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    711e:	2106      	movs	r1, #6
    7120:	4798      	blx	r3
	if (!err) {
    7122:	4604      	mov	r4, r0
    7124:	b940      	cbnz	r0, 7138 <pmw3360_init+0x60>
		err = spi_cs_ctrl(dev_data, false);
    7126:	4601      	mov	r1, r0
    7128:	4628      	mov	r0, r5
    712a:	f7ff fb43 	bl	67b4 <spi_cs_ctrl>
	if (err) {
    712e:	4604      	mov	r4, r0
    7130:	b168      	cbz	r0, 714e <pmw3360_init+0x76>
}
    7132:	4620      	mov	r0, r4
    7134:	b007      	add	sp, #28
    7136:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Cannot configure CS PIN");
    7138:	4b32      	ldr	r3, [pc, #200]	; (7204 <pmw3360_init+0x12c>)
		LOG_ERR("Cannot add IRQ GPIO callback");
    713a:	9305      	str	r3, [sp, #20]
    713c:	4830      	ldr	r0, [pc, #192]	; (7200 <pmw3360_init+0x128>)
    713e:	2302      	movs	r3, #2
    7140:	aa04      	add	r2, sp, #16
    7142:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7146:	9304      	str	r3, [sp, #16]
    7148:	f004 fc8e 	bl	ba68 <z_log_msg2_static_create.constprop.0>
    714c:	e7f1      	b.n	7132 <pmw3360_init+0x5a>
    714e:	482a      	ldr	r0, [pc, #168]	; (71f8 <pmw3360_init+0x120>)
    7150:	f002 f82a 	bl	91a8 <z_impl_device_get_binding>
	dev_data->irq_gpio_dev =
    7154:	6068      	str	r0, [r5, #4]
	if (!dev_data->irq_gpio_dev) {
    7156:	b908      	cbnz	r0, 715c <pmw3360_init+0x84>
		LOG_ERR("Cannot get IRQ GPIO device");
    7158:	4b2b      	ldr	r3, [pc, #172]	; (7208 <pmw3360_init+0x130>)
    715a:	e7cb      	b.n	70f4 <pmw3360_init+0x1c>
	struct gpio_driver_data *data =
    715c:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
    715e:	6881      	ldr	r1, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    7160:	6813      	ldr	r3, [r2, #0]
    7162:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    7166:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    7168:	680b      	ldr	r3, [r1, #0]
    716a:	4a28      	ldr	r2, [pc, #160]	; (720c <pmw3360_init+0x134>)
    716c:	2114      	movs	r1, #20
    716e:	4798      	blx	r3
	if (err) {
    7170:	4604      	mov	r4, r0
    7172:	b108      	cbz	r0, 7178 <pmw3360_init+0xa0>
		LOG_ERR("Cannot configure IRQ GPIO");
    7174:	4b26      	ldr	r3, [pc, #152]	; (7210 <pmw3360_init+0x138>)
    7176:	e7e0      	b.n	713a <pmw3360_init+0x62>
	callback->handler = handler;
    7178:	4b26      	ldr	r3, [pc, #152]	; (7214 <pmw3360_init+0x13c>)
	err = gpio_add_callback(dev_data->irq_gpio_dev, &dev_data->irq_gpio_cb);
    717a:	6868      	ldr	r0, [r5, #4]
    717c:	612b      	str	r3, [r5, #16]
	callback->pin_mask = pin_mask;
    717e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    7182:	616b      	str	r3, [r5, #20]
	if (api->manage_callback == NULL) {
    7184:	6883      	ldr	r3, [r0, #8]
    7186:	69db      	ldr	r3, [r3, #28]
    7188:	b13b      	cbz	r3, 719a <pmw3360_init+0xc2>
	return api->manage_callback(port, callback, true);
    718a:	2201      	movs	r2, #1
    718c:	f105 010c 	add.w	r1, r5, #12
    7190:	4798      	blx	r3
	if (err) {
    7192:	4604      	mov	r4, r0
    7194:	b318      	cbz	r0, 71de <pmw3360_init+0x106>
		LOG_ERR("Cannot add IRQ GPIO callback");
    7196:	4b20      	ldr	r3, [pc, #128]	; (7218 <pmw3360_init+0x140>)
    7198:	e7cf      	b.n	713a <pmw3360_init+0x62>
		return -ENOTSUP;
    719a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    719e:	e7fa      	b.n	7196 <pmw3360_init+0xbe>
	k_work_init_delayable(&dev_data->init_work, pmw3360_async_init);
    71a0:	f105 0030 	add.w	r0, r5, #48	; 0x30
    71a4:	491d      	ldr	r1, [pc, #116]	; (721c <pmw3360_init+0x144>)
    71a6:	f004 ff8f 	bl	c0c8 <k_work_init_delayable>
			K_MSEC(async_init_delay[dev_data->async_init_step]));
    71aa:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
    71ae:	4b1c      	ldr	r3, [pc, #112]	; (7220 <pmw3360_init+0x148>)
    71b0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
    71b4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    71b8:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    71bc:	4621      	mov	r1, r4
    71be:	f240 30e7 	movw	r0, #999	; 0x3e7
    71c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    71c6:	2300      	movs	r3, #0
    71c8:	fbc6 0107 	smlal	r0, r1, r6, r7
    71cc:	f7f8 ff88 	bl	e0 <__aeabi_uldivmod>
    71d0:	4602      	mov	r2, r0
    71d2:	460b      	mov	r3, r1
	k_work_schedule(&dev_data->init_work,
    71d4:	f105 0030 	add.w	r0, r5, #48	; 0x30
    71d8:	f002 fd1a 	bl	9c10 <k_work_schedule>
	return err;
    71dc:	e7a9      	b.n	7132 <pmw3360_init+0x5a>
    71de:	4811      	ldr	r0, [pc, #68]	; (7224 <pmw3360_init+0x14c>)
    71e0:	f001 ffe2 	bl	91a8 <z_impl_device_get_binding>
	dev_data->spi_dev = device_get_binding(PMW3360_SPI_DEV_NAME);
    71e4:	60a8      	str	r0, [r5, #8]
	if (!dev_data->spi_dev) {
    71e6:	2800      	cmp	r0, #0
    71e8:	d1da      	bne.n	71a0 <pmw3360_init+0xc8>
		LOG_ERR("Cannot get SPI device");
    71ea:	4b0f      	ldr	r3, [pc, #60]	; (7228 <pmw3360_init+0x150>)
    71ec:	e782      	b.n	70f4 <pmw3360_init+0x1c>
    71ee:	bf00      	nop
    71f0:	200007d8 	.word	0x200007d8
    71f4:	00006c35 	.word	0x00006c35
    71f8:	0000d74e 	.word	0x0000d74e
    71fc:	0000dd31 	.word	0x0000dd31
    7200:	0000c7d0 	.word	0x0000c7d0
    7204:	0000dd4b 	.word	0x0000dd4b
    7208:	0000dd63 	.word	0x0000dd63
    720c:	00010010 	.word	0x00010010
    7210:	0000dd7e 	.word	0x0000dd7e
    7214:	00006be9 	.word	0x00006be9
    7218:	0000dd98 	.word	0x0000dd98
    721c:	000066f9 	.word	0x000066f9
    7220:	0000ca84 	.word	0x0000ca84
    7224:	0000d904 	.word	0x0000d904
    7228:	0000ddb5 	.word	0x0000ddb5

0000722c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    722c:	4a02      	ldr	r2, [pc, #8]	; (7238 <nvmc_wait+0xc>)
    722e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    7232:	2b00      	cmp	r3, #0
    7234:	d0fb      	beq.n	722e <nvmc_wait+0x2>
}
    7236:	4770      	bx	lr
    7238:	4001e000 	.word	0x4001e000

0000723c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    723c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    723e:	f004 fc35 	bl	baac <nrf52_errata_136>
    7242:	b140      	cbz	r0, 7256 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    7244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7248:	2200      	movs	r2, #0
    724a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    724e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    7252:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    7256:	f004 fc29 	bl	baac <nrf52_errata_136>
    725a:	2800      	cmp	r0, #0
    725c:	d046      	beq.n	72ec <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    725e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7262:	4b4c      	ldr	r3, [pc, #304]	; (7394 <SystemInit+0x158>)
    7264:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    7268:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    726c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    7270:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    7274:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    7278:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    727c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    7280:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    7284:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    7288:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    728c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    7290:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    7294:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    7298:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    729c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    72a0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    72a4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    72a8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    72ac:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    72b0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    72b4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    72b8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    72bc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    72c0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    72c4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    72c8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    72cc:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    72d0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    72d4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    72d8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    72dc:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    72e0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    72e4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    72e8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    72ec:	f004 fbde 	bl	baac <nrf52_errata_136>
    72f0:	b148      	cbz	r0, 7306 <SystemInit+0xca>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    72f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    72f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    72fa:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    72fc:	bf44      	itt	mi
    72fe:	f06f 0201 	mvnmi.w	r2, #1
    7302:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7306:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)
            if (var1 == 0x10)
    730a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    730e:	2a10      	cmp	r2, #16
    7310:	d10e      	bne.n	7330 <SystemInit+0xf4>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    7312:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    7316:	2b03      	cmp	r3, #3
    7318:	d802      	bhi.n	7320 <SystemInit+0xe4>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    731a:	4a1f      	ldr	r2, [pc, #124]	; (7398 <SystemInit+0x15c>)
    731c:	5cd3      	ldrb	r3, [r2, r3]
    731e:	b13b      	cbz	r3, 7330 <SystemInit+0xf4>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    7320:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    7324:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    7328:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    732c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    7330:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    7334:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    7338:	2a00      	cmp	r2, #0
    733a:	db03      	blt.n	7344 <SystemInit+0x108>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    733c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    7340:	2b00      	cmp	r3, #0
    7342:	da22      	bge.n	738a <SystemInit+0x14e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    7344:	4915      	ldr	r1, [pc, #84]	; (739c <SystemInit+0x160>)
    7346:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    7348:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    734c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    7350:	2412      	movs	r4, #18
    nvmc_wait();
    7352:	f7ff ff6b 	bl	722c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    7356:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    735a:	f7ff ff67 	bl	722c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    735e:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    7362:	f7ff ff63 	bl	722c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    7366:	2300      	movs	r3, #0
    7368:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    736c:	f7ff ff5e 	bl	722c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    7370:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    7374:	490a      	ldr	r1, [pc, #40]	; (73a0 <SystemInit+0x164>)
    7376:	4b0b      	ldr	r3, [pc, #44]	; (73a4 <SystemInit+0x168>)
    7378:	68ca      	ldr	r2, [r1, #12]
    737a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    737e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    7380:	60cb      	str	r3, [r1, #12]
    7382:	f3bf 8f4f 	dsb	sy
    __NOP();
    7386:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    7388:	e7fd      	b.n	7386 <SystemInit+0x14a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    738a:	4b07      	ldr	r3, [pc, #28]	; (73a8 <SystemInit+0x16c>)
    738c:	4a07      	ldr	r2, [pc, #28]	; (73ac <SystemInit+0x170>)
    738e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    7390:	bd10      	pop	{r4, pc}
    7392:	bf00      	nop
    7394:	4000c000 	.word	0x4000c000
    7398:	0000edd1 	.word	0x0000edd1
    739c:	4001e000 	.word	0x4001e000
    73a0:	e000ed00 	.word	0xe000ed00
    73a4:	05fa0004 	.word	0x05fa0004
    73a8:	20000090 	.word	0x20000090
    73ac:	03d09000 	.word	0x03d09000

000073b0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    73b0:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    73b2:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    73b4:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    73b6:	fab2 f382 	clz	r3, r2
    73ba:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    73be:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    73c0:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    73c2:	d014      	beq.n	73ee <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    73c4:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    73c8:	fa05 f303 	lsl.w	r3, r5, r3
    73cc:	ea22 0303 	bic.w	r3, r2, r3
    73d0:	e850 6f00 	ldrex	r6, [r0]
    73d4:	4296      	cmp	r6, r2
    73d6:	d104      	bne.n	73e2 <nrfx_flag32_alloc+0x32>
    73d8:	e840 3c00 	strex	ip, r3, [r0]
    73dc:	f1bc 0f00 	cmp.w	ip, #0
    73e0:	d1f6      	bne.n	73d0 <nrfx_flag32_alloc+0x20>
    73e2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    73e6:	d1e5      	bne.n	73b4 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    73e8:	4802      	ldr	r0, [pc, #8]	; (73f4 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    73ea:	700c      	strb	r4, [r1, #0]
}
    73ec:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    73ee:	4802      	ldr	r0, [pc, #8]	; (73f8 <nrfx_flag32_alloc+0x48>)
    73f0:	e7fc      	b.n	73ec <nrfx_flag32_alloc+0x3c>
    73f2:	bf00      	nop
    73f4:	0bad0000 	.word	0x0bad0000
    73f8:	0bad0002 	.word	0x0bad0002

000073fc <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    73fc:	6803      	ldr	r3, [r0, #0]
    73fe:	40cb      	lsrs	r3, r1
    7400:	07db      	lsls	r3, r3, #31
{
    7402:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    7404:	d415      	bmi.n	7432 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    7406:	2301      	movs	r3, #1
    7408:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    740c:	6803      	ldr	r3, [r0, #0]
    740e:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    7412:	ea41 0203 	orr.w	r2, r1, r3
    7416:	e850 4f00 	ldrex	r4, [r0]
    741a:	429c      	cmp	r4, r3
    741c:	d104      	bne.n	7428 <nrfx_flag32_free+0x2c>
    741e:	e840 2c00 	strex	ip, r2, [r0]
    7422:	f1bc 0f00 	cmp.w	ip, #0
    7426:	d1f6      	bne.n	7416 <nrfx_flag32_free+0x1a>
    7428:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    742c:	d1ee      	bne.n	740c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    742e:	4802      	ldr	r0, [pc, #8]	; (7438 <nrfx_flag32_free+0x3c>)
}
    7430:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    7432:	4802      	ldr	r0, [pc, #8]	; (743c <nrfx_flag32_free+0x40>)
    7434:	e7fc      	b.n	7430 <nrfx_flag32_free+0x34>
    7436:	bf00      	nop
    7438:	0bad0000 	.word	0x0bad0000
    743c:	0bad0004 	.word	0x0bad0004

00007440 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    7440:	4b05      	ldr	r3, [pc, #20]	; (7458 <nrfx_clock_init+0x18>)
    7442:	791a      	ldrb	r2, [r3, #4]
    7444:	b92a      	cbnz	r2, 7452 <nrfx_clock_init+0x12>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    }
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    7446:	715a      	strb	r2, [r3, #5]
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    7448:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    744a:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    744c:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    744e:	4803      	ldr	r0, [pc, #12]	; (745c <nrfx_clock_init+0x1c>)
    7450:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    7452:	4803      	ldr	r0, [pc, #12]	; (7460 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    7454:	4770      	bx	lr
    7456:	bf00      	nop
    7458:	2000164c 	.word	0x2000164c
    745c:	0bad0000 	.word	0x0bad0000
    7460:	0bad000c 	.word	0x0bad000c

00007464 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    7464:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7466:	2000      	movs	r0, #0
    7468:	f7fc f800 	bl	346c <arch_irq_is_enabled>
    746c:	b908      	cbnz	r0, 7472 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    746e:	f7fb ffd9 	bl	3424 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    7472:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7476:	2200      	movs	r2, #0
    7478:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    747c:	4b01      	ldr	r3, [pc, #4]	; (7484 <nrfx_clock_enable+0x20>)
    747e:	2201      	movs	r2, #1
    7480:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    7482:	bd08      	pop	{r3, pc}
    7484:	200019db 	.word	0x200019db

00007488 <nrfx_clock_calibration_start>:
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    7488:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    748c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7490:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    7494:	03c8      	lsls	r0, r1, #15
    7496:	d516      	bpl.n	74c6 <nrfx_clock_calibration_start+0x3e>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &clk_src))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)
    7498:	07d1      	lsls	r1, r2, #31
    749a:	d514      	bpl.n	74c6 <nrfx_clock_calibration_start+0x3e>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    749c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    74a0:	03d2      	lsls	r2, r2, #15
    74a2:	d510      	bpl.n	74c6 <nrfx_clock_calibration_start+0x3e>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_LFCLK, NULL))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (m_clock_cb.cal_state == CAL_STATE_IDLE)
    74a4:	490a      	ldr	r1, [pc, #40]	; (74d0 <nrfx_clock_calibration_start+0x48>)
    74a6:	794a      	ldrb	r2, [r1, #5]
    74a8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    74ac:	b96a      	cbnz	r2, 74ca <nrfx_clock_calibration_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    74ae:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    74b2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    nrfx_err_t err_code = NRFX_SUCCESS;
    74b6:	4807      	ldr	r0, [pc, #28]	; (74d4 <nrfx_clock_calibration_start+0x4c>)
    p_reg->INTENSET = mask;
    74b8:	2208      	movs	r2, #8
    74ba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_CAL;
    74be:	2201      	movs	r2, #1
    74c0:	714a      	strb	r2, [r1, #5]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    74c2:	611a      	str	r2, [r3, #16]
}
    74c4:	4770      	bx	lr
        return NRFX_ERROR_INVALID_STATE;
    74c6:	4804      	ldr	r0, [pc, #16]	; (74d8 <nrfx_clock_calibration_start+0x50>)
    74c8:	4770      	bx	lr
#endif
        nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_CAL);
    }
    else
    {
        err_code = NRFX_ERROR_BUSY;
    74ca:	4804      	ldr	r0, [pc, #16]	; (74dc <nrfx_clock_calibration_start+0x54>)

    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    74cc:	4770      	bx	lr
    74ce:	bf00      	nop
    74d0:	2000164c 	.word	0x2000164c
    74d4:	0bad0000 	.word	0x0bad0000
    74d8:	0bad0005 	.word	0x0bad0005
    74dc:	0bad000b 	.word	0x0bad000b

000074e0 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    74e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    74e4:	b510      	push	{r4, lr}
    74e6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    74ea:	b152      	cbz	r2, 7502 <nrfx_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    74ec:	2000      	movs	r0, #0
    74ee:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    74f2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    74f6:	2201      	movs	r2, #1
    74f8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    74fc:	4b16      	ldr	r3, [pc, #88]	; (7558 <nrfx_clock_irq_handler+0x78>)
    74fe:	681b      	ldr	r3, [r3, #0]
    7500:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7502:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7506:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    750a:	b15a      	cbz	r2, 7524 <nrfx_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    750c:	2200      	movs	r2, #0
    750e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    7512:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENCLR = mask;
    7516:	2202      	movs	r2, #2
    7518:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    751c:	4b0e      	ldr	r3, [pc, #56]	; (7558 <nrfx_clock_irq_handler+0x78>)
    751e:	2001      	movs	r0, #1
    7520:	681b      	ldr	r3, [r3, #0]
    7522:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7524:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7528:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CTTO);
    }
#endif // NRF_CLOCK_HAS_CALIBRATION_TIMER && NRFX_CHECK(NRFX_CLOCK_CONFIG_CT_ENABLED)

    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_DONE) &&
    752c:	b192      	cbz	r2, 7554 <nrfx_clock_irq_handler+0x74>
    return p_reg->INTENSET & mask;
    752e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    7532:	0712      	lsls	r2, r2, #28
    7534:	d50e      	bpl.n	7554 <nrfx_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7536:	2200      	movs	r2, #0
    7538:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    753c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    p_reg->INTENCLR = mask;
    7540:	2108      	movs	r1, #8
    7542:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
        *(volatile uint32_t *)0x40000C34 = 0x00000000;
#endif
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_DONE");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    7546:	4b04      	ldr	r3, [pc, #16]	; (7558 <nrfx_clock_irq_handler+0x78>)
    7548:	715a      	strb	r2, [r3, #5]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    754a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    754e:	681b      	ldr	r3, [r3, #0]
    7550:	2003      	movs	r0, #3
    7552:	4718      	bx	r3
}
    7554:	bd10      	pop	{r4, pc}
    7556:	bf00      	nop
    7558:	2000164c 	.word	0x2000164c

0000755c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    755c:	4b03      	ldr	r3, [pc, #12]	; (756c <pin_in_use_by_te+0x10>)
    755e:	3008      	adds	r0, #8
    7560:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    7564:	f3c0 1040 	ubfx	r0, r0, #5, #1
    7568:	4770      	bx	lr
    756a:	bf00      	nop
    756c:	20000094 	.word	0x20000094

00007570 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    7570:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7572:	f100 0308 	add.w	r3, r0, #8
    7576:	4c0c      	ldr	r4, [pc, #48]	; (75a8 <call_handler+0x38>)
    7578:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    757c:	05da      	lsls	r2, r3, #23
{
    757e:	4605      	mov	r5, r0
    7580:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7582:	d507      	bpl.n	7594 <call_handler+0x24>
    7584:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    7588:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    758c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    7590:	6852      	ldr	r2, [r2, #4]
    7592:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    7594:	68a3      	ldr	r3, [r4, #8]
    7596:	b12b      	cbz	r3, 75a4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    7598:	68e2      	ldr	r2, [r4, #12]
    759a:	4631      	mov	r1, r6
    759c:	4628      	mov	r0, r5
    }
}
    759e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    75a2:	4718      	bx	r3
}
    75a4:	bd70      	pop	{r4, r5, r6, pc}
    75a6:	bf00      	nop
    75a8:	20000094 	.word	0x20000094

000075ac <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    75ac:	4a12      	ldr	r2, [pc, #72]	; (75f8 <release_handler+0x4c>)
    75ae:	3008      	adds	r0, #8
{
    75b0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    75b2:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    75b6:	05d9      	lsls	r1, r3, #23
    75b8:	d51b      	bpl.n	75f2 <release_handler+0x46>
    75ba:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    75be:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    75c2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    75c6:	f102 0410 	add.w	r4, r2, #16
    75ca:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    75cc:	f834 3b02 	ldrh.w	r3, [r4], #2
    75d0:	f413 7f80 	tst.w	r3, #256	; 0x100
    75d4:	d003      	beq.n	75de <release_handler+0x32>
    75d6:	f3c3 2343 	ubfx	r3, r3, #9, #4
    75da:	4299      	cmp	r1, r3
    75dc:	d009      	beq.n	75f2 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    75de:	3001      	adds	r0, #1
    75e0:	2820      	cmp	r0, #32
    75e2:	d1f3      	bne.n	75cc <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    75e4:	2300      	movs	r3, #0
    75e6:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    75ea:	4804      	ldr	r0, [pc, #16]	; (75fc <release_handler+0x50>)
}
    75ec:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    75ee:	f7ff bf05 	b.w	73fc <nrfx_flag32_free>
}
    75f2:	bc10      	pop	{r4}
    75f4:	4770      	bx	lr
    75f6:	bf00      	nop
    75f8:	20000094 	.word	0x20000094
    75fc:	200000e8 	.word	0x200000e8

00007600 <pin_handler_trigger_uninit>:
{
    7600:	b538      	push	{r3, r4, r5, lr}
    7602:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    7604:	f7ff ffaa 	bl	755c <pin_in_use_by_te>
    7608:	4c09      	ldr	r4, [pc, #36]	; (7630 <pin_handler_trigger_uninit+0x30>)
    760a:	f102 0508 	add.w	r5, r2, #8
    760e:	b140      	cbz	r0, 7622 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7610:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    7614:	4907      	ldr	r1, [pc, #28]	; (7634 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    7616:	0b5b      	lsrs	r3, r3, #13
    7618:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    761c:	2000      	movs	r0, #0
    761e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    7622:	4610      	mov	r0, r2
    7624:	f7ff ffc2 	bl	75ac <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    7628:	2300      	movs	r3, #0
    762a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    762e:	bd38      	pop	{r3, r4, r5, pc}
    7630:	20000094 	.word	0x20000094
    7634:	40006000 	.word	0x40006000

00007638 <nrfx_gpiote_input_configure>:
{
    7638:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    763c:	4604      	mov	r4, r0
    763e:	461e      	mov	r6, r3
    if (p_input_config)
    7640:	b309      	cbz	r1, 7686 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7642:	4f4d      	ldr	r7, [pc, #308]	; (7778 <nrfx_gpiote_input_configure+0x140>)
    7644:	f100 0808 	add.w	r8, r0, #8
    7648:	f837 5018 	ldrh.w	r5, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    764c:	07ab      	lsls	r3, r5, #30
    764e:	d506      	bpl.n	765e <nrfx_gpiote_input_configure+0x26>
    7650:	f7ff ff84 	bl	755c <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    7654:	b118      	cbz	r0, 765e <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    7656:	4849      	ldr	r0, [pc, #292]	; (777c <nrfx_gpiote_input_configure+0x144>)
}
    7658:	b002      	add	sp, #8
    765a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    765e:	f004 001f 	and.w	r0, r4, #31
    7662:	0080      	lsls	r0, r0, #2
    7664:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7668:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    766a:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    766e:	f025 0502 	bic.w	r5, r5, #2
    cnf &= ~to_update;
    7672:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    7676:	f045 0501 	orr.w	r5, r5, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    767a:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    767e:	f827 5018 	strh.w	r5, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    7682:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_trigger_config)
    7686:	b192      	cbz	r2, 76ae <nrfx_gpiote_input_configure+0x76>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7688:	4b3b      	ldr	r3, [pc, #236]	; (7778 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    768a:	7815      	ldrb	r5, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    768c:	6852      	ldr	r2, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    768e:	f104 0008 	add.w	r0, r4, #8
    7692:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    7696:	078f      	lsls	r7, r1, #30
    7698:	d50c      	bpl.n	76b4 <nrfx_gpiote_input_configure+0x7c>
            if (use_evt)
    769a:	2a00      	cmp	r2, #0
    769c:	d1db      	bne.n	7656 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    769e:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    76a2:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    76a6:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    76aa:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    76ae:	bbce      	cbnz	r6, 7724 <nrfx_gpiote_input_configure+0xec>
    return NRFX_SUCCESS;
    76b0:	4833      	ldr	r0, [pc, #204]	; (7780 <nrfx_gpiote_input_configure+0x148>)
    76b2:	e7d1      	b.n	7658 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    76b4:	f021 0120 	bic.w	r1, r1, #32
    76b8:	04c9      	lsls	r1, r1, #19
    76ba:	0cc9      	lsrs	r1, r1, #19
    76bc:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    76c0:	2a00      	cmp	r2, #0
    76c2:	d0ec      	beq.n	769e <nrfx_gpiote_input_configure+0x66>
                if (!edge)
    76c4:	2d03      	cmp	r5, #3
    76c6:	d8c6      	bhi.n	7656 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    76c8:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    76ca:	b92d      	cbnz	r5, 76d8 <nrfx_gpiote_input_configure+0xa0>
    76cc:	4a2d      	ldr	r2, [pc, #180]	; (7784 <nrfx_gpiote_input_configure+0x14c>)
    76ce:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    76d2:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    76d6:	e7e2      	b.n	769e <nrfx_gpiote_input_configure+0x66>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    76d8:	00ba      	lsls	r2, r7, #2
    76da:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    76de:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    76e2:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    76e6:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    76ea:	f02c 0c03 	bic.w	ip, ip, #3
    76ee:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    76f2:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    76f6:	f42c 3c47 	bic.w	ip, ip, #203776	; 0x31c00
    76fa:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    76fe:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7702:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    7706:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    770a:	f40c 5cf8 	and.w	ip, ip, #7936	; 0x1f00
    770e:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
    7712:	ea4c 0c0e 	orr.w	ip, ip, lr
    7716:	f041 0120 	orr.w	r1, r1, #32
    771a:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    771e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    7722:	e7bc      	b.n	769e <nrfx_gpiote_input_configure+0x66>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    7724:	e9d6 7600 	ldrd	r7, r6, [r6]
    release_handler(pin);
    7728:	4620      	mov	r0, r4
    772a:	f7ff ff3f 	bl	75ac <release_handler>
    if (!handler)
    772e:	2f00      	cmp	r7, #0
    7730:	d0be      	beq.n	76b0 <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    7732:	4d11      	ldr	r5, [pc, #68]	; (7778 <nrfx_gpiote_input_configure+0x140>)
    7734:	682b      	ldr	r3, [r5, #0]
    7736:	429f      	cmp	r7, r3
    7738:	d104      	bne.n	7744 <nrfx_gpiote_input_configure+0x10c>
    773a:	686b      	ldr	r3, [r5, #4]
    773c:	429e      	cmp	r6, r3
    773e:	d101      	bne.n	7744 <nrfx_gpiote_input_configure+0x10c>
    7740:	2200      	movs	r2, #0
    7742:	e009      	b.n	7758 <nrfx_gpiote_input_configure+0x120>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    7744:	4810      	ldr	r0, [pc, #64]	; (7788 <nrfx_gpiote_input_configure+0x150>)
    7746:	f10d 0107 	add.w	r1, sp, #7
    774a:	f7ff fe31 	bl	73b0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    774e:	4b0c      	ldr	r3, [pc, #48]	; (7780 <nrfx_gpiote_input_configure+0x148>)
    7750:	4298      	cmp	r0, r3
    7752:	d181      	bne.n	7658 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    7754:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    7758:	f845 7032 	str.w	r7, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    775c:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    7760:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    7762:	605e      	str	r6, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    7764:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    7768:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    776c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7770:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    7774:	e79c      	b.n	76b0 <nrfx_gpiote_input_configure+0x78>
    7776:	bf00      	nop
    7778:	20000094 	.word	0x20000094
    777c:	0bad0004 	.word	0x0bad0004
    7780:	0bad0000 	.word	0x0bad0000
    7784:	40006000 	.word	0x40006000
    7788:	200000e8 	.word	0x200000e8

0000778c <nrfx_gpiote_output_configure>:
{
    778c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    778e:	4604      	mov	r4, r0
    if (p_config)
    7790:	b371      	cbz	r1, 77f0 <nrfx_gpiote_output_configure+0x64>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7792:	4e37      	ldr	r6, [pc, #220]	; (7870 <nrfx_gpiote_output_configure+0xe4>)
    7794:	f100 0708 	add.w	r7, r0, #8
    7798:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    779c:	07ab      	lsls	r3, r5, #30
    779e:	d404      	bmi.n	77aa <nrfx_gpiote_output_configure+0x1e>
    77a0:	f7ff fedc 	bl	755c <pin_in_use_by_te>
    77a4:	b108      	cbz	r0, 77aa <nrfx_gpiote_output_configure+0x1e>
    return NRFX_SUCCESS;
    77a6:	4833      	ldr	r0, [pc, #204]	; (7874 <nrfx_gpiote_output_configure+0xe8>)
}
    77a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    77aa:	f015 0f1c 	tst.w	r5, #28
    77ae:	784b      	ldrb	r3, [r1, #1]
    77b0:	d001      	beq.n	77b6 <nrfx_gpiote_output_configure+0x2a>
    77b2:	2b01      	cmp	r3, #1
    77b4:	d0f7      	beq.n	77a6 <nrfx_gpiote_output_configure+0x1a>
    *p_pin = pin_number & 0x1F;
    77b6:	f004 001f 	and.w	r0, r4, #31
    77ba:	0080      	lsls	r0, r0, #2
    77bc:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    77c0:	f891 e000 	ldrb.w	lr, [r1]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    77c4:	f8d0 c700 	ldr.w	ip, [r0, #1792]	; 0x700
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    77c8:	7889      	ldrb	r1, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    77ca:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    77cc:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    77d0:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    77d4:	f02c 0c07 	bic.w	ip, ip, #7
    77d8:	ea43 030c 	orr.w	r3, r3, ip
    77dc:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    77e0:	f045 0503 	orr.w	r5, r5, #3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    77e4:	f043 0301 	orr.w	r3, r3, #1
    77e8:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    77ec:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_task_config)
    77f0:	b90a      	cbnz	r2, 77f6 <nrfx_gpiote_output_configure+0x6a>
    return NRFX_SUCCESS;
    77f2:	4821      	ldr	r0, [pc, #132]	; (7878 <nrfx_gpiote_output_configure+0xec>)
    77f4:	e7d8      	b.n	77a8 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    77f6:	4e1e      	ldr	r6, [pc, #120]	; (7870 <nrfx_gpiote_output_configure+0xe4>)
    77f8:	f104 0708 	add.w	r7, r4, #8
    77fc:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    7800:	0783      	lsls	r3, r0, #30
    7802:	d5d0      	bpl.n	77a6 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    7804:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    7808:	4661      	mov	r1, ip
    780a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    780c:	f020 0020 	bic.w	r0, r0, #32
    7810:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    7814:	04c0      	lsls	r0, r0, #19
    7816:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    781a:	0cc0      	lsrs	r0, r0, #19
    781c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    7820:	2300      	movs	r3, #0
    7822:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    7826:	7855      	ldrb	r5, [r2, #1]
    7828:	2d00      	cmp	r5, #0
    782a:	d0e2      	beq.n	77f2 <nrfx_gpiote_output_configure+0x66>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    782c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    7830:	7892      	ldrb	r2, [r2, #2]
    7832:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    7836:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    783a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    783e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    7842:	0223      	lsls	r3, r4, #8
    7844:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    7848:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    784a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    784e:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    7852:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7854:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    7856:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    785a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    785e:	4313      	orrs	r3, r2
    7860:	f040 0020 	orr.w	r0, r0, #32
    7864:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    7868:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    786c:	e7c1      	b.n	77f2 <nrfx_gpiote_output_configure+0x66>
    786e:	bf00      	nop
    7870:	20000094 	.word	0x20000094
    7874:	0bad0004 	.word	0x0bad0004
    7878:	0bad0000 	.word	0x0bad0000

0000787c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    787c:	4b01      	ldr	r3, [pc, #4]	; (7884 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    787e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    7882:	4770      	bx	lr
    7884:	20000094 	.word	0x20000094

00007888 <nrfx_gpiote_channel_get>:
{
    7888:	b508      	push	{r3, lr}
    788a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    788c:	f7ff fe66 	bl	755c <pin_in_use_by_te>
    7890:	b138      	cbz	r0, 78a2 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7892:	4b05      	ldr	r3, [pc, #20]	; (78a8 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    7894:	4805      	ldr	r0, [pc, #20]	; (78ac <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7896:	3208      	adds	r2, #8
    7898:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    789c:	0b5b      	lsrs	r3, r3, #13
    789e:	700b      	strb	r3, [r1, #0]
}
    78a0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    78a2:	4803      	ldr	r0, [pc, #12]	; (78b0 <nrfx_gpiote_channel_get+0x28>)
    78a4:	e7fc      	b.n	78a0 <nrfx_gpiote_channel_get+0x18>
    78a6:	bf00      	nop
    78a8:	20000094 	.word	0x20000094
    78ac:	0bad0000 	.word	0x0bad0000
    78b0:	0bad0004 	.word	0x0bad0004

000078b4 <nrfx_gpiote_init>:
{
    78b4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    78b6:	4c0f      	ldr	r4, [pc, #60]	; (78f4 <nrfx_gpiote_init+0x40>)
    78b8:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    78bc:	b9bd      	cbnz	r5, 78ee <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    78be:	2240      	movs	r2, #64	; 0x40
    78c0:	4629      	mov	r1, r5
    78c2:	f104 0010 	add.w	r0, r4, #16
    78c6:	f003 fe47 	bl	b558 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    78ca:	2006      	movs	r0, #6
    78cc:	f7fb fdaa 	bl	3424 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    78d0:	4b09      	ldr	r3, [pc, #36]	; (78f8 <nrfx_gpiote_init+0x44>)
    return err_code;
    78d2:	480a      	ldr	r0, [pc, #40]	; (78fc <nrfx_gpiote_init+0x48>)
    78d4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    78d8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    78dc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    78e0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    78e4:	2301      	movs	r3, #1
    78e6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    78ea:	6563      	str	r3, [r4, #84]	; 0x54
}
    78ec:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    78ee:	4804      	ldr	r0, [pc, #16]	; (7900 <nrfx_gpiote_init+0x4c>)
    78f0:	e7fc      	b.n	78ec <nrfx_gpiote_init+0x38>
    78f2:	bf00      	nop
    78f4:	20000094 	.word	0x20000094
    78f8:	40006000 	.word	0x40006000
    78fc:	0bad0000 	.word	0x0bad0000
    7900:	0bad0005 	.word	0x0bad0005

00007904 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    7904:	4b03      	ldr	r3, [pc, #12]	; (7914 <nrfx_gpiote_is_init+0x10>)
    7906:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    790a:	3800      	subs	r0, #0
    790c:	bf18      	it	ne
    790e:	2001      	movne	r0, #1
    7910:	4770      	bx	lr
    7912:	bf00      	nop
    7914:	20000094 	.word	0x20000094

00007918 <nrfx_gpiote_channel_free>:
{
    7918:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    791a:	4801      	ldr	r0, [pc, #4]	; (7920 <nrfx_gpiote_channel_free+0x8>)
    791c:	f7ff bd6e 	b.w	73fc <nrfx_flag32_free>
    7920:	200000e4 	.word	0x200000e4

00007924 <nrfx_gpiote_channel_alloc>:
{
    7924:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    7926:	4801      	ldr	r0, [pc, #4]	; (792c <nrfx_gpiote_channel_alloc+0x8>)
    7928:	f7ff bd42 	b.w	73b0 <nrfx_flag32_alloc>
    792c:	200000e4 	.word	0x200000e4

00007930 <nrfx_gpiote_trigger_enable>:
{
    7930:	b510      	push	{r4, lr}
    7932:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7934:	f7ff fe12 	bl	755c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7938:	f102 0408 	add.w	r4, r2, #8
    793c:	4b1c      	ldr	r3, [pc, #112]	; (79b0 <nrfx_gpiote_trigger_enable+0x80>)
    793e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7942:	b1e0      	cbz	r0, 797e <nrfx_gpiote_trigger_enable+0x4e>
    7944:	f013 0402 	ands.w	r4, r3, #2
    7948:	d119      	bne.n	797e <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    794a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    794c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    794e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    7952:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    7956:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    795a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    795e:	6004      	str	r4, [r0, #0]
    7960:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    7962:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    7966:	f040 0001 	orr.w	r0, r0, #1
    796a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    796e:	b129      	cbz	r1, 797c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    7970:	2201      	movs	r2, #1
    7972:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    7976:	4a0f      	ldr	r2, [pc, #60]	; (79b4 <nrfx_gpiote_trigger_enable+0x84>)
    7978:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    797c:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    797e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    7982:	2b04      	cmp	r3, #4
    7984:	d010      	beq.n	79a8 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    7986:	2b05      	cmp	r3, #5
    7988:	d010      	beq.n	79ac <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    798a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    798e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    7992:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7996:	40d9      	lsrs	r1, r3
    7998:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    799c:	3102      	adds	r1, #2
}
    799e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    79a2:	4610      	mov	r0, r2
    79a4:	f004 b913 	b.w	bbce <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    79a8:	2103      	movs	r1, #3
    79aa:	e7f8      	b.n	799e <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    79ac:	2102      	movs	r1, #2
    79ae:	e7f6      	b.n	799e <nrfx_gpiote_trigger_enable+0x6e>
    79b0:	20000094 	.word	0x20000094
    79b4:	40006000 	.word	0x40006000

000079b8 <nrfx_gpiote_trigger_disable>:
{
    79b8:	b508      	push	{r3, lr}
    79ba:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    79bc:	f7ff fdce 	bl	755c <pin_in_use_by_te>
    79c0:	b1c0      	cbz	r0, 79f4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    79c2:	f102 0108 	add.w	r1, r2, #8
    79c6:	4b0e      	ldr	r3, [pc, #56]	; (7a00 <nrfx_gpiote_trigger_disable+0x48>)
    79c8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    79cc:	0799      	lsls	r1, r3, #30
    79ce:	d411      	bmi.n	79f4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    79d0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    79d2:	2201      	movs	r2, #1
    79d4:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    79d6:	009b      	lsls	r3, r3, #2
    79d8:	490a      	ldr	r1, [pc, #40]	; (7a04 <nrfx_gpiote_trigger_disable+0x4c>)
    79da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    79de:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    79e2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    79e6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    79ea:	f022 0203 	bic.w	r2, r2, #3
    79ee:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    79f2:	bd08      	pop	{r3, pc}
    79f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    79f8:	2100      	movs	r1, #0
    79fa:	4610      	mov	r0, r2
    79fc:	f004 b8e7 	b.w	bbce <nrf_gpio_cfg_sense_set>
    7a00:	20000094 	.word	0x20000094
    7a04:	40006000 	.word	0x40006000

00007a08 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    7a08:	4b0d      	ldr	r3, [pc, #52]	; (7a40 <nrfx_gpiote_pin_uninit+0x38>)
    7a0a:	f100 0208 	add.w	r2, r0, #8
{
    7a0e:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    7a10:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    7a14:	07db      	lsls	r3, r3, #31
{
    7a16:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    7a18:	d50f      	bpl.n	7a3a <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    7a1a:	f7ff ffcd 	bl	79b8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    7a1e:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    7a20:	f004 041f 	and.w	r4, r4, #31
    7a24:	f7ff fdec 	bl	7600 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    7a28:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    7a2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7a30:	2202      	movs	r2, #2
    7a32:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    7a36:	4803      	ldr	r0, [pc, #12]	; (7a44 <nrfx_gpiote_pin_uninit+0x3c>)
}
    7a38:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    7a3a:	4803      	ldr	r0, [pc, #12]	; (7a48 <nrfx_gpiote_pin_uninit+0x40>)
    7a3c:	e7fc      	b.n	7a38 <nrfx_gpiote_pin_uninit+0x30>
    7a3e:	bf00      	nop
    7a40:	20000094 	.word	0x20000094
    7a44:	0bad0000 	.word	0x0bad0000
    7a48:	0bad0004 	.word	0x0bad0004

00007a4c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    7a4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a50:	4b4e      	ldr	r3, [pc, #312]	; (7b8c <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    7a52:	484f      	ldr	r0, [pc, #316]	; (7b90 <nrfx_gpiote_irq_handler+0x144>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7a54:	494f      	ldr	r1, [pc, #316]	; (7b94 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t status = 0;
    7a56:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    7a58:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7a5a:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7a5c:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    7a5e:	b136      	cbz	r6, 7a6e <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    7a60:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    7a64:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7a66:	bf1e      	ittt	ne
    7a68:	601c      	strne	r4, [r3, #0]
    7a6a:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    7a6c:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7a6e:	3304      	adds	r3, #4
    7a70:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    7a72:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7a76:	d1f1      	bne.n	7a5c <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7a78:	4b45      	ldr	r3, [pc, #276]	; (7b90 <nrfx_gpiote_irq_handler+0x144>)
    7a7a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    7a7e:	b1bb      	cbz	r3, 7ab0 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    7a80:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    7a84:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    7a88:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    7a8a:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    7a8e:	af01      	add	r7, sp, #4
    7a90:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    7a94:	9c01      	ldr	r4, [sp, #4]
    7a96:	b96c      	cbnz	r4, 7ab4 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7a98:	4b3d      	ldr	r3, [pc, #244]	; (7b90 <nrfx_gpiote_irq_handler+0x144>)
    7a9a:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    7a9e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    7aa2:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    7aa6:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    7aa8:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    7aac:	2b00      	cmp	r3, #0
    7aae:	d1ee      	bne.n	7a8e <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    7ab0:	2401      	movs	r4, #1
    7ab2:	e066      	b.n	7b82 <nrfx_gpiote_irq_handler+0x136>
                uint32_t pin = NRF_CTZ(latch[i]);
    7ab4:	fa94 f4a4 	rbit	r4, r4
    7ab8:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7abc:	4a36      	ldr	r2, [pc, #216]	; (7b98 <nrfx_gpiote_irq_handler+0x14c>)
    7abe:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    7ac2:	08e0      	lsrs	r0, r4, #3
    7ac4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
    7ac8:	f004 0307 	and.w	r3, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    7acc:	fa08 f203 	lsl.w	r2, r8, r3
    7ad0:	5c3b      	ldrb	r3, [r7, r0]
    7ad2:	ea23 0302 	bic.w	r3, r3, r2
    7ad6:	543b      	strb	r3, [r7, r0]
    7ad8:	00a3      	lsls	r3, r4, #2
    7ada:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    7ade:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7ae2:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    7ae6:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7ae8:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    7aea:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    7aee:	d518      	bpl.n	7b22 <nrfx_gpiote_irq_handler+0xd6>
        call_handler(pin, trigger);
    7af0:	4659      	mov	r1, fp
    7af2:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7af4:	fa5f fa82 	uxtb.w	sl, r2
    7af8:	f7ff fd3a 	bl	7570 <call_handler>
    7afc:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    7b00:	f3c3 4301 	ubfx	r3, r3, #16, #2
    7b04:	459a      	cmp	sl, r3
    7b06:	d107      	bne.n	7b18 <nrfx_gpiote_irq_handler+0xcc>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    7b08:	2100      	movs	r1, #0
    7b0a:	4620      	mov	r0, r4
    7b0c:	f004 f85f 	bl	bbce <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    7b10:	4651      	mov	r1, sl
    7b12:	4620      	mov	r0, r4
    7b14:	f004 f85b 	bl	bbce <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    7b18:	fa08 f404 	lsl.w	r4, r8, r4
    7b1c:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    7b20:	e7b8      	b.n	7a94 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    7b22:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    7b24:	bf0c      	ite	eq
    7b26:	2103      	moveq	r1, #3
    7b28:	2102      	movne	r1, #2
    7b2a:	4620      	mov	r0, r4
    7b2c:	f004 f84f 	bl	bbce <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    7b30:	f1ba 0f03 	cmp.w	sl, #3
    7b34:	d004      	beq.n	7b40 <nrfx_gpiote_irq_handler+0xf4>
    7b36:	2a02      	cmp	r2, #2
    7b38:	d107      	bne.n	7b4a <nrfx_gpiote_irq_handler+0xfe>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    7b3a:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    7b3e:	d1eb      	bne.n	7b18 <nrfx_gpiote_irq_handler+0xcc>
            call_handler(pin, trigger);
    7b40:	4659      	mov	r1, fp
    7b42:	4620      	mov	r0, r4
    7b44:	f7ff fd14 	bl	7570 <call_handler>
    7b48:	e7e6      	b.n	7b18 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    7b4a:	2a03      	cmp	r2, #3
    7b4c:	d1e4      	bne.n	7b18 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    7b4e:	f1ba 0f02 	cmp.w	sl, #2
    7b52:	e7f4      	b.n	7b3e <nrfx_gpiote_irq_handler+0xf2>
        uint32_t ch = NRF_CTZ(mask);
    7b54:	fa95 f3a5 	rbit	r3, r5
    7b58:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    7b5c:	fa04 f203 	lsl.w	r2, r4, r3
    7b60:	009b      	lsls	r3, r3, #2
    7b62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7b66:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    7b6a:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    7b6e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    7b72:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    7b76:	f3c0 2004 	ubfx	r0, r0, #8, #5
    7b7a:	f3c1 4101 	ubfx	r1, r1, #16, #2
    7b7e:	f7ff fcf7 	bl	7570 <call_handler>
    while (mask)
    7b82:	2d00      	cmp	r5, #0
    7b84:	d1e6      	bne.n	7b54 <nrfx_gpiote_irq_handler+0x108>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    7b86:	b003      	add	sp, #12
    7b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7b8c:	40006100 	.word	0x40006100
    7b90:	40006000 	.word	0x40006000
    7b94:	40006120 	.word	0x40006120
    7b98:	20000094 	.word	0x20000094

00007b9c <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    7b9c:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    7b9e:	4c0b      	ldr	r4, [pc, #44]	; (7bcc <nrfx_power_init+0x30>)
{
    7ba0:	4603      	mov	r3, r0
    if (m_initialized)
    7ba2:	7820      	ldrb	r0, [r4, #0]
    7ba4:	b978      	cbnz	r0, 7bc6 <nrfx_power_init+0x2a>
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
    7ba6:	781b      	ldrb	r3, [r3, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    7ba8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7bac:	f003 0301 	and.w	r3, r3, #1
    7bb0:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7bb4:	f7fb fc5a 	bl	346c <arch_irq_is_enabled>
    7bb8:	b908      	cbnz	r0, 7bbe <nrfx_power_init+0x22>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    7bba:	f7fb fc33 	bl	3424 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    7bbe:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    7bc0:	4803      	ldr	r0, [pc, #12]	; (7bd0 <nrfx_power_init+0x34>)
    m_initialized = true;
    7bc2:	7023      	strb	r3, [r4, #0]
}
    7bc4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    7bc6:	4803      	ldr	r0, [pc, #12]	; (7bd4 <nrfx_power_init+0x38>)
    7bc8:	e7fc      	b.n	7bc4 <nrfx_power_init+0x28>
    7bca:	bf00      	nop
    7bcc:	200019dc 	.word	0x200019dc
    7bd0:	0bad0000 	.word	0x0bad0000
    7bd4:	0bad000c 	.word	0x0bad000c

00007bd8 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
    7bd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7bdc:	f44f 7260 	mov.w	r2, #896	; 0x380
    7be0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
    7be4:	4b01      	ldr	r3, [pc, #4]	; (7bec <nrfx_power_usbevt_uninit+0x14>)
    7be6:	2200      	movs	r2, #0
    7be8:	601a      	str	r2, [r3, #0]
}
    7bea:	4770      	bx	lr
    7bec:	2000165c 	.word	0x2000165c

00007bf0 <nrfx_power_usbevt_init>:
{
    7bf0:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
    7bf2:	f7ff fff1 	bl	7bd8 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    7bf6:	6803      	ldr	r3, [r0, #0]
    7bf8:	b10b      	cbz	r3, 7bfe <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
    7bfa:	4a01      	ldr	r2, [pc, #4]	; (7c00 <nrfx_power_usbevt_init+0x10>)
    7bfc:	6013      	str	r3, [r2, #0]
}
    7bfe:	bd08      	pop	{r3, pc}
    7c00:	2000165c 	.word	0x2000165c

00007c04 <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
    7c04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    7c08:	b510      	push	{r4, lr}
    7c0a:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    7c0e:	0762      	lsls	r2, r4, #29
    7c10:	d507      	bpl.n	7c22 <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    7c12:	f44f 7084 	mov.w	r0, #264	; 0x108
    7c16:	f003 ffe8 	bl	bbea <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    7c1a:	b110      	cbz	r0, 7c22 <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    7c1c:	4b1e      	ldr	r3, [pc, #120]	; (7c98 <nrfx_power_irq_handler+0x94>)
    7c1e:	681b      	ldr	r3, [r3, #0]
    7c20:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    7c22:	06a3      	lsls	r3, r4, #26
    7c24:	d508      	bpl.n	7c38 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    7c26:	f44f 708a 	mov.w	r0, #276	; 0x114
    7c2a:	f003 ffde 	bl	bbea <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    7c2e:	b118      	cbz	r0, 7c38 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    7c30:	4b1a      	ldr	r3, [pc, #104]	; (7c9c <nrfx_power_irq_handler+0x98>)
    7c32:	2000      	movs	r0, #0
    7c34:	681b      	ldr	r3, [r3, #0]
    7c36:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    7c38:	0660      	lsls	r0, r4, #25
    7c3a:	d508      	bpl.n	7c4e <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    7c3c:	f44f 708c 	mov.w	r0, #280	; 0x118
    7c40:	f003 ffd3 	bl	bbea <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    7c44:	b118      	cbz	r0, 7c4e <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    7c46:	4b15      	ldr	r3, [pc, #84]	; (7c9c <nrfx_power_irq_handler+0x98>)
    7c48:	2001      	movs	r0, #1
    7c4a:	681b      	ldr	r3, [r3, #0]
    7c4c:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    7c4e:	0621      	lsls	r1, r4, #24
    7c50:	d508      	bpl.n	7c64 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    7c52:	f44f 708e 	mov.w	r0, #284	; 0x11c
    7c56:	f003 ffc8 	bl	bbea <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    7c5a:	b118      	cbz	r0, 7c64 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    7c5c:	4b10      	ldr	r3, [pc, #64]	; (7ca0 <nrfx_power_irq_handler+0x9c>)
    7c5e:	2000      	movs	r0, #0
    7c60:	681b      	ldr	r3, [r3, #0]
    7c62:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    7c64:	05e2      	lsls	r2, r4, #23
    7c66:	d508      	bpl.n	7c7a <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    7c68:	f44f 7090 	mov.w	r0, #288	; 0x120
    7c6c:	f003 ffbd 	bl	bbea <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    7c70:	b118      	cbz	r0, 7c7a <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    7c72:	4b0b      	ldr	r3, [pc, #44]	; (7ca0 <nrfx_power_irq_handler+0x9c>)
    7c74:	2001      	movs	r0, #1
    7c76:	681b      	ldr	r3, [r3, #0]
    7c78:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    7c7a:	05a3      	lsls	r3, r4, #22
    7c7c:	d50a      	bpl.n	7c94 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    7c7e:	f44f 7092 	mov.w	r0, #292	; 0x124
    7c82:	f003 ffb2 	bl	bbea <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    7c86:	b128      	cbz	r0, 7c94 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    7c88:	4b05      	ldr	r3, [pc, #20]	; (7ca0 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    7c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    7c8e:	681b      	ldr	r3, [r3, #0]
    7c90:	2002      	movs	r0, #2
    7c92:	4718      	bx	r3
}
    7c94:	bd10      	pop	{r4, pc}
    7c96:	bf00      	nop
    7c98:	20001654 	.word	0x20001654
    7c9c:	20001658 	.word	0x20001658
    7ca0:	2000165c 	.word	0x2000165c

00007ca4 <nrfx_qdec_irq_handler>:
static nrfx_qdec_event_handler_t m_qdec_event_handler = NULL;
static nrfx_drv_state_t m_state = NRFX_DRV_STATE_UNINITIALIZED;
static bool m_skip_gpio_cfg;

void nrfx_qdec_irq_handler(void)
{
    7ca4:	b513      	push	{r0, r1, r4, lr}
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_qdec_event_check(NRF_QDEC_Type const * p_reg, nrf_qdec_event_t event)
{
    return (bool)*(volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event);
    7ca6:	4c2a      	ldr	r4, [pc, #168]	; (7d50 <nrfx_qdec_irq_handler+0xac>)
    7ca8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    nrfx_qdec_event_t event;
    if ( nrf_qdec_event_check(NRF_QDEC, NRF_QDEC_EVENT_SAMPLERDY) &&
    7cac:	b1b3      	cbz	r3, 7cdc <nrfx_qdec_irq_handler+0x38>
    return p_reg->INTENSET & mask; // when read this register will return the value of INTEN.
    7cae:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    7cb2:	07d9      	lsls	r1, r3, #31
    7cb4:	d512      	bpl.n	7cdc <nrfx_qdec_irq_handler+0x38>
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event) ) = 0;
    7cb6:	2300      	movs	r3, #0
    7cb8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    7cbc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
         nrf_qdec_int_enable_check(NRF_QDEC, NRF_QDEC_INT_SAMPLERDY_MASK) )
    {
        nrf_qdec_event_clear(NRF_QDEC, NRF_QDEC_EVENT_SAMPLERDY);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_QDEC_EVENT_SAMPLERDY));

        event.type = NRF_QDEC_EVENT_SAMPLERDY;
    7cc0:	f44f 7380 	mov.w	r3, #256	; 0x100
    7cc4:	f8ad 3000 	strh.w	r3, [sp]
    return (nrf_qdec_sampleper_t)(p_reg->SAMPLEPER);
}

NRF_STATIC_INLINE int32_t nrf_qdec_sample_get(NRF_QDEC_Type const * p_reg)
{
    return p_reg->SAMPLE;
    7cc8:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
        event.data.sample.value = (int8_t)nrf_qdec_sample_get(NRF_QDEC);
    7ccc:	f88d 3002 	strb.w	r3, [sp, #2]
        m_qdec_event_handler(event);
    7cd0:	4b20      	ldr	r3, [pc, #128]	; (7d54 <nrfx_qdec_irq_handler+0xb0>)
    7cd2:	aa02      	add	r2, sp, #8
    7cd4:	e912 0003 	ldmdb	r2, {r0, r1}
    7cd8:	681b      	ldr	r3, [r3, #0]
    7cda:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event);
    7cdc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    }

    if ( nrf_qdec_event_check(NRF_QDEC, NRF_QDEC_EVENT_REPORTRDY) &&
    7ce0:	b1d3      	cbz	r3, 7d18 <nrfx_qdec_irq_handler+0x74>
    return p_reg->INTENSET & mask; // when read this register will return the value of INTEN.
    7ce2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    7ce6:	079a      	lsls	r2, r3, #30
    7ce8:	d516      	bpl.n	7d18 <nrfx_qdec_irq_handler+0x74>
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event) ) = 0;
    7cea:	2300      	movs	r3, #0
    7cec:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    7cf0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
         nrf_qdec_int_enable_check(NRF_QDEC, NRF_QDEC_INT_REPORTRDY_MASK) )
    {
        nrf_qdec_event_clear(NRF_QDEC, NRF_QDEC_EVENT_REPORTRDY);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_QDEC_EVENT_REPORTRDY));

        event.type = NRF_QDEC_EVENT_REPORTRDY;
    7cf4:	f44f 7382 	mov.w	r3, #260	; 0x104
    7cf8:	f8ad 3000 	strh.w	r3, [sp]
    return p_reg->ACC;
}

NRF_STATIC_INLINE int32_t nrf_qdec_accread_get(NRF_QDEC_Type const * p_reg)
{
    return p_reg->ACCREAD;
    7cfc:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518

        event.data.report.acc    = (int16_t)nrf_qdec_accread_get(NRF_QDEC);
    7d00:	f8ad 3002 	strh.w	r3, [sp, #2]
    return p_reg->ACCDBL;
}

NRF_STATIC_INLINE uint32_t nrf_qdec_accdblread_get(NRF_QDEC_Type const * p_reg)
{
    return p_reg->ACCDBLREAD;
    7d04:	f8d4 3548 	ldr.w	r3, [r4, #1352]	; 0x548
        event.data.report.accdbl = (uint16_t)nrf_qdec_accdblread_get(NRF_QDEC);
    7d08:	f8ad 3004 	strh.w	r3, [sp, #4]
        m_qdec_event_handler(event);
    7d0c:	4b11      	ldr	r3, [pc, #68]	; (7d54 <nrfx_qdec_irq_handler+0xb0>)
    7d0e:	aa02      	add	r2, sp, #8
    7d10:	e912 0003 	ldmdb	r2, {r0, r1}
    7d14:	681b      	ldr	r3, [r3, #0]
    7d16:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event);
    7d18:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    }

    if ( nrf_qdec_event_check(NRF_QDEC, NRF_QDEC_EVENT_ACCOF) &&
    7d1c:	b1ab      	cbz	r3, 7d4a <nrfx_qdec_irq_handler+0xa6>
    return p_reg->INTENSET & mask; // when read this register will return the value of INTEN.
    7d1e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    7d22:	075b      	lsls	r3, r3, #29
    7d24:	d511      	bpl.n	7d4a <nrfx_qdec_irq_handler+0xa6>
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event) ) = 0;
    7d26:	2300      	movs	r3, #0
    7d28:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    7d2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
         nrf_qdec_int_enable_check(NRF_QDEC, NRF_QDEC_INT_ACCOF_MASK) )
    {
        nrf_qdec_event_clear(NRF_QDEC, NRF_QDEC_EVENT_ACCOF);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_QDEC_EVENT_ACCOF));

        event.type = NRF_QDEC_EVENT_ACCOF;
    7d30:	f44f 7384 	mov.w	r3, #264	; 0x108
    7d34:	f8ad 3000 	strh.w	r3, [sp]
        m_qdec_event_handler(event);
    7d38:	aa02      	add	r2, sp, #8
    7d3a:	4b06      	ldr	r3, [pc, #24]	; (7d54 <nrfx_qdec_irq_handler+0xb0>)
    7d3c:	e912 0003 	ldmdb	r2, {r0, r1}
    7d40:	681b      	ldr	r3, [r3, #0]
    }
}
    7d42:	b002      	add	sp, #8
    7d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_qdec_event_handler(event);
    7d48:	4718      	bx	r3
}
    7d4a:	b002      	add	sp, #8
    7d4c:	bd10      	pop	{r4, pc}
    7d4e:	bf00      	nop
    7d50:	40012000 	.word	0x40012000
    7d54:	20001660 	.word	0x20001660

00007d58 <nrfx_qdec_init>:


nrfx_err_t nrfx_qdec_init(nrfx_qdec_config_t const * p_config,
                          nrfx_qdec_event_handler_t  event_handler)
{
    7d58:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(event_handler);
    nrfx_err_t err_code;

    if (m_state != NRFX_DRV_STATE_UNINITIALIZED)
    7d5a:	4c2f      	ldr	r4, [pc, #188]	; (7e18 <__kernel_ram_size+0x78>)
    7d5c:	7823      	ldrb	r3, [r4, #0]
    7d5e:	2b00      	cmp	r3, #0
    7d60:	d157      	bne.n	7e12 <__kernel_ram_size+0x72>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    m_qdec_event_handler = event_handler;
    7d62:	4b2e      	ldr	r3, [pc, #184]	; (7e1c <__kernel_ram_size+0x7c>)
    m_skip_gpio_cfg = p_config->skip_gpio_cfg;
    7d64:	7e02      	ldrb	r2, [r0, #24]
    m_qdec_event_handler = event_handler;
    7d66:	6019      	str	r1, [r3, #0]
    m_skip_gpio_cfg = p_config->skip_gpio_cfg;
    7d68:	4b2d      	ldr	r3, [pc, #180]	; (7e20 <__kernel_ram_size+0x80>)
    7d6a:	701a      	strb	r2, [r3, #0]

    if (!p_config->skip_gpio_cfg)
    7d6c:	b9c2      	cbnz	r2, 7da0 <__kernel_ram_size>
    *p_pin = pin_number & 0x1F;
    7d6e:	6843      	ldr	r3, [r0, #4]
    7d70:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    7d74:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7d78:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
    7d80:	6883      	ldr	r3, [r0, #8]
    7d82:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    7d86:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    {
        nrf_gpio_cfg_input(p_config->psela, NRF_GPIO_PIN_NOPULL);
        nrf_gpio_cfg_input(p_config->pselb, NRF_GPIO_PIN_NOPULL);
        if (p_config->pselled != NRF_QDEC_LED_NOT_CONNECTED)
    7d8e:	68c3      	ldr	r3, [r0, #12]
    7d90:	1c5d      	adds	r5, r3, #1
    *p_pin = pin_number & 0x1F;
    7d92:	bf1e      	ittt	ne
    7d94:	f003 031f 	andne.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    7d98:	f503 73e0 	addne.w	r3, r3, #448	; 0x1c0
    7d9c:	f841 2023 	strne.w	r2, [r1, r3, lsl #2]
        {
            nrf_gpio_cfg_input(p_config->pselled, NRF_GPIO_PIN_NOPULL);
        }
    }
    if (!p_config->skip_psel_cfg)
    7da0:	7e42      	ldrb	r2, [r0, #25]
    7da2:	4b20      	ldr	r3, [pc, #128]	; (7e24 <__kernel_ram_size+0x84>)
    7da4:	b942      	cbnz	r2, 7db8 <__kernel_ram_size+0x18>
    {
        nrf_qdec_pins_set(NRF_QDEC, p_config->psela, p_config->pselb, p_config->pselled);
    7da6:	e9d0 5101 	ldrd	r5, r1, [r0, #4]
    7daa:	68c2      	ldr	r2, [r0, #12]
    p_reg->PSEL.A = phase_a_pin;
    7dac:	f8c3 5520 	str.w	r5, [r3, #1312]	; 0x520
    p_reg->PSEL.B = phase_b_pin;
    7db0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
    p_reg->PSEL.LED = led_pin;
    7db4:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->SAMPLEPER = sampleper;
    7db8:	7842      	ldrb	r2, [r0, #1]
    7dba:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    return p_reg->PSEL.LED;
    7dbe:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    }

    nrf_qdec_sampleper_set(NRF_QDEC, p_config->sampleper);
    // Change the period and polarity of the LED only when it is used,
    // otherwise the ledpre field might have an invalid value.
    if (nrf_qdec_led_pin_get(NRF_QDEC) != NRF_QDEC_LED_NOT_CONNECTED)
    7dc2:	3201      	adds	r2, #1
    {
        nrf_qdec_ledpre_set(NRF_QDEC, p_config->ledpre);
    7dc4:	bf1f      	itttt	ne
    7dc6:	6902      	ldrne	r2, [r0, #16]
}

NRF_STATIC_INLINE void nrf_qdec_ledpre_set(NRF_QDEC_Type * p_reg, uint32_t time_us)
{
    p_reg->LEDPRE = time_us;
    7dc8:	f8c3 2540 	strne.w	r2, [r3, #1344]	; 0x540
    return (reportper == NRF_QDEC_REPORTPER_10) ? 10 : reportper * 40;
}

NRF_STATIC_INLINE void nrf_qdec_ledpol_set(NRF_QDEC_Type * p_reg, nrf_qdec_ledpol_t pol)
{
    p_reg->LEDPOL = pol;
    7dcc:	7d02      	ldrbne	r2, [r0, #20]
    7dce:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
        nrf_qdec_ledpol_set(NRF_QDEC, p_config->ledpol);
    }

    if (p_config->dbfen)
    7dd2:	7d42      	ldrb	r2, [r0, #21]
    7dd4:	b102      	cbz	r2, 7dd8 <__kernel_ram_size+0x38>
    p_reg->DBFEN = NRF_QDEC_DBFEN_ENABLE;
    7dd6:	2201      	movs	r2, #1
    p_reg->DBFEN = NRF_QDEC_DBFEN_DISABLE;
    7dd8:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
        nrf_qdec_dbfen_disable(NRF_QDEC);
    }

    uint32_t int_mask = NRF_QDEC_INT_ACCOF_MASK;

    if (p_config->reportper != NRF_QDEC_REPORTPER_DISABLED)
    7ddc:	7801      	ldrb	r1, [r0, #0]
    7dde:	2910      	cmp	r1, #16
    p_reg->SHORTS |= mask;
    7de0:	bf1f      	itttt	ne
    7de2:	f8d3 2200 	ldrne.w	r2, [r3, #512]	; 0x200
    7de6:	f042 0201 	orrne.w	r2, r2, #1
    7dea:	f8c3 2200 	strne.w	r2, [r3, #512]	; 0x200
    p_reg->REPORTPER = reportper;
    7dee:	f8c3 1510 	strne.w	r1, [r3, #1296]	; 0x510
        nrf_qdec_shorts_enable(NRF_QDEC, NRF_QDEC_SHORT_REPORTRDY_READCLRACC_MASK);
        nrf_qdec_reportper_set(NRF_QDEC, p_config->reportper);
        int_mask |= NRF_QDEC_INT_REPORTRDY_MASK;
    }

    if (p_config->sample_inten)
    7df2:	7d81      	ldrb	r1, [r0, #22]
        int_mask |= NRF_QDEC_INT_REPORTRDY_MASK;
    7df4:	bf14      	ite	ne
    7df6:	2206      	movne	r2, #6
    uint32_t int_mask = NRF_QDEC_INT_ACCOF_MASK;
    7df8:	2204      	moveq	r2, #4
    if (p_config->sample_inten)
    7dfa:	b109      	cbz	r1, 7e00 <__kernel_ram_size+0x60>
    {
        int_mask |= NRF_QDEC_INT_SAMPLERDY_MASK;
    7dfc:	f042 0201 	orr.w	r2, r2, #1
    p_reg->INTENSET = mask; // writing 0 has no effect
    7e00:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    }

    nrf_qdec_int_enable(NRF_QDEC, int_mask);
    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_QDEC), p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_QDEC));
    7e04:	2012      	movs	r0, #18
    7e06:	f7fb fb0d 	bl	3424 <arch_irq_enable>

    m_state = NRFX_DRV_STATE_INITIALIZED;
    7e0a:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    7e0c:	4806      	ldr	r0, [pc, #24]	; (7e28 <__kernel_ram_size+0x88>)
    m_state = NRFX_DRV_STATE_INITIALIZED;
    7e0e:	7023      	strb	r3, [r4, #0]
}
    7e10:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    7e12:	4806      	ldr	r0, [pc, #24]	; (7e2c <__kernel_ram_size+0x8c>)
    7e14:	e7fc      	b.n	7e10 <__kernel_ram_size+0x70>
    7e16:	bf00      	nop
    7e18:	200019de 	.word	0x200019de
    7e1c:	20001660 	.word	0x20001660
    7e20:	200019dd 	.word	0x200019dd
    7e24:	40012000 	.word	0x40012000
    7e28:	0bad0000 	.word	0x0bad0000
    7e2c:	0bad0005 	.word	0x0bad0005

00007e30 <nrfx_qdec_enable>:
    p_reg->ENABLE = NRF_QDEC_ENABLE;
    7e30:	4b04      	ldr	r3, [pc, #16]	; (7e44 <nrfx_qdec_enable+0x14>)
    7e32:	2201      	movs	r2, #1
    7e34:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)task) ) = 1;
    7e38:	601a      	str	r2, [r3, #0]
void nrfx_qdec_enable(void)
{
    NRFX_ASSERT(m_state == NRFX_DRV_STATE_INITIALIZED);
    nrf_qdec_enable(NRF_QDEC);
    nrf_qdec_task_trigger(NRF_QDEC, NRF_QDEC_TASK_START);
    m_state = NRFX_DRV_STATE_POWERED_ON;
    7e3a:	4b03      	ldr	r3, [pc, #12]	; (7e48 <nrfx_qdec_enable+0x18>)
    7e3c:	2202      	movs	r2, #2
    7e3e:	701a      	strb	r2, [r3, #0]
    NRFX_LOG_INFO("Enabled.");
}
    7e40:	4770      	bx	lr
    7e42:	bf00      	nop
    7e44:	40012000 	.word	0x40012000
    7e48:	200019de 	.word	0x200019de

00007e4c <nrfx_qdec_accumulators_read>:
    7e4c:	4b04      	ldr	r3, [pc, #16]	; (7e60 <nrfx_qdec_accumulators_read+0x14>)
    7e4e:	2201      	movs	r2, #1
    7e50:	609a      	str	r2, [r3, #8]
    return p_reg->ACCREAD;
    7e52:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    return p_reg->ACCDBLREAD;
    7e56:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
void nrfx_qdec_accumulators_read(int16_t * p_acc, int16_t * p_accdbl)
{
    NRFX_ASSERT(m_state == NRFX_DRV_STATE_POWERED_ON);
    nrf_qdec_task_trigger(NRF_QDEC, NRF_QDEC_TASK_READCLRACC);

    *p_acc    = (int16_t)nrf_qdec_accread_get(NRF_QDEC);
    7e5a:	8002      	strh	r2, [r0, #0]
    *p_accdbl = (int16_t)nrf_qdec_accdblread_get(NRF_QDEC);
    7e5c:	800b      	strh	r3, [r1, #0]

    NRFX_LOG_DEBUG("Accumulators data, ACC register:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_acc, sizeof(p_acc[0]));
    NRFX_LOG_DEBUG("Accumulators data, ACCDBL register:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_accdbl, sizeof(p_accdbl[0]));
}
    7e5e:	4770      	bx	lr
    7e60:	40012000 	.word	0x40012000

00007e64 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
    7e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e68:	4606      	mov	r6, r0
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    7e6a:	4d4f      	ldr	r5, [pc, #316]	; (7fa8 <nrfx_spim_init+0x144>)
{
    7e6c:	460c      	mov	r4, r1
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    7e6e:	7931      	ldrb	r1, [r6, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    7e70:	014f      	lsls	r7, r1, #5
    7e72:	eb05 1141 	add.w	r1, r5, r1, lsl #5
{
    7e76:	4610      	mov	r0, r2
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    7e78:	7f0a      	ldrb	r2, [r1, #28]
    7e7a:	2a00      	cmp	r2, #0
    7e7c:	f040 8092 	bne.w	7fa4 <nrfx_spim_init+0x140>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    7e80:	6832      	ldr	r2, [r6, #0]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    7e82:	51e8      	str	r0, [r5, r7]
    p_cb->p_context = p_context;
    7e84:	604b      	str	r3, [r1, #4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    7e86:	7be0      	ldrb	r0, [r4, #15]
    7e88:	7f8b      	ldrb	r3, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
    7e8a:	f894 c004 	ldrb.w	ip, [r4, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    7e8e:	f360 0300 	bfi	r3, r0, #0, #1
    p_cb->ss_active_high = p_config->ss_active_high;
    7e92:	f36c 0341 	bfi	r3, ip, #1, #1
    7e96:	778b      	strb	r3, [r1, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
#endif
    p_cb->ss_pin = p_config->ss_pin;
    7e98:	78e3      	ldrb	r3, [r4, #3]
    7e9a:	77cb      	strb	r3, [r1, #31]

    configure_pins(p_instance, p_config);
    7e9c:	f8d6 8000 	ldr.w	r8, [r6]
    if (!p_config->skip_gpio_cfg)
    7ea0:	2800      	cmp	r0, #0
    7ea2:	d13d      	bne.n	7f20 <nrfx_spim_init+0xbc>
        nrf_gpio_pin_write(p_config->sck_pin,
    7ea4:	7b21      	ldrb	r1, [r4, #12]
    7ea6:	7820      	ldrb	r0, [r4, #0]
    7ea8:	2901      	cmp	r1, #1
    7eaa:	bf94      	ite	ls
    7eac:	2100      	movls	r1, #0
    7eae:	2101      	movhi	r1, #1
    7eb0:	f003 fec8 	bl	bc44 <nrf_gpio_pin_write>
    *p_pin = pin_number & 0x1F;
    7eb4:	7823      	ldrb	r3, [r4, #0]
    7eb6:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    7eba:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7ebe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    7ec2:	2101      	movs	r1, #1
    7ec4:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    7ec8:	7863      	ldrb	r3, [r4, #1]
    7eca:	2bff      	cmp	r3, #255	; 0xff
    7ecc:	d009      	beq.n	7ee2 <nrfx_spim_init+0x7e>
    *p_pin = pin_number & 0x1F;
    7ece:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7ed2:	4099      	lsls	r1, r3
    reg->PIN_CNF[pin_number] = cnf;
    7ed4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    p_reg->OUTCLR = clr_mask;
    7ed8:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = cnf;
    7edc:	2103      	movs	r1, #3
    7ede:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    7ee2:	78a3      	ldrb	r3, [r4, #2]
    7ee4:	2bff      	cmp	r3, #255	; 0xff
    7ee6:	d009      	beq.n	7efc <nrfx_spim_init+0x98>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7ee8:	7ba1      	ldrb	r1, [r4, #14]
    *p_pin = pin_number & 0x1F;
    7eea:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    7eee:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7ef2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7ef6:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    7ef8:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    7efc:	78e0      	ldrb	r0, [r4, #3]
    7efe:	28ff      	cmp	r0, #255	; 0xff
    7f00:	d00e      	beq.n	7f20 <nrfx_spim_init+0xbc>
                               p_config->ss_active_high ? 0 : 1);
    7f02:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
    7f04:	f081 0101 	eor.w	r1, r1, #1
    7f08:	f003 fe9c 	bl	bc44 <nrf_gpio_pin_write>
    *p_pin = pin_number & 0x1F;
    7f0c:	78e3      	ldrb	r3, [r4, #3]
    7f0e:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    7f12:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7f16:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7f1a:	2003      	movs	r0, #3
    7f1c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    7f20:	7c23      	ldrb	r3, [r4, #16]
    7f22:	b993      	cbnz	r3, 7f4a <nrfx_spim_init+0xe6>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    7f24:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    7f26:	7820      	ldrb	r0, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    7f28:	2bff      	cmp	r3, #255	; 0xff
    7f2a:	bf18      	it	ne
    7f2c:	4619      	movne	r1, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    7f2e:	78a3      	ldrb	r3, [r4, #2]
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
    7f30:	f8c8 0508 	str.w	r0, [r8, #1288]	; 0x508
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    7f34:	bf08      	it	eq
    7f36:	f04f 31ff 	moveq.w	r1, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    7f3a:	2bff      	cmp	r3, #255	; 0xff
    7f3c:	bf08      	it	eq
    7f3e:	f04f 33ff 	moveq.w	r3, #4294967295
    p_reg->PSEL.MOSI = mosi_pin;
    7f42:	f8c8 150c 	str.w	r1, [r8, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    7f46:	f8c8 3510 	str.w	r3, [r8, #1296]	; 0x510
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    7f4a:	68a3      	ldr	r3, [r4, #8]
    7f4c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    7f50:	7b63      	ldrb	r3, [r4, #13]
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    7f52:	7b21      	ldrb	r1, [r4, #12]
    7f54:	3b00      	subs	r3, #0
    7f56:	bf18      	it	ne
    7f58:	2301      	movne	r3, #1
    switch (spi_mode)
    7f5a:	2902      	cmp	r1, #2
    7f5c:	d01c      	beq.n	7f98 <nrfx_spim_init+0x134>
    7f5e:	2903      	cmp	r1, #3
    7f60:	d01d      	beq.n	7f9e <nrfx_spim_init+0x13a>
    7f62:	2901      	cmp	r1, #1
    7f64:	d101      	bne.n	7f6a <nrfx_spim_init+0x106>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    7f66:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    7f6a:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    7f6e:	79a3      	ldrb	r3, [r4, #6]
    7f70:	f8c2 35c0 	str.w	r3, [r2, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    7f74:	2307      	movs	r3, #7
    7f76:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    7f7a:	59eb      	ldr	r3, [r5, r7]
    7f7c:	b123      	cbz	r3, 7f88 <nrfx_spim_init+0x124>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    7f7e:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    7f80:	f340 3007 	sbfx	r0, r0, #12, #8
    7f84:	f7fb fa4e 	bl	3424 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    7f88:	443d      	add	r5, r7
    7f8a:	2300      	movs	r3, #0
    7f8c:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    7f8e:	4807      	ldr	r0, [pc, #28]	; (7fac <nrfx_spim_init+0x148>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    7f90:	2301      	movs	r3, #1
    7f92:	772b      	strb	r3, [r5, #28]
}
    7f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    7f98:	f043 0304 	orr.w	r3, r3, #4
        break;
    7f9c:	e7e5      	b.n	7f6a <nrfx_spim_init+0x106>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    7f9e:	f043 0306 	orr.w	r3, r3, #6
        break;
    7fa2:	e7e2      	b.n	7f6a <nrfx_spim_init+0x106>
        return err_code;
    7fa4:	4802      	ldr	r0, [pc, #8]	; (7fb0 <nrfx_spim_init+0x14c>)
    7fa6:	e7f5      	b.n	7f94 <nrfx_spim_init+0x130>
    7fa8:	20001664 	.word	0x20001664
    7fac:	0bad0000 	.word	0x0bad0000
    7fb0:	0bad0005 	.word	0x0bad0005

00007fb4 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
    7fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    7fb6:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
    7fb8:	4d20      	ldr	r5, [pc, #128]	; (803c <CONFIG_PM_SRAM_SIZE+0x3c>)
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
    7fba:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
    7fbc:	015e      	lsls	r6, r3, #5
    7fbe:	eb05 1743 	add.w	r7, r5, r3, lsl #5
    7fc2:	59ab      	ldr	r3, [r5, r6]
    7fc4:	b1b3      	cbz	r3, 7ff4 <nrfx_spim_uninit+0x40>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    7fc6:	f344 3007 	sbfx	r0, r4, #12, #8
    7fca:	f7fb fa3b 	bl	3444 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    7fce:	4b1c      	ldr	r3, [pc, #112]	; (8040 <CONFIG_PM_SRAM_SIZE+0x40>)
    7fd0:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
    7fd4:	7f7b      	ldrb	r3, [r7, #29]
    7fd6:	b16b      	cbz	r3, 7ff4 <nrfx_spim_uninit+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7fd8:	2301      	movs	r3, #1
    7fda:	6163      	str	r3, [r4, #20]
    7fdc:	2764      	movs	r7, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7fde:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
    7fe2:	b923      	cbnz	r3, 7fee <nrfx_spim_uninit+0x3a>
    7fe4:	2001      	movs	r0, #1
    7fe6:	f003 fd6b 	bl	bac0 <nrfx_busy_wait>
    7fea:	3f01      	subs	r7, #1
    7fec:	d1f7      	bne.n	7fde <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
    7fee:	19ab      	adds	r3, r5, r6
    7ff0:	2200      	movs	r2, #0
    7ff2:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
    7ff4:	2300      	movs	r3, #0
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
    7ff6:	19a9      	adds	r1, r5, r6
    7ff8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    7ffc:	7f8b      	ldrb	r3, [r1, #30]
    7ffe:	07db      	lsls	r3, r3, #31
    8000:	d417      	bmi.n	8032 <CONFIG_PM_SRAM_SIZE+0x32>
    return p_reg->PSEL.SCK;
    8002:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
    8006:	f003 fe11 	bl	bc2c <spim_pin_uninit>
    return p_reg->PSEL.MISO;
    800a:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
    800e:	f003 fe0d 	bl	bc2c <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
    8012:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
    8016:	f003 fe09 	bl	bc2c <spim_pin_uninit>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    801a:	7fcb      	ldrb	r3, [r1, #31]
    801c:	2bff      	cmp	r3, #255	; 0xff
    801e:	d008      	beq.n	8032 <CONFIG_PM_SRAM_SIZE+0x32>
    *p_pin = pin_number & 0x1F;
    8020:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    8024:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    8028:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    802c:	2102      	movs	r1, #2
    802e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    8032:	4435      	add	r5, r6
    8034:	2300      	movs	r3, #0
    8036:	772b      	strb	r3, [r5, #28]
}
    8038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    803a:	bf00      	nop
    803c:	20001664 	.word	0x20001664
    8040:	00080152 	.word	0x00080152

00008044 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    8044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    8048:	4f36      	ldr	r7, [pc, #216]	; (8124 <nrfx_spim_xfer+0xe0>)
    804a:	7903      	ldrb	r3, [r0, #4]
    804c:	eb07 1843 	add.w	r8, r7, r3, lsl #5
{
    8050:	4614      	mov	r4, r2
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    8052:	f898 201d 	ldrb.w	r2, [r8, #29]
{
    8056:	4681      	mov	r9, r0
    8058:	460d      	mov	r5, r1
    if (p_cb->transfer_in_progress)
    805a:	015e      	lsls	r6, r3, #5
    805c:	2a00      	cmp	r2, #0
    805e:	d15f      	bne.n	8120 <nrfx_spim_xfer+0xdc>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    8060:	59ba      	ldr	r2, [r7, r6]
    8062:	b12a      	cbz	r2, 8070 <nrfx_spim_xfer+0x2c>
    8064:	f014 0f14 	tst.w	r4, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    8068:	bf04      	itt	eq
    806a:	2201      	moveq	r2, #1
    806c:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    8070:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8074:	eb07 0c06 	add.w	ip, r7, r6
    8078:	f10c 0c0c 	add.w	ip, ip, #12
    807c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
    8080:	2101      	movs	r1, #1
    8082:	4640      	mov	r0, r8
    8084:	f003 fdeb 	bl	bc5e <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    8088:	6829      	ldr	r1, [r5, #0]
    808a:	b121      	cbz	r1, 8096 <nrfx_spim_xfer+0x52>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    808c:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
    8090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    8094:	d106      	bne.n	80a4 <nrfx_spim_xfer+0x60>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    8096:	68aa      	ldr	r2, [r5, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    8098:	b152      	cbz	r2, 80b0 <nrfx_spim_xfer+0x6c>
    809a:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    809e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    80a2:	d005      	beq.n	80b0 <nrfx_spim_xfer+0x6c>
        p_cb->transfer_in_progress = false;
    80a4:	443e      	add	r6, r7
    80a6:	2300      	movs	r3, #0
        return err_code;
    80a8:	481f      	ldr	r0, [pc, #124]	; (8128 <nrfx_spim_xfer+0xe4>)
        p_cb->transfer_in_progress = false;
    80aa:	7773      	strb	r3, [r6, #29]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
    80ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    80b0:	f8d9 3000 	ldr.w	r3, [r9]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    80b4:	6868      	ldr	r0, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    80b6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
    80ba:	68e9      	ldr	r1, [r5, #12]
    p_reg->TXD.MAXCNT = length;
    80bc:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    80c0:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    80c4:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
    80c6:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    80ca:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    80ce:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    80d2:	f014 0201 	ands.w	r2, r4, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    80d6:	bf18      	it	ne
    80d8:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    80da:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    80de:	f014 0202 	ands.w	r2, r4, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    80e2:	bf18      	it	ne
    80e4:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    80e6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    80ea:	f014 0208 	ands.w	r2, r4, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    80ee:	bf04      	itt	eq
    80f0:	2101      	moveq	r1, #1
    80f2:	6119      	streq	r1, [r3, #16]
    if (!p_cb->handler)
    80f4:	59b9      	ldr	r1, [r7, r6]
    80f6:	b949      	cbnz	r1, 810c <nrfx_spim_xfer+0xc8>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    80f8:	b912      	cbnz	r2, 8100 <nrfx_spim_xfer+0xbc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    80fa:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    80fe:	e7fb      	b.n	80f8 <nrfx_spim_xfer+0xb4>
        set_ss_pin_state(p_cb, false);
    8100:	2100      	movs	r1, #0
    8102:	4640      	mov	r0, r8
    8104:	f003 fdab 	bl	bc5e <set_ss_pin_state>
    return err_code;
    8108:	4808      	ldr	r0, [pc, #32]	; (812c <nrfx_spim_xfer+0xe8>)
}
    810a:	e7cf      	b.n	80ac <nrfx_spim_xfer+0x68>
    if (!enable)
    810c:	f014 0f04 	tst.w	r4, #4
    8110:	f04f 0240 	mov.w	r2, #64	; 0x40
    p_reg->INTENCLR = mask;
    8114:	bf14      	ite	ne
    8116:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
    811a:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
    811e:	e7f3      	b.n	8108 <nrfx_spim_xfer+0xc4>
        return err_code;
    8120:	4803      	ldr	r0, [pc, #12]	; (8130 <nrfx_spim_xfer+0xec>)
    8122:	e7c3      	b.n	80ac <nrfx_spim_xfer+0x68>
    8124:	20001664 	.word	0x20001664
    8128:	0bad000a 	.word	0x0bad000a
    812c:	0bad0000 	.word	0x0bad0000
    8130:	0bad000b 	.word	0x0bad000b

00008134 <nrfx_spim_0_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8134:	4b0c      	ldr	r3, [pc, #48]	; (8168 <nrfx_spim_0_irq_handler+0x34>)
    8136:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    }
}

#if NRFX_CHECK(NRFX_SPIM0_ENABLED)
void nrfx_spim_0_irq_handler(void)
{
    813a:	b510      	push	{r4, lr}
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    813c:	b192      	cbz	r2, 8164 <nrfx_spim_0_irq_handler+0x30>
    set_ss_pin_state(p_cb, false);
    813e:	4a0b      	ldr	r2, [pc, #44]	; (816c <nrfx_spim_0_irq_handler+0x38>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8140:	2400      	movs	r4, #0
    8142:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
    8146:	4621      	mov	r1, r4
    8148:	4610      	mov	r0, r2
    814a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    814e:	f003 fd86 	bl	bc5e <set_ss_pin_state>
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    8152:	7214      	strb	r4, [r2, #8]
    p_cb->transfer_in_progress = false;
    8154:	7754      	strb	r4, [r2, #29]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    8156:	e9d2 3100 	ldrd	r3, r1, [r2]
    irq_handler(NRF_SPIM0, &m_cb[NRFX_SPIM0_INST_IDX]);
}
    815a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    815e:	f102 0008 	add.w	r0, r2, #8
    8162:	4718      	bx	r3
}
    8164:	bd10      	pop	{r4, pc}
    8166:	bf00      	nop
    8168:	40003000 	.word	0x40003000
    816c:	20001664 	.word	0x20001664

00008170 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8170:	4b05      	ldr	r3, [pc, #20]	; (8188 <ep_state_access+0x18>)
    8172:	f010 0f80 	tst.w	r0, #128	; 0x80
    8176:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    817a:	bf08      	it	eq
    817c:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    817e:	f000 000f 	and.w	r0, r0, #15
}
    8182:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    8186:	4770      	bx	lr
    8188:	200017f4 	.word	0x200017f4

0000818c <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    818c:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    818e:	4a09      	ldr	r2, [pc, #36]	; (81b4 <ev_usbreset_handler+0x28>)
    8190:	2300      	movs	r3, #0
    8192:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    8194:	4a08      	ldr	r2, [pc, #32]	; (81b8 <ev_usbreset_handler+0x2c>)

    const nrfx_usbd_evt_t evt = {
    8196:	f8ad 3005 	strh.w	r3, [sp, #5]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    819a:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    819c:	f88d 3007 	strb.w	r3, [sp, #7]
    81a0:	2301      	movs	r3, #1
    81a2:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    81a6:	4b05      	ldr	r3, [pc, #20]	; (81bc <ev_usbreset_handler+0x30>)
    81a8:	a801      	add	r0, sp, #4
    81aa:	681b      	ldr	r3, [r3, #0]
    81ac:	4798      	blx	r3
}
    81ae:	b003      	add	sp, #12
    81b0:	f85d fb04 	ldr.w	pc, [sp], #4
    81b4:	200019df 	.word	0x200019df
    81b8:	200019e2 	.word	0x200019e2
    81bc:	20001884 	.word	0x20001884

000081c0 <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
    81c0:	4b21      	ldr	r3, [pc, #132]	; (8248 <ev_usbevent_handler+0x88>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    81c2:	b513      	push	{r0, r1, r4, lr}
    81c4:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    81c8:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    81cc:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    81ce:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    81d2:	d50e      	bpl.n	81f2 <ev_usbevent_handler+0x32>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    81d4:	4b1d      	ldr	r3, [pc, #116]	; (824c <ev_usbevent_handler+0x8c>)
    81d6:	2201      	movs	r2, #1
    81d8:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    81da:	2300      	movs	r3, #0
    81dc:	f8ad 3005 	strh.w	r3, [sp, #5]
    81e0:	f88d 3007 	strb.w	r3, [sp, #7]
    81e4:	2302      	movs	r3, #2
    81e6:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    81ea:	4b19      	ldr	r3, [pc, #100]	; (8250 <ev_usbevent_handler+0x90>)
    81ec:	a801      	add	r0, sp, #4
    81ee:	681b      	ldr	r3, [r3, #0]
    81f0:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    81f2:	05a2      	lsls	r2, r4, #22
    81f4:	d50d      	bpl.n	8212 <ev_usbevent_handler+0x52>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    81f6:	4a15      	ldr	r2, [pc, #84]	; (824c <ev_usbevent_handler+0x8c>)
    81f8:	2300      	movs	r3, #0
    81fa:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    81fc:	f8ad 3005 	strh.w	r3, [sp, #5]
    8200:	f88d 3007 	strb.w	r3, [sp, #7]
    8204:	2303      	movs	r3, #3
    8206:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    820a:	4b11      	ldr	r3, [pc, #68]	; (8250 <ev_usbevent_handler+0x90>)
    820c:	a801      	add	r0, sp, #4
    820e:	681b      	ldr	r3, [r3, #0]
    8210:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    8212:	0563      	lsls	r3, r4, #21
    8214:	d515      	bpl.n	8242 <ev_usbevent_handler+0x82>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    8216:	4a0d      	ldr	r2, [pc, #52]	; (824c <ev_usbevent_handler+0x8c>)
    8218:	7813      	ldrb	r3, [r2, #0]
    821a:	b193      	cbz	r3, 8242 <ev_usbevent_handler+0x82>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    821c:	2300      	movs	r3, #0
    821e:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    8220:	4a09      	ldr	r2, [pc, #36]	; (8248 <ev_usbevent_handler+0x88>)
    8222:	2101      	movs	r1, #1
    8224:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8228:	6591      	str	r1, [r2, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    822a:	6d92      	ldr	r2, [r2, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    822c:	f8ad 3005 	strh.w	r3, [sp, #5]
    8230:	f88d 3007 	strb.w	r3, [sp, #7]
    8234:	2304      	movs	r3, #4
    8236:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    823a:	4b05      	ldr	r3, [pc, #20]	; (8250 <ev_usbevent_handler+0x90>)
    823c:	a801      	add	r0, sp, #4
    823e:	681b      	ldr	r3, [r3, #0]
    8240:	4798      	blx	r3
        }
    }
}
    8242:	b002      	add	sp, #8
    8244:	bd10      	pop	{r4, pc}
    8246:	bf00      	nop
    8248:	40027000 	.word	0x40027000
    824c:	200019df 	.word	0x200019df
    8250:	20001884 	.word	0x20001884

00008254 <usbd_errata_187_211_begin>:
	__asm__ volatile(
    8254:	f04f 0320 	mov.w	r3, #32
    8258:	f3ef 8011 	mrs	r0, BASEPRI
    825c:	f383 8812 	msr	BASEPRI_MAX, r3
    8260:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    8264:	4b0a      	ldr	r3, [pc, #40]	; (8290 <usbd_errata_187_211_begin+0x3c>)
    8266:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    826a:	2203      	movs	r2, #3
    826c:	b961      	cbnz	r1, 8288 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    826e:	f249 3175 	movw	r1, #37749	; 0x9375
    8272:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    8276:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    827a:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    827e:	f380 8811 	msr	BASEPRI, r0
    8282:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    8286:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    8288:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    828c:	e7f7      	b.n	827e <usbd_errata_187_211_begin+0x2a>
    828e:	bf00      	nop
    8290:	4006e000 	.word	0x4006e000

00008294 <usbd_errata_187_211_end>:
	__asm__ volatile(
    8294:	f04f 0320 	mov.w	r3, #32
    8298:	f3ef 8011 	mrs	r0, BASEPRI
    829c:	f383 8812 	msr	BASEPRI_MAX, r3
    82a0:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    82a4:	4b0a      	ldr	r3, [pc, #40]	; (82d0 <usbd_errata_187_211_end+0x3c>)
    82a6:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    82aa:	b961      	cbnz	r1, 82c6 <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    82ac:	f249 3275 	movw	r2, #37749	; 0x9375
    82b0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    82b4:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    82b8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    82bc:	f380 8811 	msr	BASEPRI, r0
    82c0:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    82c4:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    82c6:	2200      	movs	r2, #0
    82c8:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    82cc:	e7f6      	b.n	82bc <usbd_errata_187_211_end+0x28>
    82ce:	bf00      	nop
    82d0:	4006e000 	.word	0x4006e000

000082d4 <nrfx_usbd_feeder_flash>:
{
    82d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    82d6:	684d      	ldr	r5, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    82d8:	4f0b      	ldr	r7, [pc, #44]	; (8308 <nrfx_usbd_feeder_flash+0x34>)
    82da:	4295      	cmp	r5, r2
    82dc:	bf28      	it	cs
    82de:	4615      	movcs	r5, r2
{
    82e0:	460c      	mov	r4, r1
    82e2:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    82e4:	462a      	mov	r2, r5
    82e6:	6809      	ldr	r1, [r1, #0]
    82e8:	4638      	mov	r0, r7
    82ea:	f003 f92a 	bl	b542 <memcpy>
    p_transfer->size -= tx_size;
    82ee:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    82f0:	6822      	ldr	r2, [r4, #0]
    p_transfer->size -= tx_size;
    82f2:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
    82f4:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
    82f8:	442a      	add	r2, r5
    p_transfer->size -= tx_size;
    82fa:	6060      	str	r0, [r4, #4]
}
    82fc:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    82fe:	6022      	str	r2, [r4, #0]
}
    8300:	bf18      	it	ne
    8302:	2001      	movne	r0, #1
    8304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8306:	bf00      	nop
    8308:	20001888 	.word	0x20001888

0000830c <nrfx_usbd_feeder_flash_zlp>:
{
    830c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    830e:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
    8310:	4294      	cmp	r4, r2
    8312:	bf28      	it	cs
    8314:	4614      	movcs	r4, r2
{
    8316:	4606      	mov	r6, r0
    8318:	460d      	mov	r5, r1
    if (tx_size != 0)
    831a:	b18c      	cbz	r4, 8340 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    831c:	4f09      	ldr	r7, [pc, #36]	; (8344 <nrfx_usbd_feeder_flash_zlp+0x38>)
    831e:	6809      	ldr	r1, [r1, #0]
    8320:	4622      	mov	r2, r4
    8322:	4638      	mov	r0, r7
    8324:	f003 f90d 	bl	b542 <memcpy>
        p_next->p_data.tx = p_buffer;
    8328:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
    832a:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
    832c:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
    832e:	1b1b      	subs	r3, r3, r4
    8330:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    8332:	682b      	ldr	r3, [r5, #0]
}
    8334:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    8336:	4423      	add	r3, r4
    8338:	602b      	str	r3, [r5, #0]
}
    833a:	bf18      	it	ne
    833c:	2001      	movne	r0, #1
    833e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
    8340:	6004      	str	r4, [r0, #0]
    8342:	e7f2      	b.n	832a <nrfx_usbd_feeder_flash_zlp+0x1e>
    8344:	20001888 	.word	0x20001888

00008348 <usbd_enable>:

/**
 * @brief Enable USBD peripheral.
 */
static void usbd_enable(void)
{
    8348:	b508      	push	{r3, lr}
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    834a:	f003 fc94 	bl	bc76 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    834e:	b108      	cbz	r0, 8354 <usbd_enable+0xc>
    {
        usbd_errata_187_211_begin();
    8350:	f7ff ff80 	bl	8254 <usbd_errata_187_211_begin>
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    8354:	4b0b      	ldr	r3, [pc, #44]	; (8384 <usbd_enable+0x3c>)
    8356:	2201      	movs	r2, #1
    8358:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    835c:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    8360:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    8364:	0512      	lsls	r2, r2, #20
    8366:	d5fb      	bpl.n	8360 <usbd_enable+0x18>
    p_reg->EVENTCAUSE = flags;
    8368:	f44f 6200 	mov.w	r2, #2048	; 0x800
    836c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    8370:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8374:	f003 fc7f 	bl	bc76 <nrf52_errata_187>
    if (nrfx_usbd_errata_171())
    {
        usbd_errata_171_end();
    }

    if (nrfx_usbd_errata_187())
    8378:	b118      	cbz	r0, 8382 <usbd_enable+0x3a>
    {
        usbd_errata_187_211_end();
    }
}
    837a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
    837e:	f7ff bf89 	b.w	8294 <usbd_errata_187_211_end>
}
    8382:	bd08      	pop	{r3, pc}
    8384:	40027000 	.word	0x40027000

00008388 <ev_sof_handler>:
{
    8388:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    838a:	2300      	movs	r3, #0
    838c:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    8390:	4b0b      	ldr	r3, [pc, #44]	; (83c0 <ev_sof_handler+0x38>)
    8392:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    8396:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    839a:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    839e:	4a09      	ldr	r2, [pc, #36]	; (83c4 <ev_sof_handler+0x3c>)
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    83a0:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
    83a2:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    83a4:	bf0c      	ite	eq
    83a6:	f44f 7180 	moveq.w	r1, #256	; 0x100
    83aa:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
    83ae:	430b      	orrs	r3, r1
    83b0:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    83b2:	4b05      	ldr	r3, [pc, #20]	; (83c8 <ev_sof_handler+0x40>)
    83b4:	a801      	add	r0, sp, #4
    83b6:	681b      	ldr	r3, [r3, #0]
    83b8:	4798      	blx	r3
}
    83ba:	b003      	add	sp, #12
    83bc:	f85d fb04 	ldr.w	pc, [sp], #4
    83c0:	40027000 	.word	0x40027000
    83c4:	20001760 	.word	0x20001760
    83c8:	20001884 	.word	0x20001884

000083cc <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    83cc:	4b06      	ldr	r3, [pc, #24]	; (83e8 <atomic_and.constprop.0.isra.0+0x1c>)
    83ce:	f3bf 8f5b 	dmb	ish
    83d2:	e853 2f00 	ldrex	r2, [r3]
    83d6:	4002      	ands	r2, r0
    83d8:	e843 2100 	strex	r1, r2, [r3]
    83dc:	2900      	cmp	r1, #0
    83de:	d1f8      	bne.n	83d2 <atomic_and.constprop.0.isra.0+0x6>
    83e0:	f3bf 8f5b 	dmb	ish
}
    83e4:	4770      	bx	lr
    83e6:	bf00      	nop
    83e8:	200016f0 	.word	0x200016f0

000083ec <nrf_usbd_epin_dma_handler>:
{
    83ec:	b508      	push	{r3, lr}
    m_dma_pending = false;
    83ee:	4b0c      	ldr	r3, [pc, #48]	; (8420 <nrf_usbd_epin_dma_handler+0x34>)
    83f0:	2200      	movs	r2, #0
    83f2:	701a      	strb	r2, [r3, #0]
{
    83f4:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    83f6:	f7ff febb 	bl	8170 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    83fa:	7b83      	ldrb	r3, [r0, #14]
    83fc:	2b03      	cmp	r3, #3
    83fe:	d10a      	bne.n	8416 <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8400:	4608      	mov	r0, r1
    8402:	f003 fc7e 	bl	bd02 <ep2bit>
    8406:	2301      	movs	r3, #1
    8408:	fa03 f000 	lsl.w	r0, r3, r0
    840c:	43c0      	mvns	r0, r0
}
    840e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8412:	f7ff bfdb 	b.w	83cc <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    8416:	6803      	ldr	r3, [r0, #0]
    8418:	2b00      	cmp	r3, #0
    841a:	d0f1      	beq.n	8400 <nrf_usbd_epin_dma_handler+0x14>
}
    841c:	bd08      	pop	{r3, pc}
    841e:	bf00      	nop
    8420:	200019e0 	.word	0x200019e0

00008424 <nrf_usbd_ep0in_dma_handler>:
    m_dma_pending = false;
    8424:	4b08      	ldr	r3, [pc, #32]	; (8448 <nrf_usbd_ep0in_dma_handler+0x24>)
    8426:	2200      	movs	r2, #0
    8428:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    842a:	4b08      	ldr	r3, [pc, #32]	; (844c <nrf_usbd_ep0in_dma_handler+0x28>)
    842c:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    8430:	2a03      	cmp	r2, #3
    8432:	d103      	bne.n	843c <nrf_usbd_ep0in_dma_handler+0x18>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8434:	f06f 0001 	mvn.w	r0, #1
    8438:	f7ff bfc8 	b.w	83cc <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    843c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8440:	2b00      	cmp	r3, #0
    8442:	d0f7      	beq.n	8434 <nrf_usbd_ep0in_dma_handler+0x10>
}
    8444:	4770      	bx	lr
    8446:	bf00      	nop
    8448:	200019e0 	.word	0x200019e0
    844c:	20001764 	.word	0x20001764

00008450 <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
    8450:	2201      	movs	r2, #1
{
    8452:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    8454:	fa02 f501 	lsl.w	r5, r2, r1
    8458:	491c      	ldr	r1, [pc, #112]	; (84cc <usbd_ep_data_handler+0x7c>)
    845a:	4e1d      	ldr	r6, [pc, #116]	; (84d0 <usbd_ep_data_handler+0x80>)
    845c:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    845e:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    8462:	ea43 0305 	orr.w	r3, r3, r5
{
    8466:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    8468:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    846a:	d024      	beq.n	84b6 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    846c:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8470:	4b18      	ldr	r3, [pc, #96]	; (84d4 <usbd_ep_data_handler+0x84>)
    8472:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    8476:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    847a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    847e:	681a      	ldr	r2, [r3, #0]
    if (ret)
    8480:	b132      	cbz	r2, 8490 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    8482:	2200      	movs	r2, #0
    8484:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    8486:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    8488:	681b      	ldr	r3, [r3, #0]
    848a:	d011      	beq.n	84b0 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    848c:	f7ff ffae 	bl	83ec <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    8490:	6831      	ldr	r1, [r6, #0]
    8492:	4029      	ands	r1, r5
    8494:	d10a      	bne.n	84ac <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8496:	2306      	movs	r3, #6
    8498:	f88d 3004 	strb.w	r3, [sp, #4]
    849c:	f88d 4006 	strb.w	r4, [sp, #6]
    84a0:	f88d 1007 	strb.w	r1, [sp, #7]
            m_event_handler(&evt);
    84a4:	4b0c      	ldr	r3, [pc, #48]	; (84d8 <usbd_ep_data_handler+0x88>)
    84a6:	a801      	add	r0, sp, #4
    84a8:	681b      	ldr	r3, [r3, #0]
    84aa:	4798      	blx	r3
}
    84ac:	b002      	add	sp, #8
    84ae:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    84b0:	f7ff ffb8 	bl	8424 <nrf_usbd_ep0in_dma_handler>
    84b4:	e7ec      	b.n	8490 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    84b6:	6833      	ldr	r3, [r6, #0]
    84b8:	421d      	tst	r5, r3
    84ba:	d1f7      	bne.n	84ac <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    84bc:	2306      	movs	r3, #6
    84be:	f88d 3004 	strb.w	r3, [sp, #4]
    84c2:	f88d 0006 	strb.w	r0, [sp, #6]
    84c6:	f88d 2007 	strb.w	r2, [sp, #7]
    84ca:	e7eb      	b.n	84a4 <usbd_ep_data_handler+0x54>
    84cc:	20001760 	.word	0x20001760
    84d0:	200016f0 	.word	0x200016f0
    84d4:	0000cb60 	.word	0x0000cb60
    84d8:	20001884 	.word	0x20001884

000084dc <ev_setup_data_handler>:
{
    84dc:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    84de:	4b05      	ldr	r3, [pc, #20]	; (84f4 <ev_setup_data_handler+0x18>)
    84e0:	781a      	ldrb	r2, [r3, #0]
    84e2:	4610      	mov	r0, r2
    84e4:	f003 fc0d 	bl	bd02 <ep2bit>
}
    84e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    84ec:	4601      	mov	r1, r0
    84ee:	4610      	mov	r0, r2
    84f0:	f7ff bfae 	b.w	8450 <usbd_ep_data_handler>
    84f4:	200019e2 	.word	0x200019e2

000084f8 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    84f8:	b507      	push	{r0, r1, r2, lr}
    m_dma_pending = false;
    84fa:	4b0e      	ldr	r3, [pc, #56]	; (8534 <ev_dma_epout8_handler+0x3c>)
    84fc:	2200      	movs	r2, #0
    84fe:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8500:	4b0d      	ldr	r3, [pc, #52]	; (8538 <ev_dma_epout8_handler+0x40>)
    8502:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    8506:	2a03      	cmp	r2, #3
    8508:	d010      	beq.n	852c <ev_dma_epout8_handler+0x34>
    else if (p_state->handler.consumer == NULL)
    850a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    850e:	b96b      	cbnz	r3, 852c <ev_dma_epout8_handler+0x34>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8510:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    8514:	f7ff ff5a 	bl	83cc <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8518:	2306      	movs	r3, #6
    851a:	f88d 3004 	strb.w	r3, [sp, #4]
    851e:	2308      	movs	r3, #8
    8520:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    8524:	4b05      	ldr	r3, [pc, #20]	; (853c <ev_dma_epout8_handler+0x44>)
    8526:	a801      	add	r0, sp, #4
    8528:	681b      	ldr	r3, [r3, #0]
    852a:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    852c:	b003      	add	sp, #12
    852e:	f85d fb04 	ldr.w	pc, [sp], #4
    8532:	bf00      	nop
    8534:	200019e0 	.word	0x200019e0
    8538:	20001764 	.word	0x20001764
    853c:	20001884 	.word	0x20001884

00008540 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    8540:	b507      	push	{r0, r1, r2, lr}
    m_dma_pending = false;
    8542:	4b11      	ldr	r3, [pc, #68]	; (8588 <ev_dma_epin8_handler+0x48>)
    8544:	2200      	movs	r2, #0
    8546:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8548:	4b10      	ldr	r3, [pc, #64]	; (858c <ev_dma_epin8_handler+0x4c>)
    854a:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    854e:	2a03      	cmp	r2, #3
    8550:	d106      	bne.n	8560 <ev_dma_epin8_handler+0x20>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8552:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    8556:	b003      	add	sp, #12
    8558:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    855c:	f7ff bf36 	b.w	83cc <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    8560:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    8564:	b96b      	cbnz	r3, 8582 <ev_dma_epin8_handler+0x42>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8566:	f46f 7080 	mvn.w	r0, #256	; 0x100
    856a:	f7ff ff2f 	bl	83cc <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    856e:	2306      	movs	r3, #6
    8570:	f88d 3004 	strb.w	r3, [sp, #4]
    8574:	2388      	movs	r3, #136	; 0x88
    8576:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    857a:	4b05      	ldr	r3, [pc, #20]	; (8590 <ev_dma_epin8_handler+0x50>)
    857c:	a801      	add	r0, sp, #4
    857e:	681b      	ldr	r3, [r3, #0]
    8580:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    8582:	b003      	add	sp, #12
    8584:	f85d fb04 	ldr.w	pc, [sp], #4
    8588:	200019e0 	.word	0x200019e0
    858c:	20001764 	.word	0x20001764
    8590:	20001884 	.word	0x20001884

00008594 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    8594:	4a02      	ldr	r2, [pc, #8]	; (85a0 <nrfx_usbd_uninit+0xc>)
    8596:	2300      	movs	r3, #0
    8598:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    859a:	4a02      	ldr	r2, [pc, #8]	; (85a4 <nrfx_usbd_uninit+0x10>)
    859c:	7013      	strb	r3, [r2, #0]
    return;
}
    859e:	4770      	bx	lr
    85a0:	20001884 	.word	0x20001884
    85a4:	200019e1 	.word	0x200019e1

000085a8 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    85a8:	b570      	push	{r4, r5, r6, lr}
    p_reg->EVENTCAUSE = flags;
    85aa:	4c1c      	ldr	r4, [pc, #112]	; (861c <nrfx_usbd_enable+0x74>)
    85ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
    85b0:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    85b4:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    /* Prepare for READY event receiving */
    nrf_usbd_eventcause_clear(NRF_USBD, NRF_USBD_EVENTCAUSE_READY_MASK);

    usbd_enable();
    85b8:	f7ff fec6 	bl	8348 <usbd_enable>
}

/* Errata: Unexpected behavior after reset. **/
static inline bool nrfx_usbd_errata_223(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_223();
    85bc:	f003 fb5b 	bl	bc76 <nrf52_errata_187>

    if (nrfx_usbd_errata_223() && m_first_enable)
    85c0:	b150      	cbz	r0, 85d8 <nrfx_usbd_enable+0x30>
    85c2:	4d17      	ldr	r5, [pc, #92]	; (8620 <nrfx_usbd_enable+0x78>)
    85c4:	782b      	ldrb	r3, [r5, #0]
    85c6:	b13b      	cbz	r3, 85d8 <nrfx_usbd_enable+0x30>
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    85c8:	2600      	movs	r6, #0
    85ca:	f8c4 6500 	str.w	r6, [r4, #1280]	; 0x500
    (void) p_reg->ENABLE;
    85ce:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
    {
         nrf_usbd_disable(NRF_USBD);

         usbd_enable();
    85d2:	f7ff feb9 	bl	8348 <usbd_enable>

         m_first_enable = false;
    85d6:	702e      	strb	r6, [r5, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    85d8:	f003 fb4d 	bl	bc76 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    85dc:	b108      	cbz	r0, 85e2 <nrfx_usbd_enable+0x3a>
#endif
    {
        usbd_errata_187_211_begin();
    85de:	f7ff fe39 	bl	8254 <usbd_errata_187_211_begin>
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    85e2:	4a0e      	ldr	r2, [pc, #56]	; (861c <nrfx_usbd_enable+0x74>)
    85e4:	2380      	movs	r3, #128	; 0x80
    85e6:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    85ea:	2300      	movs	r3, #0
    85ec:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    85f0:	4a0c      	ldr	r2, [pc, #48]	; (8624 <nrfx_usbd_enable+0x7c>)
    85f2:	f240 11ff 	movw	r1, #511	; 0x1ff
    85f6:	6011      	str	r1, [r2, #0]
    m_ep_dma_waiting = 0;
    85f8:	4a0b      	ldr	r2, [pc, #44]	; (8628 <nrfx_usbd_enable+0x80>)
    85fa:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    85fc:	4a0b      	ldr	r2, [pc, #44]	; (862c <nrfx_usbd_enable+0x84>)
    85fe:	7013      	strb	r3, [r2, #0]
    usbd_dma_pending_clear();
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    8600:	4a0b      	ldr	r2, [pc, #44]	; (8630 <nrfx_usbd_enable+0x88>)
    8602:	7013      	strb	r3, [r2, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    8604:	4b0b      	ldr	r3, [pc, #44]	; (8634 <nrfx_usbd_enable+0x8c>)
    8606:	2202      	movs	r2, #2
    8608:	701a      	strb	r2, [r3, #0]
    860a:	f003 fb34 	bl	bc76 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    860e:	b118      	cbz	r0, 8618 <nrfx_usbd_enable+0x70>
#endif
    {
        usbd_errata_187_211_end();
    }
}
    8610:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        usbd_errata_187_211_end();
    8614:	f7ff be3e 	b.w	8294 <usbd_errata_187_211_end>
}
    8618:	bd70      	pop	{r4, r5, r6, pc}
    861a:	bf00      	nop
    861c:	40027000 	.word	0x40027000
    8620:	200000f8 	.word	0x200000f8
    8624:	20001760 	.word	0x20001760
    8628:	200016f0 	.word	0x200016f0
    862c:	200019e0 	.word	0x200019e0
    8630:	200019e2 	.word	0x200019e2
    8634:	200019e1 	.word	0x200019e1

00008638 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    8638:	4b0a      	ldr	r3, [pc, #40]	; (8664 <nrfx_usbd_start+0x2c>)
    863a:	2200      	movs	r2, #0
{
    863c:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    863e:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    8640:	4a09      	ldr	r2, [pc, #36]	; (8668 <nrfx_usbd_start+0x30>)
    8642:	4b0a      	ldr	r3, [pc, #40]	; (866c <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    8644:	4c0a      	ldr	r4, [pc, #40]	; (8670 <nrfx_usbd_start+0x38>)
    8646:	2800      	cmp	r0, #0
    8648:	bf18      	it	ne
    864a:	4613      	movne	r3, r2
    864c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    8650:	2027      	movs	r0, #39	; 0x27
    8652:	f7fa fee7 	bl	3424 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    8656:	2301      	movs	r3, #1
    8658:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    865c:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    8660:	bd10      	pop	{r4, pc}
    8662:	bf00      	nop
    8664:	200019df 	.word	0x200019df
    8668:	01e01407 	.word	0x01e01407
    866c:	01c01407 	.word	0x01c01407
    8670:	40027000 	.word	0x40027000

00008674 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    8674:	4b03      	ldr	r3, [pc, #12]	; (8684 <nrfx_usbd_is_enabled+0x10>)
    8676:	7818      	ldrb	r0, [r3, #0]
}
    8678:	2801      	cmp	r0, #1
    867a:	bf94      	ite	ls
    867c:	2000      	movls	r0, #0
    867e:	2001      	movhi	r0, #1
    8680:	4770      	bx	lr
    8682:	bf00      	nop
    8684:	200019e1 	.word	0x200019e1

00008688 <nrfx_usbd_init>:
{
    8688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    868c:	4b1d      	ldr	r3, [pc, #116]	; (8704 <nrfx_usbd_init+0x7c>)
    868e:	781c      	ldrb	r4, [r3, #0]
    8690:	2c00      	cmp	r4, #0
    8692:	d135      	bne.n	8700 <nrfx_usbd_init+0x78>
    m_event_handler = event_handler;
    8694:	4a1c      	ldr	r2, [pc, #112]	; (8708 <nrfx_usbd_init+0x80>)
    8696:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    8698:	2201      	movs	r2, #1
    869a:	701a      	strb	r2, [r3, #0]
    869c:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    869e:	f240 18ff 	movw	r8, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    86a2:	4627      	mov	r7, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    86a4:	f065 067f 	orn	r6, r5, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    86a8:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    86ac:	b2f6      	uxtb	r6, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    86ae:	bf14      	ite	ne
    86b0:	4641      	movne	r1, r8
    86b2:	2140      	moveq	r1, #64	; 0x40
    86b4:	4630      	mov	r0, r6
    86b6:	f003 fb45 	bl	bd44 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    86ba:	4630      	mov	r0, r6
    86bc:	f7ff fd58 	bl	8170 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    86c0:	3501      	adds	r5, #1
    86c2:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
    86c4:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
    86c6:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
    86c8:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    86ca:	d1eb      	bne.n	86a4 <nrfx_usbd_init+0x1c>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    86cc:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
    86ce:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    86d0:	f240 16ff 	movw	r6, #511	; 0x1ff
    86d4:	4620      	mov	r0, r4
    86d6:	f003 fb35 	bl	bd44 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    86da:	4620      	mov	r0, r4
    86dc:	f7ff fd48 	bl	8170 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    86e0:	3401      	adds	r4, #1
    86e2:	b2e4      	uxtb	r4, r4
    86e4:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    86e6:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    86e8:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    86ea:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    86ec:	d102      	bne.n	86f4 <nrfx_usbd_init+0x6c>
    return NRFX_SUCCESS;
    86ee:	4807      	ldr	r0, [pc, #28]	; (870c <nrfx_usbd_init+0x84>)
}
    86f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    86f4:	f014 0f08 	tst.w	r4, #8
    86f8:	bf14      	ite	ne
    86fa:	4631      	movne	r1, r6
    86fc:	2140      	moveq	r1, #64	; 0x40
    86fe:	e7e9      	b.n	86d4 <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
    8700:	4803      	ldr	r0, [pc, #12]	; (8710 <nrfx_usbd_init+0x88>)
    8702:	e7f5      	b.n	86f0 <nrfx_usbd_init+0x68>
    8704:	200019e1 	.word	0x200019e1
    8708:	20001884 	.word	0x20001884
    870c:	0bad0000 	.word	0x0bad0000
    8710:	0bad0005 	.word	0x0bad0005

00008714 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    8714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8718:	4605      	mov	r5, r0
	__asm__ volatile(
    871a:	f04f 0320 	mov.w	r3, #32
    871e:	f3ef 8811 	mrs	r8, BASEPRI
    8722:	f383 8812 	msr	BASEPRI_MAX, r3
    8726:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    872a:	f010 040f 	ands.w	r4, r0, #15
    872e:	d103      	bne.n	8738 <nrfx_usbd_ep_transfer+0x24>
    8730:	4b27      	ldr	r3, [pc, #156]	; (87d0 <nrfx_usbd_ep_transfer+0xbc>)
    8732:	781b      	ldrb	r3, [r3, #0]
    8734:	4283      	cmp	r3, r0
    8736:	d146      	bne.n	87c6 <nrfx_usbd_ep_transfer+0xb2>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    8738:	4b26      	ldr	r3, [pc, #152]	; (87d4 <nrfx_usbd_ep_transfer+0xc0>)
    873a:	4f27      	ldr	r7, [pc, #156]	; (87d8 <nrfx_usbd_ep_transfer+0xc4>)
    873c:	681a      	ldr	r2, [r3, #0]
    873e:	683e      	ldr	r6, [r7, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
    8740:	4628      	mov	r0, r5
    8742:	f003 fade 	bl	bd02 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    8746:	43d2      	mvns	r2, r2
    8748:	b292      	uxth	r2, r2
    874a:	f04f 0901 	mov.w	r9, #1
    874e:	4332      	orrs	r2, r6
    8750:	fa09 f900 	lsl.w	r9, r9, r0
    8754:	ea12 0f09 	tst.w	r2, r9
    8758:	d137      	bne.n	87ca <nrfx_usbd_ep_transfer+0xb6>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    875a:	4628      	mov	r0, r5
    875c:	f7ff fd08 	bl	8170 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    8760:	220c      	movs	r2, #12
    8762:	4354      	muls	r4, r2
        if (NRF_USBD_EPIN_CHECK(ep))
    8764:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    8766:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
    8768:	d529      	bpl.n	87be <nrfx_usbd_ep_transfer+0xaa>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    876a:	4a1c      	ldr	r2, [pc, #112]	; (87dc <nrfx_usbd_ep_transfer+0xc8>)
    876c:	6808      	ldr	r0, [r1, #0]
    876e:	4414      	add	r4, r2
    8770:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    8774:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    8776:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    877a:	f002 0201 	and.w	r2, r2, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    877e:	d119      	bne.n	87b4 <nrfx_usbd_ep_transfer+0xa0>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    8780:	b9b2      	cbnz	r2, 87b0 <nrfx_usbd_ep_transfer+0x9c>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    8782:	4a17      	ldr	r2, [pc, #92]	; (87e0 <nrfx_usbd_ep_transfer+0xcc>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    8784:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
    8786:	c907      	ldmia	r1, {r0, r1, r2}
    8788:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
    878c:	2200      	movs	r2, #0
    878e:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    8790:	739a      	strb	r2, [r3, #14]
        p_state->p_context = p_context;
    8792:	605c      	str	r4, [r3, #4]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8794:	4b13      	ldr	r3, [pc, #76]	; (87e4 <nrfx_usbd_ep_transfer+0xd0>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
    8796:	4814      	ldr	r0, [pc, #80]	; (87e8 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    8798:	ea46 0609 	orr.w	r6, r6, r9
    879c:	2280      	movs	r2, #128	; 0x80
    879e:	603e      	str	r6, [r7, #0]
    87a0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    87a4:	f388 8811 	msr	BASEPRI, r8
    87a8:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    87ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    87b0:	4a0e      	ldr	r2, [pc, #56]	; (87ec <nrfx_usbd_ep_transfer+0xd8>)
    87b2:	e7e7      	b.n	8784 <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    87b4:	b90a      	cbnz	r2, 87ba <nrfx_usbd_ep_transfer+0xa6>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    87b6:	4a0e      	ldr	r2, [pc, #56]	; (87f0 <nrfx_usbd_ep_transfer+0xdc>)
    87b8:	e7e4      	b.n	8784 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    87ba:	4a0e      	ldr	r2, [pc, #56]	; (87f4 <nrfx_usbd_ep_transfer+0xe0>)
    87bc:	e7e2      	b.n	8784 <nrfx_usbd_ep_transfer+0x70>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    87be:	4a0e      	ldr	r2, [pc, #56]	; (87f8 <nrfx_usbd_ep_transfer+0xe4>)
    87c0:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    87c2:	4a0e      	ldr	r2, [pc, #56]	; (87fc <nrfx_usbd_ep_transfer+0xe8>)
    87c4:	e7de      	b.n	8784 <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_INVALID_ADDR;
    87c6:	480e      	ldr	r0, [pc, #56]	; (8800 <nrfx_usbd_ep_transfer+0xec>)
    87c8:	e7ec      	b.n	87a4 <nrfx_usbd_ep_transfer+0x90>
        ret = NRFX_ERROR_BUSY;
    87ca:	480e      	ldr	r0, [pc, #56]	; (8804 <nrfx_usbd_ep_transfer+0xf0>)
    87cc:	e7ea      	b.n	87a4 <nrfx_usbd_ep_transfer+0x90>
    87ce:	bf00      	nop
    87d0:	200019e2 	.word	0x200019e2
    87d4:	20001760 	.word	0x20001760
    87d8:	200016f0 	.word	0x200016f0
    87dc:	200016f4 	.word	0x200016f4
    87e0:	0000bcb7 	.word	0x0000bcb7
    87e4:	e000e100 	.word	0xe000e100
    87e8:	0bad0000 	.word	0x0bad0000
    87ec:	0000bcd9 	.word	0x0000bcd9
    87f0:	000082d5 	.word	0x000082d5
    87f4:	0000830d 	.word	0x0000830d
    87f8:	20001684 	.word	0x20001684
    87fc:	0000bc89 	.word	0x0000bc89
    8800:	0bad000a 	.word	0x0bad000a
    8804:	0bad000b 	.word	0x0bad000b

00008808 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    8808:	f010 0f08 	tst.w	r0, #8
    880c:	4b07      	ldr	r3, [pc, #28]	; (882c <nrfx_usbd_epout_size_get+0x24>)
    880e:	d006      	beq.n	881e <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    8810:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    8814:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    8818:	bf18      	it	ne
    881a:	2000      	movne	r0, #0
    881c:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    881e:	f000 000f 	and.w	r0, r0, #15
    8822:	f500 7094 	add.w	r0, r0, #296	; 0x128
    8826:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    882a:	4770      	bx	lr
    882c:	40027000 	.word	0x40027000

00008830 <usbd_dmareq_process>:
{
    8830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    8834:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8984 <usbd_dmareq_process+0x154>
    8838:	f898 3000 	ldrb.w	r3, [r8]
{
    883c:	b085      	sub	sp, #20
    if (!m_dma_pending)
    883e:	2b00      	cmp	r3, #0
    8840:	d164      	bne.n	890c <usbd_dmareq_process+0xdc>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    8842:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8988 <usbd_dmareq_process+0x158>
    8846:	4e51      	ldr	r6, [pc, #324]	; (898c <usbd_dmareq_process+0x15c>)
    8848:	f8d9 1000 	ldr.w	r1, [r9]
    884c:	6833      	ldr	r3, [r6, #0]
    884e:	4019      	ands	r1, r3
    8850:	d05c      	beq.n	890c <usbd_dmareq_process+0xdc>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    8852:	f011 2301 	ands.w	r3, r1, #16777472	; 0x1000100
    return NRF_CTZ(req);
    8856:	bf14      	ite	ne
    8858:	fa93 f1a3 	rbitne	r1, r3
    885c:	fa91 f1a1 	rbiteq	r1, r1
    8860:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8864:	290f      	cmp	r1, #15
    8866:	bf8a      	itet	hi
    8868:	f1a1 0410 	subhi.w	r4, r1, #16
    886c:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
    8870:	b2e4      	uxtbhi	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    8872:	4620      	mov	r0, r4
    8874:	f7ff fc7c 	bl	8170 <ep_state_access>
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8878:	f04f 0b01 	mov.w	fp, #1
            if (NRF_USBD_EPIN_CHECK(ep))
    887c:	fa4f fa84 	sxtb.w	sl, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8880:	fa0b f101 	lsl.w	r1, fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
    8884:	f1ba 0f00 	cmp.w	sl, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
    8888:	4605      	mov	r5, r0
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    888a:	ea6f 0b01 	mvn.w	fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
    888e:	da40      	bge.n	8912 <usbd_dmareq_process+0xe2>
                continue_transfer = p_state->handler.feeder(
    8890:	6803      	ldr	r3, [r0, #0]
    8892:	8982      	ldrh	r2, [r0, #12]
    8894:	6841      	ldr	r1, [r0, #4]
    8896:	a802      	add	r0, sp, #8
    8898:	4798      	blx	r3
                if (!continue_transfer)
    889a:	b900      	cbnz	r0, 889e <usbd_dmareq_process+0x6e>
                    p_state->handler.consumer = NULL;
    889c:	6028      	str	r0, [r5, #0]
    m_dma_pending = true;
    889e:	2301      	movs	r3, #1
            m_ep_ready &= ~(1U << pos);
    88a0:	6831      	ldr	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
    88a2:	9a03      	ldr	r2, [sp, #12]
    m_dma_pending = true;
    88a4:	f888 3000 	strb.w	r3, [r8]
            p_state->transfer_cnt += transfer.size;
    88a8:	68ab      	ldr	r3, [r5, #8]
            m_ep_ready &= ~(1U << pos);
    88aa:	ea01 010b 	and.w	r1, r1, fp
            p_state->transfer_cnt += transfer.size;
    88ae:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
    88b0:	f1ba 0f00 	cmp.w	sl, #0
            m_ep_ready &= ~(1U << pos);
    88b4:	6031      	str	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
    88b6:	60ab      	str	r3, [r5, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    88b8:	f004 0008 	and.w	r0, r4, #8
    88bc:	9902      	ldr	r1, [sp, #8]
    88be:	4b34      	ldr	r3, [pc, #208]	; (8990 <usbd_dmareq_process+0x160>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    88c0:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    88c4:	da4f      	bge.n	8966 <usbd_dmareq_process+0x136>
        if (NRF_USBD_EPISO_CHECK(ep))
    88c6:	2800      	cmp	r0, #0
    88c8:	d045      	beq.n	8956 <usbd_dmareq_process+0x126>
            p_reg->ISOIN.PTR    = ptr;
    88ca:	f8c3 16a0 	str.w	r1, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    88ce:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    88d2:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    88d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    88d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    88dc:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    88e0:	2201      	movs	r2, #1
    88e2:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    88e4:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    88e6:	4a2b      	ldr	r2, [pc, #172]	; (8994 <usbd_dmareq_process+0x164>)
    88e8:	4b2b      	ldr	r3, [pc, #172]	; (8998 <usbd_dmareq_process+0x168>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    88ea:	4929      	ldr	r1, [pc, #164]	; (8990 <usbd_dmareq_process+0x160>)
    88ec:	ea13 032a 	ands.w	r3, r3, sl, asr #32
    88f0:	bf38      	it	cc
    88f2:	4613      	movcc	r3, r2
    88f4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    88f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    88fc:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8900:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    8902:	b91a      	cbnz	r2, 890c <usbd_dmareq_process+0xdc>
    8904:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    8908:	2a00      	cmp	r2, #0
    890a:	d0f9      	beq.n	8900 <usbd_dmareq_process+0xd0>
}
    890c:	b005      	add	sp, #20
    890e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    8912:	4620      	mov	r0, r4
    8914:	f7ff ff78 	bl	8808 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    8918:	89aa      	ldrh	r2, [r5, #12]
    891a:	6869      	ldr	r1, [r5, #4]
    891c:	f8d5 c000 	ldr.w	ip, [r5]
    8920:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    8922:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
    8924:	a802      	add	r0, sp, #8
    8926:	47e0      	blx	ip
                if (transfer.p_data.rx == NULL)
    8928:	9a02      	ldr	r2, [sp, #8]
    892a:	2a00      	cmp	r2, #0
    892c:	d0b5      	beq.n	889a <usbd_dmareq_process+0x6a>
                else if (transfer.size < rx_size)
    892e:	9a03      	ldr	r2, [sp, #12]
    8930:	4297      	cmp	r7, r2
    8932:	d9b2      	bls.n	889a <usbd_dmareq_process+0x6a>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    8934:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8936:	4658      	mov	r0, fp
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    8938:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    893a:	f7ff fd47 	bl	83cc <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    893e:	2306      	movs	r3, #6
    8940:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    8944:	4b15      	ldr	r3, [pc, #84]	; (899c <usbd_dmareq_process+0x16c>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    8946:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    894a:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    894c:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    8950:	a801      	add	r0, sp, #4
    8952:	4798      	blx	r3
                    continue;
    8954:	e778      	b.n	8848 <usbd_dmareq_process+0x18>
            p_reg->EPIN[epnr].PTR    = ptr;
    8956:	2014      	movs	r0, #20
    8958:	fb00 3304 	mla	r3, r0, r4, r3
    895c:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    8960:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    8964:	e7b5      	b.n	88d2 <usbd_dmareq_process+0xa2>
        if (NRF_USBD_EPISO_CHECK(ep))
    8966:	b128      	cbz	r0, 8974 <usbd_dmareq_process+0x144>
            p_reg->ISOOUT.PTR    = ptr;
    8968:	f8c3 17a0 	str.w	r1, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    896c:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
    8970:	2328      	movs	r3, #40	; 0x28
    8972:	e7af      	b.n	88d4 <usbd_dmareq_process+0xa4>
            p_reg->EPOUT[epnr].PTR    = ptr;
    8974:	2014      	movs	r0, #20
    8976:	fb00 3304 	mla	r3, r0, r4, r3
    897a:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    897e:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    8982:	e7f5      	b.n	8970 <usbd_dmareq_process+0x140>
    8984:	200019e0 	.word	0x200019e0
    8988:	200016f0 	.word	0x200016f0
    898c:	20001760 	.word	0x20001760
    8990:	40027000 	.word	0x40027000
    8994:	0000cb72 	.word	0x0000cb72
    8998:	0000cb60 	.word	0x0000cb60
    899c:	20001884 	.word	0x20001884

000089a0 <ev_epdata_handler>:
{
    89a0:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
    89a2:	4b0f      	ldr	r3, [pc, #60]	; (89e0 <ev_epdata_handler+0x40>)
    89a4:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    89a8:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
    89ac:	2501      	movs	r5, #1
    while (dataepstatus)
    89ae:	b91c      	cbnz	r4, 89b8 <ev_epdata_handler+0x18>
}
    89b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    89b4:	f7ff bf3c 	b.w	8830 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    89b8:	fa94 f3a4 	rbit	r3, r4
    89bc:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    89c0:	2b0f      	cmp	r3, #15
    89c2:	bfc8      	it	gt
    89c4:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    89c8:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    89ca:	bfd4      	ite	le
    89cc:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    89d0:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    89d2:	fa05 f303 	lsl.w	r3, r5, r3
    89d6:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    89da:	f7ff fd39 	bl	8450 <usbd_ep_data_handler>
    89de:	e7e6      	b.n	89ae <ev_epdata_handler+0xe>
    89e0:	40027000 	.word	0x40027000

000089e4 <nrf_usbd_epout_dma_handler>:
    m_dma_pending = false;
    89e4:	4b17      	ldr	r3, [pc, #92]	; (8a44 <nrf_usbd_epout_dma_handler+0x60>)
{
    89e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    m_dma_pending = false;
    89e8:	2200      	movs	r2, #0
    89ea:	701a      	strb	r2, [r3, #0]
{
    89ec:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    89ee:	f7ff fbbf 	bl	8170 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    89f2:	7b83      	ldrb	r3, [r0, #14]
    89f4:	2b03      	cmp	r3, #3
    89f6:	d10d      	bne.n	8a14 <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    89f8:	4620      	mov	r0, r4
    89fa:	f003 f982 	bl	bd02 <ep2bit>
    89fe:	2301      	movs	r3, #1
    8a00:	fa03 f000 	lsl.w	r0, r3, r0
    8a04:	43c0      	mvns	r0, r0
    8a06:	f7ff fce1 	bl	83cc <atomic_and.constprop.0.isra.0>
}
    8a0a:	b003      	add	sp, #12
    8a0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    8a10:	f7ff bf0e 	b.w	8830 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    8a14:	6805      	ldr	r5, [r0, #0]
    8a16:	2d00      	cmp	r5, #0
    8a18:	d1f7      	bne.n	8a0a <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8a1a:	4620      	mov	r0, r4
    8a1c:	f003 f971 	bl	bd02 <ep2bit>
    8a20:	2301      	movs	r3, #1
    8a22:	fa03 f000 	lsl.w	r0, r3, r0
    8a26:	43c0      	mvns	r0, r0
    8a28:	f7ff fcd0 	bl	83cc <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8a2c:	2306      	movs	r3, #6
    8a2e:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    8a32:	4b05      	ldr	r3, [pc, #20]	; (8a48 <nrf_usbd_epout_dma_handler+0x64>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8a34:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    8a38:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8a3a:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    8a3e:	a801      	add	r0, sp, #4
    8a40:	4798      	blx	r3
    8a42:	e7e2      	b.n	8a0a <nrf_usbd_epout_dma_handler+0x26>
    8a44:	200019e0 	.word	0x200019e0
    8a48:	20001884 	.word	0x20001884

00008a4c <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    8a4c:	4b02      	ldr	r3, [pc, #8]	; (8a58 <nrfx_usbd_ep_stall+0xc>)
    8a4e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    8a52:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    8a56:	4770      	bx	lr
    8a58:	40027000 	.word	0x40027000

00008a5c <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    8a5c:	0702      	lsls	r2, r0, #28
    8a5e:	d413      	bmi.n	8a88 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    8a60:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    8a64:	f010 0f80 	tst.w	r0, #128	; 0x80
    8a68:	4a08      	ldr	r2, [pc, #32]	; (8a8c <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    8a6a:	bf0b      	itete	eq
    8a6c:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    8a70:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    8a74:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    8a78:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    8a7c:	bf08      	it	eq
    8a7e:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    8a80:	1e43      	subs	r3, r0, #1
    8a82:	4258      	negs	r0, r3
    8a84:	4158      	adcs	r0, r3
    8a86:	4770      	bx	lr
        return false;
    8a88:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    8a8a:	4770      	bx	lr
    8a8c:	40027000 	.word	0x40027000

00008a90 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    8a90:	4b04      	ldr	r3, [pc, #16]	; (8aa4 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    8a92:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    8a96:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    8a9a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    8a9e:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    8aa2:	4770      	bx	lr
    8aa4:	40027000 	.word	0x40027000

00008aa8 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    8aa8:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    8aaa:	2208      	movs	r2, #8
    8aac:	2100      	movs	r1, #0
{
    8aae:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    8ab0:	f002 fd52 	bl	b558 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    8ab4:	4b0e      	ldr	r3, [pc, #56]	; (8af0 <nrfx_usbd_setup_get+0x48>)
    8ab6:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    8aba:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    8abc:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    8ac0:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    8ac2:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    8ac6:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    8aca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    8ace:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    8ad0:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    8ad4:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    8ad8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    8adc:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    8ade:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    8ae2:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    8ae6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    8aea:	80e3      	strh	r3, [r4, #6]
}
    8aec:	bd10      	pop	{r4, pc}
    8aee:	bf00      	nop
    8af0:	40027000 	.word	0x40027000

00008af4 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8af4:	4b02      	ldr	r3, [pc, #8]	; (8b00 <nrfx_usbd_setup_data_clear+0xc>)
    8af6:	2201      	movs	r2, #1
    8af8:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    8afc:	4770      	bx	lr
    8afe:	bf00      	nop
    8b00:	40027000 	.word	0x40027000

00008b04 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    8b04:	b513      	push	{r0, r1, r4, lr}
    m_dma_pending = false;
    8b06:	4b12      	ldr	r3, [pc, #72]	; (8b50 <ev_dma_epout0_handler+0x4c>)
    8b08:	2200      	movs	r2, #0
    8b0a:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8b0c:	4b11      	ldr	r3, [pc, #68]	; (8b54 <ev_dma_epout0_handler+0x50>)
    8b0e:	7b9a      	ldrb	r2, [r3, #14]
    8b10:	2a03      	cmp	r2, #3
    8b12:	d106      	bne.n	8b22 <ev_dma_epout0_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8b14:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    8b18:	b002      	add	sp, #8
    8b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8b1e:	f7ff bc55 	b.w	83cc <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    8b22:	681c      	ldr	r4, [r3, #0]
    8b24:	b974      	cbnz	r4, 8b44 <ev_dma_epout0_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8b26:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    8b2a:	f7ff fc4f 	bl	83cc <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8b2e:	2306      	movs	r3, #6
    8b30:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    8b34:	4b08      	ldr	r3, [pc, #32]	; (8b58 <ev_dma_epout0_handler+0x54>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8b36:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    8b3a:	681b      	ldr	r3, [r3, #0]
    8b3c:	a801      	add	r0, sp, #4
    8b3e:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    8b40:	b002      	add	sp, #8
    8b42:	bd10      	pop	{r4, pc}
    8b44:	b002      	add	sp, #8
    8b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    8b4a:	f7ff bfd3 	b.w	8af4 <nrfx_usbd_setup_data_clear>
    8b4e:	bf00      	nop
    8b50:	200019e0 	.word	0x200019e0
    8b54:	20001764 	.word	0x20001764
    8b58:	20001884 	.word	0x20001884

00008b5c <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8b5c:	4b02      	ldr	r3, [pc, #8]	; (8b68 <nrfx_usbd_setup_clear+0xc>)
    8b5e:	2201      	movs	r2, #1
    8b60:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    8b64:	4770      	bx	lr
    8b66:	bf00      	nop
    8b68:	40027000 	.word	0x40027000

00008b6c <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8b6c:	4b02      	ldr	r3, [pc, #8]	; (8b78 <nrfx_usbd_setup_stall+0xc>)
    8b6e:	2201      	movs	r2, #1
    8b70:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    8b74:	4770      	bx	lr
    8b76:	bf00      	nop
    8b78:	40027000 	.word	0x40027000

00008b7c <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    8b7c:	4b01      	ldr	r3, [pc, #4]	; (8b84 <nrfx_usbd_last_setup_dir_get+0x8>)
    8b7e:	7818      	ldrb	r0, [r3, #0]
    8b80:	4770      	bx	lr
    8b82:	bf00      	nop
    8b84:	200019e2 	.word	0x200019e2

00008b88 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    8b88:	b510      	push	{r4, lr}
    8b8a:	4602      	mov	r2, r0
	__asm__ volatile(
    8b8c:	f04f 0320 	mov.w	r3, #32
    8b90:	f3ef 8411 	mrs	r4, BASEPRI
    8b94:	f383 8812 	msr	BASEPRI_MAX, r3
    8b98:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    8b9c:	f003 f8b1 	bl	bd02 <ep2bit>
    8ba0:	490d      	ldr	r1, [pc, #52]	; (8bd8 <nrfx_usbd_transfer_out_drop+0x50>)
    8ba2:	2301      	movs	r3, #1
    8ba4:	fa03 f000 	lsl.w	r0, r3, r0
    8ba8:	680b      	ldr	r3, [r1, #0]
    8baa:	ea23 0300 	bic.w	r3, r3, r0
    8bae:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    8bb0:	f012 0108 	ands.w	r1, r2, #8
    8bb4:	d10a      	bne.n	8bcc <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    8bb6:	f002 030f 	and.w	r3, r2, #15
    8bba:	009b      	lsls	r3, r3, #2
    8bbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8bc0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    8bc4:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    8bc8:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    8bcc:	f384 8811 	msr	BASEPRI, r4
    8bd0:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    8bd4:	bd10      	pop	{r4, pc}
    8bd6:	bf00      	nop
    8bd8:	20001760 	.word	0x20001760

00008bdc <usbd_ep_abort>:
{
    8bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8bde:	4601      	mov	r1, r0
	__asm__ volatile(
    8be0:	f04f 0320 	mov.w	r3, #32
    8be4:	f3ef 8511 	mrs	r5, BASEPRI
    8be8:	f383 8812 	msr	BASEPRI_MAX, r3
    8bec:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    8bf0:	f7ff fabe 	bl	8170 <ep_state_access>
    8bf4:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    8bf6:	4608      	mov	r0, r1
    8bf8:	f003 f883 	bl	bd02 <ep2bit>
    8bfc:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    8bfe:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    8c02:	fa02 f200 	lsl.w	r2, r2, r0
    8c06:	482e      	ldr	r0, [pc, #184]	; (8cc0 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    8c08:	d118      	bne.n	8c3c <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    8c0a:	6803      	ldr	r3, [r0, #0]
    8c0c:	ea32 0403 	bics.w	r4, r2, r3
    8c10:	d00a      	beq.n	8c28 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    8c12:	4608      	mov	r0, r1
    8c14:	f7ff ffb8 	bl	8b88 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    8c18:	2303      	movs	r3, #3
    8c1a:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    8c1c:	f385 8811 	msr	BASEPRI, r5
    8c20:	f3bf 8f6f 	isb	sy
}
    8c24:	b003      	add	sp, #12
    8c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    8c28:	ea23 0302 	bic.w	r3, r3, r2
            p_state->handler.consumer = NULL;
    8c2c:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    8c2e:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    8c30:	4b24      	ldr	r3, [pc, #144]	; (8cc4 <usbd_ep_abort+0xe8>)
    8c32:	6818      	ldr	r0, [r3, #0]
    8c34:	ea20 0002 	bic.w	r0, r0, r2
    8c38:	6018      	str	r0, [r3, #0]
    8c3a:	e7ed      	b.n	8c18 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    8c3c:	070b      	lsls	r3, r1, #28
    8c3e:	d415      	bmi.n	8c6c <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
    8c40:	2980      	cmp	r1, #128	; 0x80
    8c42:	4b21      	ldr	r3, [pc, #132]	; (8cc8 <usbd_ep_abort+0xec>)
    8c44:	d02f      	beq.n	8ca6 <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    8c46:	f001 040f 	and.w	r4, r1, #15
    8c4a:	f204 34da 	addw	r4, r4, #986	; 0x3da
    8c4e:	0064      	lsls	r4, r4, #1
    8c50:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    8c54:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8c58:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    8c5c:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8c5e:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8c62:	433c      	orrs	r4, r7
    8c64:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    8c68:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    8c6c:	4f15      	ldr	r7, [pc, #84]	; (8cc4 <usbd_ep_abort+0xe8>)
    8c6e:	6804      	ldr	r4, [r0, #0]
    8c70:	683b      	ldr	r3, [r7, #0]
    8c72:	ea64 0c03 	orn	ip, r4, r3
    8c76:	ea1c 0f02 	tst.w	ip, r2
    8c7a:	d0cf      	beq.n	8c1c <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    8c7c:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    8c7e:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
    8c82:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    8c84:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    8c86:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    8c88:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    8c8a:	2303      	movs	r3, #3
    8c8c:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    8c8e:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    8c92:	4b0e      	ldr	r3, [pc, #56]	; (8ccc <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    8c94:	f88d 1006 	strb.w	r1, [sp, #6]
    8c98:	2206      	movs	r2, #6
            m_event_handler(&evt);
    8c9a:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    8c9c:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    8ca0:	a801      	add	r0, sp, #4
    8ca2:	4798      	blx	r3
    8ca4:	e7ba      	b.n	8c1c <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    8ca6:	f240 74b4 	movw	r4, #1972	; 0x7b4
    8caa:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    8cae:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8cb2:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    8cb6:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8cb8:	f044 0404 	orr.w	r4, r4, #4
    8cbc:	e7d1      	b.n	8c62 <usbd_ep_abort+0x86>
    8cbe:	bf00      	nop
    8cc0:	200016f0 	.word	0x200016f0
    8cc4:	20001760 	.word	0x20001760
    8cc8:	40027000 	.word	0x40027000
    8ccc:	20001884 	.word	0x20001884

00008cd0 <ev_setup_handler>:
{
    8cd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    8cd2:	4b17      	ldr	r3, [pc, #92]	; (8d30 <ev_setup_handler+0x60>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8cd4:	4c17      	ldr	r4, [pc, #92]	; (8d34 <ev_setup_handler+0x64>)
    8cd6:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    8cda:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    8cdc:	4e16      	ldr	r6, [pc, #88]	; (8d38 <ev_setup_handler+0x68>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8cde:	43da      	mvns	r2, r3
    8ce0:	4b16      	ldr	r3, [pc, #88]	; (8d3c <ev_setup_handler+0x6c>)
        & (1U <<ep2bit(m_last_setup_dir)))
    8ce2:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8ce4:	681b      	ldr	r3, [r3, #0]
    8ce6:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    8ce8:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8cea:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    8cec:	f003 f809 	bl	bd02 <ep2bit>
    8cf0:	2301      	movs	r3, #1
    8cf2:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8cf4:	4213      	tst	r3, r2
    8cf6:	d002      	beq.n	8cfe <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    8cf8:	4608      	mov	r0, r1
    8cfa:	f7ff ff6f 	bl	8bdc <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    8cfe:	f005 0580 	and.w	r5, r5, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
    8d02:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    8d06:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    8d08:	f7ff fb60 	bl	83cc <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    8d0c:	6823      	ldr	r3, [r4, #0]
    8d0e:	f043 0301 	orr.w	r3, r3, #1
    8d12:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    8d14:	2300      	movs	r3, #0
    8d16:	f8ad 3005 	strh.w	r3, [sp, #5]
    8d1a:	f88d 3007 	strb.w	r3, [sp, #7]
    8d1e:	2305      	movs	r3, #5
    8d20:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
    8d24:	4b06      	ldr	r3, [pc, #24]	; (8d40 <ev_setup_handler+0x70>)
    8d26:	a801      	add	r0, sp, #4
    8d28:	681b      	ldr	r3, [r3, #0]
    8d2a:	4798      	blx	r3
}
    8d2c:	b002      	add	sp, #8
    8d2e:	bd70      	pop	{r4, r5, r6, pc}
    8d30:	40027000 	.word	0x40027000
    8d34:	20001760 	.word	0x20001760
    8d38:	200019e2 	.word	0x200019e2
    8d3c:	200016f0 	.word	0x200016f0
    8d40:	20001884 	.word	0x20001884

00008d44 <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
    8d44:	4b1b      	ldr	r3, [pc, #108]	; (8db4 <nrfx_usbd_irq_handler+0x70>)
    8d46:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    8d4a:	2300      	movs	r3, #0
{
    8d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            active |= 1UL << event_nr;
    8d50:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    8d52:	461d      	mov	r5, r3
    while (to_process)
    8d54:	b970      	cbnz	r0, 8d74 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
    8d56:	4f18      	ldr	r7, [pc, #96]	; (8db8 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    8d58:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    8d5c:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    8d60:	f04f 0801 	mov.w	r8, #1
    while (active)
    8d64:	b9bc      	cbnz	r4, 8d96 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    8d66:	f7ff fd63 	bl	8830 <usbd_dmareq_process>
    if (setup_active)
    8d6a:	b306      	cbz	r6, 8dae <nrfx_usbd_irq_handler+0x6a>
}
    8d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    8d70:	f7ff bfae 	b.w	8cd0 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    8d74:	fa90 f2a0 	rbit	r2, r0
    8d78:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    8d7c:	490f      	ldr	r1, [pc, #60]	; (8dbc <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    8d7e:	0096      	lsls	r6, r2, #2
    8d80:	4431      	add	r1, r6
            active |= 1UL << event_nr;
    8d82:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8d86:	680e      	ldr	r6, [r1, #0]
    if (ret)
    8d88:	b116      	cbz	r6, 8d90 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    8d8a:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    8d8c:	6809      	ldr	r1, [r1, #0]
    8d8e:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    8d90:	ea20 0002 	bic.w	r0, r0, r2
    8d94:	e7de      	b.n	8d54 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    8d96:	fa94 f5a4 	rbit	r5, r4
    8d9a:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    8d9e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    8da2:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    8da6:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    8da8:	ea24 0405 	bic.w	r4, r4, r5
    8dac:	e7da      	b.n	8d64 <nrfx_usbd_irq_handler+0x20>
}
    8dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8db2:	bf00      	nop
    8db4:	40027000 	.word	0x40027000
    8db8:	0000cad0 	.word	0x0000cad0
    8dbc:	40027100 	.word	0x40027100

00008dc0 <usbd_ep_abort_all>:
{
    8dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    8dc2:	4e11      	ldr	r6, [pc, #68]	; (8e08 <usbd_ep_abort_all+0x48>)
    8dc4:	4b11      	ldr	r3, [pc, #68]	; (8e0c <usbd_ep_abort_all+0x4c>)
    8dc6:	6834      	ldr	r4, [r6, #0]
    8dc8:	681b      	ldr	r3, [r3, #0]
    8dca:	0c24      	lsrs	r4, r4, #16
    8dcc:	0424      	lsls	r4, r4, #16
    8dce:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
    8dd0:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    8dd2:	b91c      	cbnz	r4, 8ddc <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    8dd4:	f240 13ff 	movw	r3, #511	; 0x1ff
    8dd8:	6033      	str	r3, [r6, #0]
}
    8dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    8ddc:	fa94 f5a4 	rbit	r5, r4
    8de0:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8de4:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    8de6:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8de8:	bfc6      	itte	gt
    8dea:	f1a5 0010 	subgt.w	r0, r5, #16
    8dee:	b2c0      	uxtbgt	r0, r0
    8df0:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    8df4:	0703      	lsls	r3, r0, #28
    8df6:	d401      	bmi.n	8dfc <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
    8df8:	f7ff fef0 	bl	8bdc <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    8dfc:	fa07 f505 	lsl.w	r5, r7, r5
    8e00:	ea24 0405 	bic.w	r4, r4, r5
    8e04:	e7e5      	b.n	8dd2 <usbd_ep_abort_all+0x12>
    8e06:	bf00      	nop
    8e08:	20001760 	.word	0x20001760
    8e0c:	200016f0 	.word	0x200016f0

00008e10 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8e10:	4b0c      	ldr	r3, [pc, #48]	; (8e44 <nrfx_usbd_stop+0x34>)
    8e12:	2280      	movs	r2, #128	; 0x80
{
    8e14:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    8e16:	2027      	movs	r0, #39	; 0x27
    8e18:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    8e1c:	f7fa fb26 	bl	346c <arch_irq_is_enabled>
    8e20:	b170      	cbz	r0, 8e40 <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    8e22:	4c09      	ldr	r4, [pc, #36]	; (8e48 <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
    8e24:	f7ff ffcc 	bl	8dc0 <usbd_ep_abort_all>
    8e28:	2300      	movs	r3, #0
    8e2a:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
    8e2e:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
    8e30:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
    8e34:	f7fa fb06 	bl	3444 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    8e38:	f04f 33ff 	mov.w	r3, #4294967295
    8e3c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    8e40:	bd10      	pop	{r4, pc}
    8e42:	bf00      	nop
    8e44:	e000e100 	.word	0xe000e100
    8e48:	40027000 	.word	0x40027000

00008e4c <nrfx_usbd_disable>:
{
    8e4c:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    8e4e:	f7ff ffdf 	bl	8e10 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    8e52:	4b08      	ldr	r3, [pc, #32]	; (8e74 <nrfx_usbd_disable+0x28>)
    8e54:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    8e58:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    8e5c:	2200      	movs	r2, #0
    8e5e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    8e62:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    m_dma_pending = false;
    8e66:	4b04      	ldr	r3, [pc, #16]	; (8e78 <nrfx_usbd_disable+0x2c>)
    8e68:	701a      	strb	r2, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    8e6a:	4b04      	ldr	r3, [pc, #16]	; (8e7c <nrfx_usbd_disable+0x30>)
    8e6c:	2201      	movs	r2, #1
    8e6e:	701a      	strb	r2, [r3, #0]
}
    8e70:	bd08      	pop	{r3, pc}
    8e72:	bf00      	nop
    8e74:	40027000 	.word	0x40027000
    8e78:	200019e0 	.word	0x200019e0
    8e7c:	200019e1 	.word	0x200019e1

00008e80 <nrfx_usbd_suspend>:
{
    8e80:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8e82:	f04f 0320 	mov.w	r3, #32
    8e86:	f3ef 8511 	mrs	r5, BASEPRI
    8e8a:	f383 8812 	msr	BASEPRI_MAX, r3
    8e8e:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    8e92:	4b11      	ldr	r3, [pc, #68]	; (8ed8 <nrfx_usbd_suspend+0x58>)
    8e94:	781b      	ldrb	r3, [r3, #0]
    8e96:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    8e9a:	b933      	cbnz	r3, 8eaa <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
    8e9c:	2400      	movs	r4, #0
	__asm__ volatile(
    8e9e:	f385 8811 	msr	BASEPRI, r5
    8ea2:	f3bf 8f6f 	isb	sy
}
    8ea6:	4620      	mov	r0, r4
    8ea8:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
    8eaa:	f7ff ff89 	bl	8dc0 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
    8eae:	4b0b      	ldr	r3, [pc, #44]	; (8edc <nrfx_usbd_suspend+0x5c>)
    8eb0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    8eb4:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    8eb8:	d1f0      	bne.n	8e9c <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    8eba:	2101      	movs	r1, #1
    8ebc:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    8ec0:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    8ec4:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    8ec8:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    8eca:	bf42      	ittt	mi
    8ecc:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    8ed0:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    8ed4:	4614      	movmi	r4, r2
}
    8ed6:	e7e2      	b.n	8e9e <nrfx_usbd_suspend+0x1e>
    8ed8:	200019df 	.word	0x200019df
    8edc:	40027000 	.word	0x40027000

00008ee0 <nrfx_usbd_ep_disable>:
{
    8ee0:	b510      	push	{r4, lr}
    8ee2:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    8ee4:	f7ff fe7a 	bl	8bdc <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    8ee8:	4a10      	ldr	r2, [pc, #64]	; (8f2c <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    8eea:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    8eee:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    8ef2:	f04f 0301 	mov.w	r3, #1
    8ef6:	bf14      	ite	ne
    8ef8:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    8efc:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    8f00:	fa03 f300 	lsl.w	r3, r3, r0
    8f04:	ea6f 0303 	mvn.w	r3, r3
    8f08:	bf15      	itete	ne
    8f0a:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    8f0c:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    8f0e:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    8f12:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    8f16:	bf14      	ite	ne
    8f18:	4b05      	ldrne	r3, [pc, #20]	; (8f30 <nrfx_usbd_ep_disable+0x50>)
    8f1a:	4b06      	ldreq	r3, [pc, #24]	; (8f34 <nrfx_usbd_ep_disable+0x54>)
    8f1c:	5c1a      	ldrb	r2, [r3, r0]
    8f1e:	2301      	movs	r3, #1
    8f20:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    8f22:	4a02      	ldr	r2, [pc, #8]	; (8f2c <nrfx_usbd_ep_disable+0x4c>)
    8f24:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    8f28:	bd10      	pop	{r4, pc}
    8f2a:	bf00      	nop
    8f2c:	40027000 	.word	0x40027000
    8f30:	0000edd5 	.word	0x0000edd5
    8f34:	0000edde 	.word	0x0000edde

00008f38 <nrfx_usbd_ep_enable>:
{
    8f38:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    8f3a:	b243      	sxtb	r3, r0
    8f3c:	2b00      	cmp	r3, #0
    8f3e:	4b23      	ldr	r3, [pc, #140]	; (8fcc <nrfx_usbd_ep_enable+0x94>)
    8f40:	4a23      	ldr	r2, [pc, #140]	; (8fd0 <nrfx_usbd_ep_enable+0x98>)
    8f42:	bfa8      	it	ge
    8f44:	461a      	movge	r2, r3
    8f46:	f000 030f 	and.w	r3, r0, #15
    8f4a:	f04f 0401 	mov.w	r4, #1
    8f4e:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
    8f50:	4a20      	ldr	r2, [pc, #128]	; (8fd4 <nrfx_usbd_ep_enable+0x9c>)
    8f52:	fa04 f101 	lsl.w	r1, r4, r1
{
    8f56:	4605      	mov	r5, r0
    8f58:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
    8f5c:	da0c      	bge.n	8f78 <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    8f5e:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    8f62:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    8f64:	07c8      	lsls	r0, r1, #31
    8f66:	d406      	bmi.n	8f76 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
    8f68:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    8f6c:	fa04 f303 	lsl.w	r3, r4, r3
    8f70:	4303      	orrs	r3, r0
    8f72:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
    8f76:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    8f78:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
    8f7c:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    8f7e:	07c9      	lsls	r1, r1, #31
    8f80:	d4f9      	bmi.n	8f76 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
    8f82:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
    8f86:	fa04 f103 	lsl.w	r1, r4, r3
    8f8a:	4331      	orrs	r1, r6
    8f8c:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    8f90:	2b00      	cmp	r3, #0
    8f92:	d0f0      	beq.n	8f76 <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
    8f94:	0703      	lsls	r3, r0, #28
    8f96:	d4ee      	bmi.n	8f76 <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
    8f98:	f04f 0320 	mov.w	r3, #32
    8f9c:	f3ef 8611 	mrs	r6, BASEPRI
    8fa0:	f383 8812 	msr	BASEPRI_MAX, r3
    8fa4:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    8fa8:	f7ff fdee 	bl	8b88 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    8fac:	4628      	mov	r0, r5
    8fae:	f002 fea8 	bl	bd02 <ep2bit>
    8fb2:	4a09      	ldr	r2, [pc, #36]	; (8fd8 <nrfx_usbd_ep_enable+0xa0>)
    8fb4:	6813      	ldr	r3, [r2, #0]
    8fb6:	fa04 f000 	lsl.w	r0, r4, r0
    8fba:	ea23 0000 	bic.w	r0, r3, r0
    8fbe:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
    8fc0:	f386 8811 	msr	BASEPRI, r6
    8fc4:	f3bf 8f6f 	isb	sy
}
    8fc8:	e7d5      	b.n	8f76 <nrfx_usbd_ep_enable+0x3e>
    8fca:	bf00      	nop
    8fcc:	0000edde 	.word	0x0000edde
    8fd0:	0000edd5 	.word	0x0000edd5
    8fd4:	40027000 	.word	0x40027000
    8fd8:	200016f0 	.word	0x200016f0

00008fdc <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    8fdc:	0603      	lsls	r3, r0, #24
{
    8fde:	b510      	push	{r4, lr}
    8fe0:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    8fe2:	d405      	bmi.n	8ff0 <nrfx_usbd_ep_stall_clear+0x14>
    8fe4:	f7ff fd3a 	bl	8a5c <nrfx_usbd_ep_stall_check>
    8fe8:	b110      	cbz	r0, 8ff0 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    8fea:	4620      	mov	r0, r4
    8fec:	f7ff fdcc 	bl	8b88 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    8ff0:	4b01      	ldr	r3, [pc, #4]	; (8ff8 <nrfx_usbd_ep_stall_clear+0x1c>)
    8ff2:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    8ff6:	bd10      	pop	{r4, pc}
    8ff8:	40027000 	.word	0x40027000

00008ffc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    8ffc:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    8ffe:	4c11      	ldr	r4, [pc, #68]	; (9044 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    9000:	4a11      	ldr	r2, [pc, #68]	; (9048 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    9002:	4912      	ldr	r1, [pc, #72]	; (904c <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    9004:	2303      	movs	r3, #3
    9006:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    9008:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    900a:	4b11      	ldr	r3, [pc, #68]	; (9050 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    900c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    900e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    9010:	f44f 6380 	mov.w	r3, #1024	; 0x400
    9014:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    9016:	2300      	movs	r3, #0
    9018:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    901a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    901c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    901e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    9020:	4a0c      	ldr	r2, [pc, #48]	; (9054 <_DoInit+0x58>)
    9022:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    9024:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    9026:	2210      	movs	r2, #16
    9028:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    902a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    902c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    902e:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    9030:	f002 fa61 	bl	b4f6 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    9034:	4908      	ldr	r1, [pc, #32]	; (9058 <_DoInit+0x5c>)
    9036:	4620      	mov	r0, r4
    9038:	f002 fa5d 	bl	b4f6 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    903c:	2320      	movs	r3, #32
    903e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    9040:	bd10      	pop	{r4, pc}
    9042:	bf00      	nop
    9044:	200018c8 	.word	0x200018c8
    9048:	0000ede7 	.word	0x0000ede7
    904c:	0000edf0 	.word	0x0000edf0
    9050:	200019f3 	.word	0x200019f3
    9054:	200019e3 	.word	0x200019e3
    9058:	0000edf4 	.word	0x0000edf4

0000905c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    905c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    9060:	4f23      	ldr	r7, [pc, #140]	; (90f0 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    9062:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    9066:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    9068:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    906c:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    906e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    9070:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    9072:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    9074:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    9076:	d834      	bhi.n	90e2 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    9078:	f8d2 a020 	ldr.w	sl, [r2, #32]
    907c:	ebaa 0905 	sub.w	r9, sl, r5
    9080:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    9084:	4294      	cmp	r4, r2
    9086:	d811      	bhi.n	90ac <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    9088:	f04f 0918 	mov.w	r9, #24
    908c:	fb06 9309 	mla	r3, r6, r9, r9
    9090:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    9092:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    9094:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    9096:	4641      	mov	r1, r8
    9098:	4428      	add	r0, r5
    909a:	f002 fa52 	bl	b542 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    909e:	fb09 7606 	mla	r6, r9, r6, r7
    90a2:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    90a4:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    90a6:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    90a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    90ac:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    90ae:	429c      	cmp	r4, r3
    90b0:	d81b      	bhi.n	90ea <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    90b2:	fb00 bb0b 	mla	fp, r0, fp, fp
    90b6:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    90b8:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    90ba:	f8db 0004 	ldr.w	r0, [fp, #4]
    90be:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    90c0:	4428      	add	r0, r5
    90c2:	f002 fa3e 	bl	b542 <memcpy>
      if (NumBytes) {
    90c6:	ebb4 040a 	subs.w	r4, r4, sl
    90ca:	d006      	beq.n	90da <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    90cc:	f8db 0004 	ldr.w	r0, [fp, #4]
    90d0:	4622      	mov	r2, r4
    90d2:	eb08 0109 	add.w	r1, r8, r9
    90d6:	f002 fa34 	bl	b542 <memcpy>
      pRing->WrOff = NumBytes;
    90da:	2018      	movs	r0, #24
    90dc:	fb00 7606 	mla	r6, r0, r6, r7
    90e0:	e7e0      	b.n	90a4 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    90e2:	3b01      	subs	r3, #1
    90e4:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    90e6:	42a3      	cmp	r3, r4
    90e8:	d2ce      	bcs.n	9088 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    90ea:	2000      	movs	r0, #0
    90ec:	e7dc      	b.n	90a8 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    90ee:	bf00      	nop
    90f0:	200018c8 	.word	0x200018c8

000090f4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    90f4:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    90f6:	4b16      	ldr	r3, [pc, #88]	; (9150 <SEGGER_RTT_WriteNoLock+0x5c>)
    90f8:	2418      	movs	r4, #24
    90fa:	fb00 4504 	mla	r5, r0, r4, r4
    90fe:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    9100:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    9104:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    9106:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    9108:	2c01      	cmp	r4, #1
    910a:	d00e      	beq.n	912a <SEGGER_RTT_WriteNoLock+0x36>
    910c:	2c02      	cmp	r4, #2
    910e:	d018      	beq.n	9142 <SEGGER_RTT_WriteNoLock+0x4e>
    9110:	b9e4      	cbnz	r4, 914c <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    9112:	4628      	mov	r0, r5
    9114:	f002 fe49 	bl	bdaa <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    9118:	4286      	cmp	r6, r0
    911a:	d804      	bhi.n	9126 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    911c:	4632      	mov	r2, r6
    911e:	4628      	mov	r0, r5
    9120:	f002 fe4c 	bl	bdbc <_WriteNoCheck>
    9124:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    9126:	4620      	mov	r0, r4
    9128:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    912a:	4628      	mov	r0, r5
    912c:	f002 fe3d 	bl	bdaa <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    9130:	4286      	cmp	r6, r0
    9132:	4634      	mov	r4, r6
    9134:	bf28      	it	cs
    9136:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    9138:	4622      	mov	r2, r4
    913a:	4628      	mov	r0, r5
    913c:	f002 fe3e 	bl	bdbc <_WriteNoCheck>
    break;
    9140:	e7f1      	b.n	9126 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    9142:	4628      	mov	r0, r5
}
    9144:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    9148:	f002 be54 	b.w	bdf4 <_WriteBlocking>
  switch (pRing->Flags) {
    914c:	2400      	movs	r4, #0
  return Status;
    914e:	e7ea      	b.n	9126 <SEGGER_RTT_WriteNoLock+0x32>
    9150:	200018c8 	.word	0x200018c8

00009154 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    9154:	4b03      	ldr	r3, [pc, #12]	; (9164 <SEGGER_RTT_HasDataUp+0x10>)
    9156:	2218      	movs	r2, #24
    9158:	fb02 3300 	mla	r3, r2, r0, r3
    915c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    915e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    9160:	1a80      	subs	r0, r0, r2
    9162:	4770      	bx	lr
    9164:	200018c8 	.word	0x200018c8

00009168 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    9168:	4b0e      	ldr	r3, [pc, #56]	; (91a4 <z_sys_init_run_level+0x3c>)
{
    916a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    916c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    9170:	3001      	adds	r0, #1
    9172:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    9176:	42a6      	cmp	r6, r4
    9178:	d800      	bhi.n	917c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    917a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    917c:	e9d4 3500 	ldrd	r3, r5, [r4]
    9180:	4628      	mov	r0, r5
    9182:	4798      	blx	r3
		if (dev != NULL) {
    9184:	b165      	cbz	r5, 91a0 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    9186:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    9188:	b130      	cbz	r0, 9198 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    918a:	2800      	cmp	r0, #0
    918c:	bfb8      	it	lt
    918e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    9190:	28ff      	cmp	r0, #255	; 0xff
    9192:	bfa8      	it	ge
    9194:	20ff      	movge	r0, #255	; 0xff
    9196:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    9198:	785a      	ldrb	r2, [r3, #1]
    919a:	f042 0201 	orr.w	r2, r2, #1
    919e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    91a0:	3408      	adds	r4, #8
    91a2:	e7e8      	b.n	9176 <z_sys_init_run_level+0xe>
    91a4:	0000cb34 	.word	0x0000cb34

000091a8 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    91a8:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    91aa:	4605      	mov	r5, r0
    91ac:	b910      	cbnz	r0, 91b4 <z_impl_device_get_binding+0xc>
		return NULL;
    91ae:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    91b0:	4620      	mov	r0, r4
    91b2:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    91b4:	7803      	ldrb	r3, [r0, #0]
    91b6:	2b00      	cmp	r3, #0
    91b8:	d0f9      	beq.n	91ae <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    91ba:	4c0e      	ldr	r4, [pc, #56]	; (91f4 <z_impl_device_get_binding+0x4c>)
    91bc:	4e0e      	ldr	r6, [pc, #56]	; (91f8 <z_impl_device_get_binding+0x50>)
    91be:	42b4      	cmp	r4, r6
    91c0:	d108      	bne.n	91d4 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    91c2:	4c0c      	ldr	r4, [pc, #48]	; (91f4 <z_impl_device_get_binding+0x4c>)
    91c4:	42b4      	cmp	r4, r6
    91c6:	d0f2      	beq.n	91ae <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    91c8:	4620      	mov	r0, r4
    91ca:	f002 fe44 	bl	be56 <z_device_is_ready>
    91ce:	b950      	cbnz	r0, 91e6 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    91d0:	3418      	adds	r4, #24
    91d2:	e7f7      	b.n	91c4 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    91d4:	4620      	mov	r0, r4
    91d6:	f002 fe3e 	bl	be56 <z_device_is_ready>
    91da:	b110      	cbz	r0, 91e2 <z_impl_device_get_binding+0x3a>
    91dc:	6823      	ldr	r3, [r4, #0]
    91de:	42ab      	cmp	r3, r5
    91e0:	d0e6      	beq.n	91b0 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    91e2:	3418      	adds	r4, #24
    91e4:	e7eb      	b.n	91be <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    91e6:	6821      	ldr	r1, [r4, #0]
    91e8:	4628      	mov	r0, r5
    91ea:	f002 f99e 	bl	b52a <strcmp>
    91ee:	2800      	cmp	r0, #0
    91f0:	d1ee      	bne.n	91d0 <z_impl_device_get_binding+0x28>
    91f2:	e7dd      	b.n	91b0 <z_impl_device_get_binding+0x8>
    91f4:	0000c5a0 	.word	0x0000c5a0
    91f8:	0000c648 	.word	0x0000c648

000091fc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    91fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9200:	b086      	sub	sp, #24
    9202:	4605      	mov	r5, r0
    9204:	af00      	add	r7, sp, #0
    9206:	460e      	mov	r6, r1
	__asm__ volatile(
    9208:	f04f 0320 	mov.w	r3, #32
    920c:	f3ef 8811 	mrs	r8, BASEPRI
    9210:	f383 8812 	msr	BASEPRI_MAX, r3
    9214:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    9218:	f000 fff2 	bl	a200 <z_impl_z_current_get>
    921c:	2d04      	cmp	r5, #4
    921e:	bf96      	itet	ls
    9220:	4b2c      	ldrls	r3, [pc, #176]	; (92d4 <z_fatal_error+0xd8>)
    9222:	4b2d      	ldrhi	r3, [pc, #180]	; (92d8 <z_fatal_error+0xdc>)
    9224:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    9228:	492c      	ldr	r1, [pc, #176]	; (92dc <z_fatal_error+0xe0>)
    922a:	46e9      	mov	r9, sp
    922c:	b08a      	sub	sp, #40	; 0x28
    922e:	466a      	mov	r2, sp
    9230:	f04f 0a00 	mov.w	sl, #0
    9234:	61d3      	str	r3, [r2, #28]
    9236:	2303      	movs	r3, #3
    9238:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    923c:	4b28      	ldr	r3, [pc, #160]	; (92e0 <z_fatal_error+0xe4>)
    923e:	f8c2 a020 	str.w	sl, [r2, #32]
    9242:	e9c2 1505 	strd	r1, r5, [r2, #20]
    9246:	4604      	mov	r4, r0
    9248:	f842 3f10 	str.w	r3, [r2, #16]!
    924c:	4825      	ldr	r0, [pc, #148]	; (92e4 <z_fatal_error+0xe8>)
    924e:	4653      	mov	r3, sl
    9250:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
    9254:	f002 f8b0 	bl	b3b8 <z_impl_z_log_msg2_static_create>
    9258:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    925a:	b17e      	cbz	r6, 927c <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    925c:	69f3      	ldr	r3, [r6, #28]
    925e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    9262:	b15b      	cbz	r3, 927c <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    9264:	4b20      	ldr	r3, [pc, #128]	; (92e8 <z_fatal_error+0xec>)
    9266:	617b      	str	r3, [r7, #20]
    9268:	2302      	movs	r3, #2
    926a:	613b      	str	r3, [r7, #16]
    926c:	481d      	ldr	r0, [pc, #116]	; (92e4 <z_fatal_error+0xe8>)
    926e:	4653      	mov	r3, sl
    9270:	f107 0210 	add.w	r2, r7, #16
    9274:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9278:	f002 f89e 	bl	b3b8 <z_impl_z_log_msg2_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    927c:	b12c      	cbz	r4, 928a <z_fatal_error+0x8e>
    927e:	4620      	mov	r0, r4
    9280:	f002 fe29 	bl	bed6 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    9284:	b108      	cbz	r0, 928a <z_fatal_error+0x8e>
    9286:	7803      	ldrb	r3, [r0, #0]
    9288:	b903      	cbnz	r3, 928c <z_fatal_error+0x90>
		thread_name = "unknown";
    928a:	4818      	ldr	r0, [pc, #96]	; (92ec <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    928c:	4b18      	ldr	r3, [pc, #96]	; (92f0 <z_fatal_error+0xf4>)
    928e:	46e9      	mov	r9, sp
    9290:	b08a      	sub	sp, #40	; 0x28
    9292:	466a      	mov	r2, sp
    9294:	e9c2 3405 	strd	r3, r4, [r2, #20]
    9298:	2303      	movs	r3, #3
    929a:	f882 3020 	strb.w	r3, [r2, #32]
    929e:	4b15      	ldr	r3, [pc, #84]	; (92f4 <z_fatal_error+0xf8>)
    92a0:	61d0      	str	r0, [r2, #28]
    92a2:	f842 3f10 	str.w	r3, [r2, #16]!
    92a6:	2300      	movs	r3, #0
    92a8:	480e      	ldr	r0, [pc, #56]	; (92e4 <z_fatal_error+0xe8>)
    92aa:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    92ae:	f002 f883 	bl	b3b8 <z_impl_z_log_msg2_static_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    92b2:	4631      	mov	r1, r6
    92b4:	46cd      	mov	sp, r9
    92b6:	4628      	mov	r0, r5
    92b8:	f7fd f974 	bl	65a4 <k_sys_fatal_error_handler>
	__asm__ volatile(
    92bc:	f388 8811 	msr	BASEPRI, r8
    92c0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    92c4:	4620      	mov	r0, r4
    92c6:	f7fa fd27 	bl	3d18 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    92ca:	3718      	adds	r7, #24
    92cc:	46bd      	mov	sp, r7
    92ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    92d2:	bf00      	nop
    92d4:	0000cb4c 	.word	0x0000cb4c
    92d8:	0000edfb 	.word	0x0000edfb
    92dc:	0000ee11 	.word	0x0000ee11
    92e0:	01000005 	.word	0x01000005
    92e4:	0000c7c0 	.word	0x0000c7c0
    92e8:	0000ee39 	.word	0x0000ee39
    92ec:	0000ee09 	.word	0x0000ee09
    92f0:	0000ee5a 	.word	0x0000ee5a
    92f4:	01000004 	.word	0x01000004

000092f8 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    92f8:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    92fa:	4b0a      	ldr	r3, [pc, #40]	; (9324 <bg_thread_main+0x2c>)
    92fc:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    92fe:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    9300:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    9302:	f7ff ff31 	bl	9168 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    9306:	f001 f9ef 	bl	a6e8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    930a:	2003      	movs	r0, #3
    930c:	f7ff ff2c 	bl	9168 <z_sys_init_run_level>

	z_init_static_threads();
    9310:	f000 f968 	bl	95e4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    9314:	f7f7 f96a 	bl	5ec <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    9318:	4a03      	ldr	r2, [pc, #12]	; (9328 <bg_thread_main+0x30>)
    931a:	7b13      	ldrb	r3, [r2, #12]
    931c:	f023 0301 	bic.w	r3, r3, #1
    9320:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    9322:	bd08      	pop	{r3, pc}
    9324:	20001df3 	.word	0x20001df3
    9328:	200008c8 	.word	0x200008c8

0000932c <z_bss_zero>:
{
    932c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    932e:	4803      	ldr	r0, [pc, #12]	; (933c <z_bss_zero+0x10>)
    9330:	4a03      	ldr	r2, [pc, #12]	; (9340 <z_bss_zero+0x14>)
    9332:	2100      	movs	r1, #0
    9334:	1a12      	subs	r2, r2, r0
    9336:	f002 fd98 	bl	be6a <z_early_memset>
}
    933a:	bd08      	pop	{r3, pc}
    933c:	20000260 	.word	0x20000260
    9340:	20001df4 	.word	0x20001df4

00009344 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    9344:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    9346:	2300      	movs	r3, #0
{
    9348:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    934a:	2201      	movs	r2, #1
    934c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    9350:	4e13      	ldr	r6, [pc, #76]	; (93a0 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    9352:	4d14      	ldr	r5, [pc, #80]	; (93a4 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    9354:	9301      	str	r3, [sp, #4]
    9356:	220f      	movs	r2, #15
    9358:	e9cd 3202 	strd	r3, r2, [sp, #8]
    935c:	4912      	ldr	r1, [pc, #72]	; (93a8 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    935e:	2318      	movs	r3, #24
    9360:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    9364:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    9368:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    936a:	f44f 7090 	mov.w	r0, #288	; 0x120
    936e:	fb00 1104 	mla	r1, r0, r4, r1
    9372:	4b0e      	ldr	r3, [pc, #56]	; (93ac <z_init_cpu+0x68>)
    9374:	9500      	str	r5, [sp, #0]
    9376:	f44f 7280 	mov.w	r2, #256	; 0x100
    937a:	4630      	mov	r0, r6
    937c:	f000 f8d4 	bl	9528 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9380:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    9382:	480b      	ldr	r0, [pc, #44]	; (93b0 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    9384:	752c      	strb	r4, [r5, #20]
    9386:	f023 0304 	bic.w	r3, r3, #4
    938a:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    938c:	f44f 6302 	mov.w	r3, #2080	; 0x820
    9390:	fb03 0404 	mla	r4, r3, r4, r0
    9394:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    9396:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    9398:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    939a:	b006      	add	sp, #24
    939c:	bd70      	pop	{r4, r5, r6, pc}
    939e:	bf00      	nop
    93a0:	20000848 	.word	0x20000848
    93a4:	20001970 	.word	0x20001970
    93a8:	20002960 	.word	0x20002960
    93ac:	0000969d 	.word	0x0000969d
    93b0:	20002a80 	.word	0x20002a80

000093b4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    93b4:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    93b6:	4b2d      	ldr	r3, [pc, #180]	; (946c <z_cstart+0xb8>)
    93b8:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    93ba:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    93be:	4d2c      	ldr	r5, [pc, #176]	; (9470 <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    93c0:	4e2c      	ldr	r6, [pc, #176]	; (9474 <z_cstart+0xc0>)
    93c2:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    93c4:	4f2c      	ldr	r7, [pc, #176]	; (9478 <z_cstart+0xc4>)
    93c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    93ca:	2400      	movs	r4, #0
    93cc:	616b      	str	r3, [r5, #20]
    93ce:	23e0      	movs	r3, #224	; 0xe0
    93d0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    93d4:	77ec      	strb	r4, [r5, #31]
    93d6:	762c      	strb	r4, [r5, #24]
    93d8:	766c      	strb	r4, [r5, #25]
    93da:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    93dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    93de:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    93e2:	626b      	str	r3, [r5, #36]	; 0x24
    93e4:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    93e8:	f7fa fc0a 	bl	3c00 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    93ec:	f7f9 ff96 	bl	331c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    93f0:	f04f 33ff 	mov.w	r3, #4294967295
    93f4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    93f6:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    93f8:	f7fa fd5c 	bl	3eb4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    93fc:	f7fa fca2 	bl	3d44 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    9400:	f7f8 fb14 	bl	1a2c <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    9404:	f240 1301 	movw	r3, #257	; 0x101
    9408:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    940c:	ab06      	add	r3, sp, #24
    940e:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    9410:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    9414:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    9416:	f002 fd1d 	bl	be54 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    941a:	4620      	mov	r0, r4
    941c:	f7ff fea4 	bl	9168 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    9420:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    9422:	4d16      	ldr	r5, [pc, #88]	; (947c <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    9424:	f7ff fea0 	bl	9168 <z_sys_init_run_level>
	z_sched_init();
    9428:	f000 fe3c 	bl	a0a4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    942c:	4b14      	ldr	r3, [pc, #80]	; (9480 <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
    942e:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    9430:	9305      	str	r3, [sp, #20]
    9432:	2301      	movs	r3, #1
    9434:	4913      	ldr	r1, [pc, #76]	; (9484 <z_cstart+0xd0>)
    9436:	9400      	str	r4, [sp, #0]
    9438:	e9cd 4303 	strd	r4, r3, [sp, #12]
    943c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9440:	463b      	mov	r3, r7
    9442:	e9cd 4401 	strd	r4, r4, [sp, #4]
    9446:	4628      	mov	r0, r5
    9448:	f000 f86e 	bl	9528 <z_setup_new_thread>
    944c:	7b6a      	ldrb	r2, [r5, #13]
    944e:	4606      	mov	r6, r0
    9450:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    9454:	4628      	mov	r0, r5
    9456:	736a      	strb	r2, [r5, #13]
    9458:	f002 fe94 	bl	c184 <z_ready_thread>
	z_init_cpu(0);
    945c:	4620      	mov	r0, r4
    945e:	f7ff ff71 	bl	9344 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    9462:	463a      	mov	r2, r7
    9464:	4631      	mov	r1, r6
    9466:	4628      	mov	r0, r5
    9468:	f7fa f8d4 	bl	3614 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    946c:	200032a0 	.word	0x200032a0
    9470:	e000ed00 	.word	0xe000ed00
    9474:	20001970 	.word	0x20001970
    9478:	000092f9 	.word	0x000092f9
    947c:	200008c8 	.word	0x200008c8
    9480:	0000cc8a 	.word	0x0000cc8a
    9484:	20002540 	.word	0x20002540

00009488 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    9488:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    948a:	4b0e      	ldr	r3, [pc, #56]	; (94c4 <init_mem_slab_module+0x3c>)
    948c:	4c0e      	ldr	r4, [pc, #56]	; (94c8 <init_mem_slab_module+0x40>)
    948e:	42a3      	cmp	r3, r4
    9490:	d301      	bcc.n	9496 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    9492:	2000      	movs	r0, #0
	return rc;
}
    9494:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    9496:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    949a:	ea41 0200 	orr.w	r2, r1, r0
    949e:	f012 0203 	ands.w	r2, r2, #3
    94a2:	d10b      	bne.n	94bc <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    94a4:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    94a6:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    94a8:	42aa      	cmp	r2, r5
    94aa:	d101      	bne.n	94b0 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    94ac:	331c      	adds	r3, #28
    94ae:	e7ee      	b.n	948e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    94b0:	695e      	ldr	r6, [r3, #20]
    94b2:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    94b4:	3201      	adds	r2, #1
		slab->free_list = p;
    94b6:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    94b8:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    94ba:	e7f5      	b.n	94a8 <init_mem_slab_module+0x20>
	return rc;
    94bc:	f06f 0015 	mvn.w	r0, #21
    94c0:	e7e8      	b.n	9494 <init_mem_slab_module+0xc>
    94c2:	bf00      	nop
    94c4:	20000150 	.word	0x20000150
    94c8:	2000016c 	.word	0x2000016c

000094cc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    94cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    94ce:	460c      	mov	r4, r1
	__asm__ volatile(
    94d0:	f04f 0520 	mov.w	r5, #32
    94d4:	f3ef 8111 	mrs	r1, BASEPRI
    94d8:	f385 8812 	msr	BASEPRI_MAX, r5
    94dc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    94e0:	6945      	ldr	r5, [r0, #20]
    94e2:	b15d      	cbz	r5, 94fc <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    94e4:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    94e6:	682b      	ldr	r3, [r5, #0]
    94e8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    94ea:	6983      	ldr	r3, [r0, #24]
    94ec:	3301      	adds	r3, #1
    94ee:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    94f0:	2000      	movs	r0, #0
	__asm__ volatile(
    94f2:	f381 8811 	msr	BASEPRI, r1
    94f6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    94fa:	e011      	b.n	9520 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    94fc:	ea52 0c03 	orrs.w	ip, r2, r3
    9500:	d103      	bne.n	950a <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    9502:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    9504:	f06f 000b 	mvn.w	r0, #11
    9508:	e7f3      	b.n	94f2 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    950a:	e9cd 2300 	strd	r2, r3, [sp]
    950e:	4602      	mov	r2, r0
    9510:	3008      	adds	r0, #8
    9512:	f000 fd1d 	bl	9f50 <z_pend_curr>
		if (result == 0) {
    9516:	b918      	cbnz	r0, 9520 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    9518:	4b02      	ldr	r3, [pc, #8]	; (9524 <k_mem_slab_alloc+0x58>)
    951a:	689b      	ldr	r3, [r3, #8]
    951c:	695b      	ldr	r3, [r3, #20]
    951e:	6023      	str	r3, [r4, #0]
}
    9520:	b003      	add	sp, #12
    9522:	bd30      	pop	{r4, r5, pc}
    9524:	20001970 	.word	0x20001970

00009528 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    9528:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    952c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    952e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    9530:	2604      	movs	r6, #4
    9532:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    9534:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    9536:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    9538:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    953c:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    953e:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    9540:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    9544:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    9546:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    9548:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    954c:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    954e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    9552:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    9556:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    9558:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    955a:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    955c:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    9560:	9202      	str	r2, [sp, #8]
    9562:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9564:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    9566:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    9568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    956a:	9200      	str	r2, [sp, #0]
    956c:	4642      	mov	r2, r8
{
    956e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    9570:	f7fa f81e 	bl	35b0 <arch_new_thread>
	if (!_current) {
    9574:	4b04      	ldr	r3, [pc, #16]	; (9588 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    9576:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    9578:	689b      	ldr	r3, [r3, #8]
    957a:	b103      	cbz	r3, 957e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    957c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    957e:	6723      	str	r3, [r4, #112]	; 0x70
}
    9580:	4640      	mov	r0, r8
    9582:	b004      	add	sp, #16
    9584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9588:	20001970 	.word	0x20001970

0000958c <z_impl_k_thread_create>:
{
    958c:	b5f0      	push	{r4, r5, r6, r7, lr}
    958e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    9590:	2700      	movs	r7, #0
    9592:	9705      	str	r7, [sp, #20]
    9594:	9f10      	ldr	r7, [sp, #64]	; 0x40
    9596:	9704      	str	r7, [sp, #16]
    9598:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    959a:	9703      	str	r7, [sp, #12]
    959c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    959e:	9702      	str	r7, [sp, #8]
{
    95a0:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    95a4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    95a6:	9701      	str	r7, [sp, #4]
    95a8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    95aa:	9700      	str	r7, [sp, #0]
{
    95ac:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    95ae:	f7ff ffbb 	bl	9528 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    95b2:	f1b5 3fff 	cmp.w	r5, #4294967295
    95b6:	bf08      	it	eq
    95b8:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    95bc:	d005      	beq.n	95ca <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    95be:	ea55 0306 	orrs.w	r3, r5, r6
    95c2:	d105      	bne.n	95d0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    95c4:	4620      	mov	r0, r4
    95c6:	f000 fc67 	bl	9e98 <z_sched_start>
}
    95ca:	4620      	mov	r0, r4
    95cc:	b007      	add	sp, #28
    95ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    95d0:	4903      	ldr	r1, [pc, #12]	; (95e0 <z_impl_k_thread_create+0x54>)
    95d2:	4632      	mov	r2, r6
    95d4:	462b      	mov	r3, r5
    95d6:	f104 0018 	add.w	r0, r4, #24
    95da:	f000 fedf 	bl	a39c <z_add_timeout>
    95de:	e7f4      	b.n	95ca <z_impl_k_thread_create+0x3e>
    95e0:	0000c1a5 	.word	0x0000c1a5

000095e4 <z_init_static_threads>:
{
    95e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    95e8:	4c29      	ldr	r4, [pc, #164]	; (9690 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    95ea:	4d2a      	ldr	r5, [pc, #168]	; (9694 <z_init_static_threads+0xb0>)
{
    95ec:	b087      	sub	sp, #28
    95ee:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    95f0:	42ae      	cmp	r6, r5
    95f2:	f104 0430 	add.w	r4, r4, #48	; 0x30
    95f6:	d30f      	bcc.n	9618 <z_init_static_threads+0x34>
	k_sched_lock();
    95f8:	f000 fb68 	bl	9ccc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    95fc:	4c24      	ldr	r4, [pc, #144]	; (9690 <z_init_static_threads+0xac>)
    95fe:	f8df 9098 	ldr.w	r9, [pc, #152]	; 9698 <z_init_static_threads+0xb4>
    9602:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    9606:	f240 37e7 	movw	r7, #999	; 0x3e7
    960a:	42ac      	cmp	r4, r5
    960c:	d320      	bcc.n	9650 <z_init_static_threads+0x6c>
}
    960e:	b007      	add	sp, #28
    9610:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    9614:	f000 bd2a 	b.w	a06c <k_sched_unlock>
		z_setup_new_thread(
    9618:	f854 3c04 	ldr.w	r3, [r4, #-4]
    961c:	9305      	str	r3, [sp, #20]
    961e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    9622:	9304      	str	r3, [sp, #16]
    9624:	f854 3c14 	ldr.w	r3, [r4, #-20]
    9628:	9303      	str	r3, [sp, #12]
    962a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    962e:	9302      	str	r3, [sp, #8]
    9630:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    9634:	9301      	str	r3, [sp, #4]
    9636:	f854 3c20 	ldr.w	r3, [r4, #-32]
    963a:	9300      	str	r3, [sp, #0]
    963c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    9640:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    9644:	f7ff ff70 	bl	9528 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    9648:	f854 3c30 	ldr.w	r3, [r4, #-48]
    964c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    964e:	e7ce      	b.n	95ee <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    9650:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9652:	1c5a      	adds	r2, r3, #1
    9654:	d00d      	beq.n	9672 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    9656:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    965a:	2100      	movs	r1, #0
    965c:	4638      	mov	r0, r7
    965e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    9662:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    9666:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    966a:	d104      	bne.n	9676 <z_init_static_threads+0x92>
	z_sched_start(thread);
    966c:	4640      	mov	r0, r8
    966e:	f000 fc13 	bl	9e98 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    9672:	3430      	adds	r4, #48	; 0x30
    9674:	e7c9      	b.n	960a <z_init_static_threads+0x26>
    9676:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    967a:	2300      	movs	r3, #0
    967c:	f7f6 fd30 	bl	e0 <__aeabi_uldivmod>
    9680:	4602      	mov	r2, r0
    9682:	460b      	mov	r3, r1
    9684:	f108 0018 	add.w	r0, r8, #24
    9688:	4649      	mov	r1, r9
    968a:	f000 fe87 	bl	a39c <z_add_timeout>
    968e:	e7f0      	b.n	9672 <z_init_static_threads+0x8e>
    9690:	20000118 	.word	0x20000118
    9694:	20000118 	.word	0x20000118
    9698:	0000c1a5 	.word	0x0000c1a5

0000969c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    969c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    969e:	4c0b      	ldr	r4, [pc, #44]	; (96cc <idle+0x30>)
	return !z_sys_post_kernel;
    96a0:	4d0b      	ldr	r5, [pc, #44]	; (96d0 <idle+0x34>)
	__asm__ volatile(
    96a2:	f04f 0220 	mov.w	r2, #32
    96a6:	f3ef 8311 	mrs	r3, BASEPRI
    96aa:	f382 8812 	msr	BASEPRI_MAX, r2
    96ae:	f3bf 8f6f 	isb	sy
    96b2:	f002 fe33 	bl	c31c <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    96b6:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    96b8:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    96ba:	b913      	cbnz	r3, 96c2 <idle+0x26>
	arch_cpu_idle();
    96bc:	f7f9 fe34 	bl	3328 <arch_cpu_idle>
}
    96c0:	e7ef      	b.n	96a2 <idle+0x6>
    96c2:	f7f9 fd51 	bl	3168 <pm_system_suspend>
    96c6:	2800      	cmp	r0, #0
    96c8:	d1eb      	bne.n	96a2 <idle+0x6>
    96ca:	e7f7      	b.n	96bc <idle+0x20>
    96cc:	20001970 	.word	0x20001970
    96d0:	20001df3 	.word	0x20001df3

000096d4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    96d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    96d8:	4604      	mov	r4, r0
    96da:	4617      	mov	r7, r2
    96dc:	461e      	mov	r6, r3
    96de:	f04f 0320 	mov.w	r3, #32
    96e2:	f3ef 8811 	mrs	r8, BASEPRI
    96e6:	f383 8812 	msr	BASEPRI_MAX, r3
    96ea:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    96ee:	68c3      	ldr	r3, [r0, #12]
    96f0:	4a32      	ldr	r2, [pc, #200]	; (97bc <z_impl_k_mutex_lock+0xe8>)
    96f2:	b16b      	cbz	r3, 9710 <z_impl_k_mutex_lock+0x3c>
    96f4:	6880      	ldr	r0, [r0, #8]
    96f6:	6891      	ldr	r1, [r2, #8]
    96f8:	4288      	cmp	r0, r1
    96fa:	d019      	beq.n	9730 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    96fc:	ea57 0306 	orrs.w	r3, r7, r6
    9700:	d118      	bne.n	9734 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    9702:	f388 8811 	msr	BASEPRI, r8
    9706:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    970a:	f06f 000f 	mvn.w	r0, #15
    970e:	e00c      	b.n	972a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    9710:	6891      	ldr	r1, [r2, #8]
    9712:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    9716:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    9718:	3301      	adds	r3, #1
    971a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    971c:	6893      	ldr	r3, [r2, #8]
    971e:	60a3      	str	r3, [r4, #8]
    9720:	f388 8811 	msr	BASEPRI, r8
    9724:	f3bf 8f6f 	isb	sy
		return 0;
    9728:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    972a:	b002      	add	sp, #8
    972c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    9730:	6921      	ldr	r1, [r4, #16]
    9732:	e7f0      	b.n	9716 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    9734:	f991 100e 	ldrsb.w	r1, [r1, #14]
    9738:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    973c:	4299      	cmp	r1, r3
    973e:	bfa8      	it	ge
    9740:	4619      	movge	r1, r3
    9742:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    9746:	4291      	cmp	r1, r2
    9748:	bfb8      	it	lt
    974a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    974c:	428b      	cmp	r3, r1
    974e:	dd2e      	ble.n	97ae <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    9750:	f002 fbcc 	bl	beec <adjust_owner_prio.isra.0>
    9754:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    9756:	e9cd 7600 	strd	r7, r6, [sp]
    975a:	4819      	ldr	r0, [pc, #100]	; (97c0 <z_impl_k_mutex_lock+0xec>)
    975c:	4622      	mov	r2, r4
    975e:	4641      	mov	r1, r8
    9760:	f000 fbf6 	bl	9f50 <z_pend_curr>
	if (got_mutex == 0) {
    9764:	2800      	cmp	r0, #0
    9766:	d0e0      	beq.n	972a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    9768:	f04f 0320 	mov.w	r3, #32
    976c:	f3ef 8611 	mrs	r6, BASEPRI
    9770:	f383 8812 	msr	BASEPRI_MAX, r3
    9774:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    9778:	6823      	ldr	r3, [r4, #0]
    977a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    977c:	429c      	cmp	r4, r3
    977e:	d00a      	beq.n	9796 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    9780:	b14b      	cbz	r3, 9796 <z_impl_k_mutex_lock+0xc2>
    9782:	f993 300e 	ldrsb.w	r3, [r3, #14]
    9786:	4299      	cmp	r1, r3
    9788:	bfa8      	it	ge
    978a:	4619      	movge	r1, r3
    978c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    9790:	4299      	cmp	r1, r3
    9792:	bfb8      	it	lt
    9794:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    9796:	68a0      	ldr	r0, [r4, #8]
    9798:	f002 fba8 	bl	beec <adjust_owner_prio.isra.0>
    979c:	b900      	cbnz	r0, 97a0 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    979e:	b145      	cbz	r5, 97b2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    97a0:	4807      	ldr	r0, [pc, #28]	; (97c0 <z_impl_k_mutex_lock+0xec>)
    97a2:	4631      	mov	r1, r6
    97a4:	f000 fa80 	bl	9ca8 <z_reschedule>
	return -EAGAIN;
    97a8:	f06f 000a 	mvn.w	r0, #10
    97ac:	e7bd      	b.n	972a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    97ae:	2500      	movs	r5, #0
    97b0:	e7d1      	b.n	9756 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    97b2:	f386 8811 	msr	BASEPRI, r6
    97b6:	f3bf 8f6f 	isb	sy
    97ba:	e7f5      	b.n	97a8 <z_impl_k_mutex_lock+0xd4>
    97bc:	20001970 	.word	0x20001970
    97c0:	20001df4 	.word	0x20001df4

000097c4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    97c4:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    97c6:	6883      	ldr	r3, [r0, #8]
{
    97c8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    97ca:	2b00      	cmp	r3, #0
    97cc:	d032      	beq.n	9834 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    97ce:	4a1c      	ldr	r2, [pc, #112]	; (9840 <z_impl_k_mutex_unlock+0x7c>)
    97d0:	6892      	ldr	r2, [r2, #8]
    97d2:	4293      	cmp	r3, r2
    97d4:	d131      	bne.n	983a <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    97d6:	7bda      	ldrb	r2, [r3, #15]
    97d8:	3a01      	subs	r2, #1
    97da:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    97dc:	68c3      	ldr	r3, [r0, #12]
    97de:	2b01      	cmp	r3, #1
    97e0:	d905      	bls.n	97ee <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    97e2:	3b01      	subs	r3, #1
    97e4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    97e6:	f000 fc41 	bl	a06c <k_sched_unlock>

	return 0;
    97ea:	2000      	movs	r0, #0
}
    97ec:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    97ee:	f04f 0320 	mov.w	r3, #32
    97f2:	f3ef 8511 	mrs	r5, BASEPRI
    97f6:	f383 8812 	msr	BASEPRI_MAX, r3
    97fa:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    97fe:	6901      	ldr	r1, [r0, #16]
    9800:	6880      	ldr	r0, [r0, #8]
    9802:	f002 fb73 	bl	beec <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    9806:	4620      	mov	r0, r4
    9808:	f002 fd2d 	bl	c266 <z_unpend_first_thread>
	mutex->owner = new_owner;
    980c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    980e:	b158      	cbz	r0, 9828 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    9810:	f990 200e 	ldrsb.w	r2, [r0, #14]
    9814:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    9816:	2200      	movs	r2, #0
    9818:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    981a:	f002 fcb3 	bl	c184 <z_ready_thread>
		z_reschedule(&lock, key);
    981e:	4809      	ldr	r0, [pc, #36]	; (9844 <z_impl_k_mutex_unlock+0x80>)
    9820:	4629      	mov	r1, r5
    9822:	f000 fa41 	bl	9ca8 <z_reschedule>
    9826:	e7de      	b.n	97e6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    9828:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    982a:	f385 8811 	msr	BASEPRI, r5
    982e:	f3bf 8f6f 	isb	sy
    9832:	e7d8      	b.n	97e6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    9834:	f06f 0015 	mvn.w	r0, #21
    9838:	e7d8      	b.n	97ec <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    983a:	f04f 30ff 	mov.w	r0, #4294967295
    983e:	e7d5      	b.n	97ec <z_impl_k_mutex_unlock+0x28>
    9840:	20001970 	.word	0x20001970
    9844:	20001df4 	.word	0x20001df4

00009848 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    9848:	b537      	push	{r0, r1, r2, r4, r5, lr}
    984a:	4611      	mov	r1, r2
	__asm__ volatile(
    984c:	f04f 0220 	mov.w	r2, #32
    9850:	f3ef 8511 	mrs	r5, BASEPRI
    9854:	f382 8812 	msr	BASEPRI_MAX, r2
    9858:	f3bf 8f6f 	isb	sy
    985c:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    985e:	b19c      	cbz	r4, 9888 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    9860:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    9862:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    9864:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    9868:	4294      	cmp	r4, r2
	list->head = node;
    986a:	6003      	str	r3, [r0, #0]
	list->tail = node;
    986c:	bf08      	it	eq
    986e:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    9870:	2101      	movs	r1, #1
    9872:	4620      	mov	r0, r4
    9874:	f002 fba9 	bl	bfca <z_queue_node_peek>
    9878:	4604      	mov	r4, r0
	__asm__ volatile(
    987a:	f385 8811 	msr	BASEPRI, r5
    987e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    9882:	4620      	mov	r0, r4
    9884:	b003      	add	sp, #12
    9886:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    9888:	ea51 0203 	orrs.w	r2, r1, r3
    988c:	d0f5      	beq.n	987a <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    988e:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    9892:	e9cd 1300 	strd	r1, r3, [sp]
    9896:	4610      	mov	r0, r2
    9898:	4629      	mov	r1, r5
    989a:	f000 fb59 	bl	9f50 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    989e:	2800      	cmp	r0, #0
    98a0:	d1ef      	bne.n	9882 <z_impl_k_queue_get+0x3a>
    98a2:	4b02      	ldr	r3, [pc, #8]	; (98ac <z_impl_k_queue_get+0x64>)
    98a4:	689b      	ldr	r3, [r3, #8]
    98a6:	695c      	ldr	r4, [r3, #20]
    98a8:	e7eb      	b.n	9882 <z_impl_k_queue_get+0x3a>
    98aa:	bf00      	nop
    98ac:	20001970 	.word	0x20001970

000098b0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    98b0:	b538      	push	{r3, r4, r5, lr}
    98b2:	4604      	mov	r4, r0
	__asm__ volatile(
    98b4:	f04f 0320 	mov.w	r3, #32
    98b8:	f3ef 8511 	mrs	r5, BASEPRI
    98bc:	f383 8812 	msr	BASEPRI_MAX, r3
    98c0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    98c4:	f002 fccf 	bl	c266 <z_unpend_first_thread>

	if (thread != NULL) {
    98c8:	b148      	cbz	r0, 98de <z_impl_k_sem_give+0x2e>
    98ca:	2200      	movs	r2, #0
    98cc:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    98ce:	f002 fc59 	bl	c184 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    98d2:	4629      	mov	r1, r5
    98d4:	4805      	ldr	r0, [pc, #20]	; (98ec <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    98d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    98da:	f000 b9e5 	b.w	9ca8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    98de:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    98e2:	429a      	cmp	r2, r3
    98e4:	bf18      	it	ne
    98e6:	3301      	addne	r3, #1
    98e8:	60a3      	str	r3, [r4, #8]
}
    98ea:	e7f2      	b.n	98d2 <z_impl_k_sem_give+0x22>
    98ec:	20001df4 	.word	0x20001df4

000098f0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    98f0:	b513      	push	{r0, r1, r4, lr}
    98f2:	f04f 0420 	mov.w	r4, #32
    98f6:	f3ef 8111 	mrs	r1, BASEPRI
    98fa:	f384 8812 	msr	BASEPRI_MAX, r4
    98fe:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    9902:	6884      	ldr	r4, [r0, #8]
    9904:	b144      	cbz	r4, 9918 <z_impl_k_sem_take+0x28>
		sem->count--;
    9906:	3c01      	subs	r4, #1
    9908:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    990a:	f381 8811 	msr	BASEPRI, r1
    990e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    9912:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    9914:	b002      	add	sp, #8
    9916:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    9918:	ea52 0403 	orrs.w	r4, r2, r3
    991c:	d106      	bne.n	992c <z_impl_k_sem_take+0x3c>
    991e:	f381 8811 	msr	BASEPRI, r1
    9922:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    9926:	f06f 000f 	mvn.w	r0, #15
    992a:	e7f3      	b.n	9914 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    992c:	e9cd 2300 	strd	r2, r3, [sp]
    9930:	4602      	mov	r2, r0
    9932:	4802      	ldr	r0, [pc, #8]	; (993c <z_impl_k_sem_take+0x4c>)
    9934:	f000 fb0c 	bl	9f50 <z_pend_curr>
	return ret;
    9938:	e7ec      	b.n	9914 <z_impl_k_sem_take+0x24>
    993a:	bf00      	nop
    993c:	20001df4 	.word	0x20001df4

00009940 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    9940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    9942:	4b09      	ldr	r3, [pc, #36]	; (9968 <k_sys_work_q_init+0x28>)
    9944:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    9946:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    9948:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    994a:	9300      	str	r3, [sp, #0]
    994c:	4907      	ldr	r1, [pc, #28]	; (996c <k_sys_work_q_init+0x2c>)
    994e:	4808      	ldr	r0, [pc, #32]	; (9970 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    9950:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    9954:	f04f 33ff 	mov.w	r3, #4294967295
    9958:	f44f 6280 	mov.w	r2, #1024	; 0x400
    995c:	f000 f8f6 	bl	9b4c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    9960:	4620      	mov	r0, r4
    9962:	b004      	add	sp, #16
    9964:	bd10      	pop	{r4, pc}
    9966:	bf00      	nop
    9968:	0000eebf 	.word	0x0000eebf
    996c:	200032a0 	.word	0x200032a0
    9970:	20000948 	.word	0x20000948

00009974 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    9974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    9978:	4e47      	ldr	r6, [pc, #284]	; (9a98 <work_queue_main+0x124>)
    997a:	b085      	sub	sp, #20
    997c:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    997e:	f04f 38ff 	mov.w	r8, #4294967295
    9982:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
    9986:	f04f 0320 	mov.w	r3, #32
    998a:	f3ef 8711 	mrs	r7, BASEPRI
    998e:	f383 8812 	msr	BASEPRI_MAX, r3
    9992:	f3bf 8f6f 	isb	sy
    9996:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    999a:	b98d      	cbnz	r5, 99c0 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    999c:	2102      	movs	r1, #2
    999e:	f104 0098 	add.w	r0, r4, #152	; 0x98
    99a2:	f002 fb35 	bl	c010 <flag_test_and_clear>
    99a6:	2800      	cmp	r0, #0
    99a8:	d135      	bne.n	9a16 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    99aa:	2300      	movs	r3, #0
    99ac:	e9cd 8900 	strd	r8, r9, [sp]
    99b0:	9302      	str	r3, [sp, #8]
    99b2:	f104 0288 	add.w	r2, r4, #136	; 0x88
    99b6:	4639      	mov	r1, r7
    99b8:	4838      	ldr	r0, [pc, #224]	; (9a9c <work_queue_main+0x128>)
    99ba:	f000 fc79 	bl	a2b0 <z_sched_wait>
			continue;
    99be:	e7e2      	b.n	9986 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    99c0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    99c4:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    99c6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    99ca:	4295      	cmp	r5, r2
    99cc:	d101      	bne.n	99d2 <work_queue_main+0x5e>
	list->tail = node;
    99ce:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    99d2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    99d6:	f043 0302 	orr.w	r3, r3, #2
    99da:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    99de:	68eb      	ldr	r3, [r5, #12]
    99e0:	f023 0304 	bic.w	r3, r3, #4
    99e4:	f043 0301 	orr.w	r3, r3, #1
    99e8:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    99ea:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    99ec:	f387 8811 	msr	BASEPRI, r7
    99f0:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    99f4:	4628      	mov	r0, r5
    99f6:	4798      	blx	r3
	__asm__ volatile(
    99f8:	f04f 0320 	mov.w	r3, #32
    99fc:	f3ef 8b11 	mrs	fp, BASEPRI
    9a00:	f383 8812 	msr	BASEPRI_MAX, r3
    9a04:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    9a08:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9a0a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    9a0c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9a10:	d40b      	bmi.n	9a2a <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
    9a12:	60ea      	str	r2, [r5, #12]
    9a14:	e00e      	b.n	9a34 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    9a16:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    9a1a:	2200      	movs	r2, #0
    9a1c:	2101      	movs	r1, #1
    9a1e:	4628      	mov	r0, r5
    9a20:	f002 fc49 	bl	c2b6 <z_sched_wake>
    9a24:	2800      	cmp	r0, #0
    9a26:	d1f8      	bne.n	9a1a <work_queue_main+0xa6>
    9a28:	e7bf      	b.n	99aa <work_queue_main+0x36>
	return list->head;
    9a2a:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    9a2c:	f023 0303 	bic.w	r3, r3, #3
    9a30:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    9a32:	b970      	cbnz	r0, 9a52 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
    9a34:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    9a38:	f023 0302 	bic.w	r3, r3, #2
    9a3c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    9a40:	f38b 8811 	msr	BASEPRI, fp
    9a44:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    9a48:	05d8      	lsls	r0, r3, #23
    9a4a:	d49c      	bmi.n	9986 <work_queue_main+0x12>
	z_impl_k_yield();
    9a4c:	f000 fb36 	bl	a0bc <z_impl_k_yield>
}
    9a50:	e799      	b.n	9986 <work_queue_main+0x12>
	return node->next;
    9a52:	2700      	movs	r7, #0
    9a54:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    9a58:	463b      	mov	r3, r7
		if (wc->work == work) {
    9a5a:	6842      	ldr	r2, [r0, #4]
    9a5c:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    9a5e:	4601      	mov	r1, r0
		if (wc->work == work) {
    9a60:	d10c      	bne.n	9a7c <work_queue_main+0x108>
	return node->next;
    9a62:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    9a64:	b997      	cbnz	r7, 9a8c <work_queue_main+0x118>
    9a66:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    9a68:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    9a6a:	4282      	cmp	r2, r0
    9a6c:	d100      	bne.n	9a70 <work_queue_main+0xfc>
	list->tail = node;
    9a6e:	6071      	str	r1, [r6, #4]
	parent->next = child;
    9a70:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    9a74:	f7ff ff1c 	bl	98b0 <z_impl_k_sem_give>
}
    9a78:	4639      	mov	r1, r7
    9a7a:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    9a7c:	f1ba 0f00 	cmp.w	sl, #0
    9a80:	d0d8      	beq.n	9a34 <work_queue_main+0xc0>
	return node->next;
    9a82:	4650      	mov	r0, sl
    9a84:	460f      	mov	r7, r1
    9a86:	f8da a000 	ldr.w	sl, [sl]
    9a8a:	e7e6      	b.n	9a5a <work_queue_main+0xe6>
	return list->tail;
    9a8c:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
    9a8e:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    9a90:	4290      	cmp	r0, r2
	list->tail = node;
    9a92:	bf08      	it	eq
    9a94:	6077      	streq	r7, [r6, #4]
}
    9a96:	e7eb      	b.n	9a70 <work_queue_main+0xfc>
    9a98:	20001998 	.word	0x20001998
    9a9c:	20001df4 	.word	0x20001df4

00009aa0 <submit_to_queue_locked>:
{
    9aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    9aa2:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9aa4:	079a      	lsls	r2, r3, #30
{
    9aa6:	4604      	mov	r4, r0
    9aa8:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9aaa:	f3c3 0540 	ubfx	r5, r3, #1, #1
    9aae:	d41f      	bmi.n	9af0 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    9ab0:	075f      	lsls	r7, r3, #29
    9ab2:	d41f      	bmi.n	9af4 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    9ab4:	680a      	ldr	r2, [r1, #0]
    9ab6:	b90a      	cbnz	r2, 9abc <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    9ab8:	6882      	ldr	r2, [r0, #8]
    9aba:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    9abc:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    9abe:	bf44      	itt	mi
    9ac0:	68a3      	ldrmi	r3, [r4, #8]
    9ac2:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    9ac4:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    9ac6:	bf4c      	ite	mi
    9ac8:	2502      	movmi	r5, #2
		ret = 1;
    9aca:	2501      	movpl	r5, #1
	if (queue == NULL) {
    9acc:	b37f      	cbz	r7, 9b2e <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    9ace:	4b1b      	ldr	r3, [pc, #108]	; (9b3c <submit_to_queue_locked+0x9c>)
    9ad0:	689b      	ldr	r3, [r3, #8]
    9ad2:	42bb      	cmp	r3, r7
    9ad4:	d111      	bne.n	9afa <submit_to_queue_locked+0x5a>
    9ad6:	f002 f9f5 	bl	bec4 <k_is_in_isr>
    9ada:	f080 0001 	eor.w	r0, r0, #1
    9ade:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
    9ae0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    9ae4:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    9ae6:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    9aea:	d523      	bpl.n	9b34 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    9aec:	b13a      	cbz	r2, 9afe <submit_to_queue_locked+0x5e>
    9aee:	b940      	cbnz	r0, 9b02 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    9af0:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    9af4:	2300      	movs	r3, #0
    9af6:	6033      	str	r3, [r6, #0]
	return ret;
    9af8:	e013      	b.n	9b22 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    9afa:	2000      	movs	r0, #0
    9afc:	e7f0      	b.n	9ae0 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    9afe:	071b      	lsls	r3, r3, #28
    9b00:	d4f6      	bmi.n	9af0 <submit_to_queue_locked+0x50>
	parent->next = child;
    9b02:	2300      	movs	r3, #0
    9b04:	6023      	str	r3, [r4, #0]
	return list->tail;
    9b06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    9b0a:	b963      	cbnz	r3, 9b26 <submit_to_queue_locked+0x86>
	list->head = node;
    9b0c:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    9b10:	4638      	mov	r0, r7
    9b12:	f002 fa88 	bl	c026 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    9b16:	68e3      	ldr	r3, [r4, #12]
    9b18:	f043 0304 	orr.w	r3, r3, #4
    9b1c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    9b1e:	6833      	ldr	r3, [r6, #0]
    9b20:	60a3      	str	r3, [r4, #8]
}
    9b22:	4628      	mov	r0, r5
    9b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    9b26:	601c      	str	r4, [r3, #0]
	list->tail = node;
    9b28:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    9b2c:	e7f0      	b.n	9b10 <submit_to_queue_locked+0x70>
		return -EINVAL;
    9b2e:	f06f 0515 	mvn.w	r5, #21
    9b32:	e7df      	b.n	9af4 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    9b34:	f06f 0512 	mvn.w	r5, #18
    9b38:	e7dc      	b.n	9af4 <submit_to_queue_locked+0x54>
    9b3a:	bf00      	nop
    9b3c:	20001970 	.word	0x20001970

00009b40 <k_work_submit>:
{
    9b40:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    9b42:	4801      	ldr	r0, [pc, #4]	; (9b48 <k_work_submit+0x8>)
    9b44:	f002 ba9e 	b.w	c084 <k_work_submit_to_queue>
    9b48:	20000948 	.word	0x20000948

00009b4c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    9b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b4e:	b089      	sub	sp, #36	; 0x24
    9b50:	4604      	mov	r4, r0
	list->head = NULL;
    9b52:	2000      	movs	r0, #0
	list->tail = NULL;
    9b54:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    9b58:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    9b5a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    9b5e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    9b62:	f104 0090 	add.w	r0, r4, #144	; 0x90
    9b66:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    9b6a:	b31d      	cbz	r5, 9bb4 <k_work_queue_start+0x68>
    9b6c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    9b6e:	2800      	cmp	r0, #0
    9b70:	f240 1001 	movw	r0, #257	; 0x101
    9b74:	bf08      	it	eq
    9b76:	2001      	moveq	r0, #1
	*flagp = flags;
    9b78:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    9b7c:	2000      	movs	r0, #0
    9b7e:	f04f 36ff 	mov.w	r6, #4294967295
    9b82:	f04f 37ff 	mov.w	r7, #4294967295
    9b86:	e9cd 3003 	strd	r3, r0, [sp, #12]
    9b8a:	e9cd 0001 	strd	r0, r0, [sp, #4]
    9b8e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    9b92:	4b09      	ldr	r3, [pc, #36]	; (9bb8 <k_work_queue_start+0x6c>)
    9b94:	9400      	str	r4, [sp, #0]
    9b96:	4620      	mov	r0, r4
    9b98:	f7ff fcf8 	bl	958c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    9b9c:	b125      	cbz	r5, 9ba8 <k_work_queue_start+0x5c>
    9b9e:	6829      	ldr	r1, [r5, #0]
    9ba0:	b111      	cbz	r1, 9ba8 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    9ba2:	4620      	mov	r0, r4
    9ba4:	f002 f994 	bl	bed0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    9ba8:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    9baa:	b009      	add	sp, #36	; 0x24
    9bac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9bb0:	f002 b993 	b.w	beda <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    9bb4:	2001      	movs	r0, #1
    9bb6:	e7df      	b.n	9b78 <k_work_queue_start+0x2c>
    9bb8:	00009975 	.word	0x00009975

00009bbc <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    9bbc:	b513      	push	{r0, r1, r4, lr}
    9bbe:	9001      	str	r0, [sp, #4]
    9bc0:	4608      	mov	r0, r1
	__asm__ volatile(
    9bc2:	f04f 0120 	mov.w	r1, #32
    9bc6:	f3ef 8411 	mrs	r4, BASEPRI
    9bca:	f381 8812 	msr	BASEPRI_MAX, r1
    9bce:	f3bf 8f6f 	isb	sy
	return *flagp;
    9bd2:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    9bd4:	f011 0f0e 	tst.w	r1, #14
    9bd8:	d116      	bne.n	9c08 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    9bda:	ea53 0c02 	orrs.w	ip, r3, r2
    9bde:	d108      	bne.n	9bf2 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
    9be0:	a901      	add	r1, sp, #4
    9be2:	f7ff ff5d 	bl	9aa0 <submit_to_queue_locked>
	__asm__ volatile(
    9be6:	f384 8811 	msr	BASEPRI, r4
    9bea:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    9bee:	b002      	add	sp, #8
    9bf0:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
    9bf2:	f041 0108 	orr.w	r1, r1, #8
    9bf6:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    9bf8:	9901      	ldr	r1, [sp, #4]
    9bfa:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    9bfc:	3010      	adds	r0, #16
    9bfe:	4903      	ldr	r1, [pc, #12]	; (9c0c <k_work_schedule_for_queue+0x50>)
    9c00:	f000 fbcc 	bl	a39c <z_add_timeout>
	return ret;
    9c04:	2001      	movs	r0, #1
    9c06:	e7ee      	b.n	9be6 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
    9c08:	2000      	movs	r0, #0
    9c0a:	e7ec      	b.n	9be6 <k_work_schedule_for_queue+0x2a>
    9c0c:	0000c035 	.word	0x0000c035

00009c10 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
    9c10:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
    9c12:	4801      	ldr	r0, [pc, #4]	; (9c18 <k_work_schedule+0x8>)
    9c14:	f7ff bfd2 	b.w	9bbc <k_work_schedule_for_queue>
    9c18:	20000948 	.word	0x20000948

00009c1c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    9c1c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    9c1e:	4d07      	ldr	r5, [pc, #28]	; (9c3c <z_reset_time_slice+0x20>)
    9c20:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    9c22:	b154      	cbz	r4, 9c3a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    9c24:	f7fc fcb4 	bl	6590 <sys_clock_elapsed>
    9c28:	4b05      	ldr	r3, [pc, #20]	; (9c40 <z_reset_time_slice+0x24>)
    9c2a:	4404      	add	r4, r0
    9c2c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    9c2e:	6828      	ldr	r0, [r5, #0]
    9c30:	2100      	movs	r1, #0
	}
}
    9c32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    9c36:	f002 bb81 	b.w	c33c <z_set_timeout_expiry>
}
    9c3a:	bd38      	pop	{r3, r4, r5, pc}
    9c3c:	200019a8 	.word	0x200019a8
    9c40:	20001970 	.word	0x20001970

00009c44 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    9c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9c46:	4604      	mov	r4, r0
    9c48:	460d      	mov	r5, r1
	__asm__ volatile(
    9c4a:	f04f 0320 	mov.w	r3, #32
    9c4e:	f3ef 8711 	mrs	r7, BASEPRI
    9c52:	f383 8812 	msr	BASEPRI_MAX, r3
    9c56:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    9c5a:	4e10      	ldr	r6, [pc, #64]	; (9c9c <k_sched_time_slice_set+0x58>)
    9c5c:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    9c5e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    9c62:	f240 30e7 	movw	r0, #999	; 0x3e7
    9c66:	6131      	str	r1, [r6, #16]
    9c68:	2300      	movs	r3, #0
    9c6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9c6e:	fbe4 010c 	umlal	r0, r1, r4, ip
    9c72:	f7f6 fa35 	bl	e0 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    9c76:	2c00      	cmp	r4, #0
    9c78:	4b09      	ldr	r3, [pc, #36]	; (9ca0 <k_sched_time_slice_set+0x5c>)
    9c7a:	dc0a      	bgt.n	9c92 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    9c7c:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    9c7e:	4b09      	ldr	r3, [pc, #36]	; (9ca4 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    9c80:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    9c82:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    9c84:	f7ff ffca 	bl	9c1c <z_reset_time_slice>
	__asm__ volatile(
    9c88:	f387 8811 	msr	BASEPRI, r7
    9c8c:	f3bf 8f6f 	isb	sy
	}
}
    9c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    9c92:	2802      	cmp	r0, #2
    9c94:	bfb8      	it	lt
    9c96:	2002      	movlt	r0, #2
    9c98:	e7f0      	b.n	9c7c <k_sched_time_slice_set+0x38>
    9c9a:	bf00      	nop
    9c9c:	20001970 	.word	0x20001970
    9ca0:	200019a8 	.word	0x200019a8
    9ca4:	200019a4 	.word	0x200019a4

00009ca8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    9ca8:	b949      	cbnz	r1, 9cbe <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9caa:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    9cae:	b930      	cbnz	r0, 9cbe <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    9cb0:	4b05      	ldr	r3, [pc, #20]	; (9cc8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    9cb2:	69da      	ldr	r2, [r3, #28]
    9cb4:	689b      	ldr	r3, [r3, #8]
    9cb6:	429a      	cmp	r2, r3
    9cb8:	d001      	beq.n	9cbe <z_reschedule+0x16>
	ret = arch_swap(key);
    9cba:	f7f9 bc25 	b.w	3508 <arch_swap>
    9cbe:	f381 8811 	msr	BASEPRI, r1
    9cc2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    9cc6:	4770      	bx	lr
    9cc8:	20001970 	.word	0x20001970

00009ccc <k_sched_lock>:
	__asm__ volatile(
    9ccc:	f04f 0320 	mov.w	r3, #32
    9cd0:	f3ef 8111 	mrs	r1, BASEPRI
    9cd4:	f383 8812 	msr	BASEPRI_MAX, r3
    9cd8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    9cdc:	4b04      	ldr	r3, [pc, #16]	; (9cf0 <k_sched_lock+0x24>)
    9cde:	689a      	ldr	r2, [r3, #8]
    9ce0:	7bd3      	ldrb	r3, [r2, #15]
    9ce2:	3b01      	subs	r3, #1
    9ce4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    9ce6:	f381 8811 	msr	BASEPRI, r1
    9cea:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    9cee:	4770      	bx	lr
    9cf0:	20001970 	.word	0x20001970

00009cf4 <update_cache>:
{
    9cf4:	b538      	push	{r3, r4, r5, lr}
    9cf6:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    9cf8:	480c      	ldr	r0, [pc, #48]	; (9d2c <update_cache+0x38>)
    9cfa:	4d0d      	ldr	r5, [pc, #52]	; (9d30 <update_cache+0x3c>)
    9cfc:	f002 fa3c 	bl	c178 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    9d00:	4604      	mov	r4, r0
    9d02:	b900      	cbnz	r0, 9d06 <update_cache+0x12>
    9d04:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    9d06:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    9d08:	b94a      	cbnz	r2, 9d1e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    9d0a:	7b5a      	ldrb	r2, [r3, #13]
    9d0c:	06d2      	lsls	r2, r2, #27
    9d0e:	d106      	bne.n	9d1e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    9d10:	69a2      	ldr	r2, [r4, #24]
    9d12:	b922      	cbnz	r2, 9d1e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    9d14:	89da      	ldrh	r2, [r3, #14]
    9d16:	2a7f      	cmp	r2, #127	; 0x7f
    9d18:	d901      	bls.n	9d1e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    9d1a:	61eb      	str	r3, [r5, #28]
}
    9d1c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    9d1e:	429c      	cmp	r4, r3
    9d20:	d002      	beq.n	9d28 <update_cache+0x34>
			z_reset_time_slice(thread);
    9d22:	4620      	mov	r0, r4
    9d24:	f7ff ff7a 	bl	9c1c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    9d28:	61ec      	str	r4, [r5, #28]
}
    9d2a:	e7f7      	b.n	9d1c <update_cache+0x28>
    9d2c:	20001990 	.word	0x20001990
    9d30:	20001970 	.word	0x20001970

00009d34 <move_thread_to_end_of_prio_q>:
{
    9d34:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    9d36:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    9d3a:	7b43      	ldrb	r3, [r0, #13]
    9d3c:	2a00      	cmp	r2, #0
{
    9d3e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    9d40:	da04      	bge.n	9d4c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9d46:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    9d48:	f002 f9ca 	bl	c0e0 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    9d4c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    9d4e:	4a15      	ldr	r2, [pc, #84]	; (9da4 <move_thread_to_end_of_prio_q+0x70>)
    9d50:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9d54:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    9d56:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9d5a:	f102 0520 	add.w	r5, r2, #32
    9d5e:	42ab      	cmp	r3, r5
    9d60:	d01b      	beq.n	9d9a <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9d62:	b1d3      	cbz	r3, 9d9a <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    9d64:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    9d68:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    9d6c:	4286      	cmp	r6, r0
    9d6e:	d00f      	beq.n	9d90 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    9d70:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    9d72:	2800      	cmp	r0, #0
    9d74:	dd0c      	ble.n	9d90 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    9d76:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    9d78:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    9d7c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    9d7e:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    9d80:	6890      	ldr	r0, [r2, #8]
    9d82:	1a43      	subs	r3, r0, r1
    9d84:	4258      	negs	r0, r3
}
    9d86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    9d8a:	4158      	adcs	r0, r3
    9d8c:	f7ff bfb2 	b.w	9cf4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    9d90:	42a3      	cmp	r3, r4
    9d92:	d002      	beq.n	9d9a <move_thread_to_end_of_prio_q+0x66>
    9d94:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9d96:	2b00      	cmp	r3, #0
    9d98:	d1e6      	bne.n	9d68 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    9d9a:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    9d9e:	6021      	str	r1, [r4, #0]
	list->tail = node;
    9da0:	6251      	str	r1, [r2, #36]	; 0x24
}
    9da2:	e7ed      	b.n	9d80 <move_thread_to_end_of_prio_q+0x4c>
    9da4:	20001970 	.word	0x20001970

00009da8 <z_time_slice>:
{
    9da8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    9daa:	f04f 0320 	mov.w	r3, #32
    9dae:	f3ef 8511 	mrs	r5, BASEPRI
    9db2:	f383 8812 	msr	BASEPRI_MAX, r3
    9db6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    9dba:	4b17      	ldr	r3, [pc, #92]	; (9e18 <z_time_slice+0x70>)
    9dbc:	4a17      	ldr	r2, [pc, #92]	; (9e1c <z_time_slice+0x74>)
    9dbe:	689c      	ldr	r4, [r3, #8]
    9dc0:	6811      	ldr	r1, [r2, #0]
    9dc2:	428c      	cmp	r4, r1
    9dc4:	d107      	bne.n	9dd6 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    9dc6:	4620      	mov	r0, r4
    9dc8:	f7ff ff28 	bl	9c1c <z_reset_time_slice>
	__asm__ volatile(
    9dcc:	f385 8811 	msr	BASEPRI, r5
    9dd0:	f3bf 8f6f 	isb	sy
}
    9dd4:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    9dd6:	2100      	movs	r1, #0
    9dd8:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    9dda:	4a11      	ldr	r2, [pc, #68]	; (9e20 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    9ddc:	6812      	ldr	r2, [r2, #0]
    9dde:	b1c2      	cbz	r2, 9e12 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    9de0:	89e2      	ldrh	r2, [r4, #14]
    9de2:	2a7f      	cmp	r2, #127	; 0x7f
    9de4:	d815      	bhi.n	9e12 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    9de6:	7b62      	ldrb	r2, [r4, #13]
    9de8:	06d2      	lsls	r2, r2, #27
    9dea:	d112      	bne.n	9e12 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    9dec:	4a0d      	ldr	r2, [pc, #52]	; (9e24 <z_time_slice+0x7c>)
    9dee:	f994 100e 	ldrsb.w	r1, [r4, #14]
    9df2:	6812      	ldr	r2, [r2, #0]
    9df4:	4291      	cmp	r1, r2
    9df6:	db0c      	blt.n	9e12 <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    9df8:	4a0b      	ldr	r2, [pc, #44]	; (9e28 <z_time_slice+0x80>)
    9dfa:	4294      	cmp	r4, r2
    9dfc:	d009      	beq.n	9e12 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    9dfe:	691a      	ldr	r2, [r3, #16]
    9e00:	4282      	cmp	r2, r0
    9e02:	dc03      	bgt.n	9e0c <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    9e04:	4620      	mov	r0, r4
    9e06:	f7ff ff95 	bl	9d34 <move_thread_to_end_of_prio_q>
    9e0a:	e7dc      	b.n	9dc6 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    9e0c:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    9e0e:	611a      	str	r2, [r3, #16]
    9e10:	e7dc      	b.n	9dcc <z_time_slice+0x24>
    9e12:	2200      	movs	r2, #0
    9e14:	e7fb      	b.n	9e0e <z_time_slice+0x66>
    9e16:	bf00      	nop
    9e18:	20001970 	.word	0x20001970
    9e1c:	200019a0 	.word	0x200019a0
    9e20:	200019a8 	.word	0x200019a8
    9e24:	200019a4 	.word	0x200019a4
    9e28:	20000848 	.word	0x20000848

00009e2c <ready_thread>:
{
    9e2c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    9e2e:	f990 200d 	ldrsb.w	r2, [r0, #13]
    9e32:	7b43      	ldrb	r3, [r0, #13]
    9e34:	2a00      	cmp	r2, #0
    9e36:	db2a      	blt.n	9e8e <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    9e38:	06da      	lsls	r2, r3, #27
    9e3a:	d128      	bne.n	9e8e <ready_thread+0x62>
    9e3c:	6982      	ldr	r2, [r0, #24]
    9e3e:	bb32      	cbnz	r2, 9e8e <ready_thread+0x62>
	return list->head == list;
    9e40:	4a14      	ldr	r2, [pc, #80]	; (9e94 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    9e42:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9e46:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    9e48:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9e4c:	f102 0520 	add.w	r5, r2, #32
    9e50:	42ab      	cmp	r3, r5
    9e52:	d017      	beq.n	9e84 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9e54:	b1b3      	cbz	r3, 9e84 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    9e56:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    9e5a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    9e5e:	428e      	cmp	r6, r1
    9e60:	d00b      	beq.n	9e7a <ready_thread+0x4e>
		return b2 - b1;
    9e62:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    9e64:	2900      	cmp	r1, #0
    9e66:	dd08      	ble.n	9e7a <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    9e68:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    9e6a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    9e6e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    9e70:	6058      	str	r0, [r3, #4]
}
    9e72:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    9e74:	2000      	movs	r0, #0
    9e76:	f7ff bf3d 	b.w	9cf4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    9e7a:	42a3      	cmp	r3, r4
    9e7c:	d002      	beq.n	9e84 <ready_thread+0x58>
    9e7e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9e80:	2b00      	cmp	r3, #0
    9e82:	d1ea      	bne.n	9e5a <ready_thread+0x2e>
	node->prev = tail;
    9e84:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    9e88:	6020      	str	r0, [r4, #0]
	list->tail = node;
    9e8a:	6250      	str	r0, [r2, #36]	; 0x24
}
    9e8c:	e7f1      	b.n	9e72 <ready_thread+0x46>
}
    9e8e:	bc70      	pop	{r4, r5, r6}
    9e90:	4770      	bx	lr
    9e92:	bf00      	nop
    9e94:	20001970 	.word	0x20001970

00009e98 <z_sched_start>:
{
    9e98:	b510      	push	{r4, lr}
	__asm__ volatile(
    9e9a:	f04f 0220 	mov.w	r2, #32
    9e9e:	f3ef 8411 	mrs	r4, BASEPRI
    9ea2:	f382 8812 	msr	BASEPRI_MAX, r2
    9ea6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    9eaa:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    9eac:	0751      	lsls	r1, r2, #29
    9eae:	d404      	bmi.n	9eba <z_sched_start+0x22>
	__asm__ volatile(
    9eb0:	f384 8811 	msr	BASEPRI, r4
    9eb4:	f3bf 8f6f 	isb	sy
}
    9eb8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9eba:	f022 0204 	bic.w	r2, r2, #4
    9ebe:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    9ec0:	f7ff ffb4 	bl	9e2c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    9ec4:	4621      	mov	r1, r4
    9ec6:	4802      	ldr	r0, [pc, #8]	; (9ed0 <z_sched_start+0x38>)
}
    9ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    9ecc:	f7ff beec 	b.w	9ca8 <z_reschedule>
    9ed0:	20001df4 	.word	0x20001df4

00009ed4 <unready_thread>:
{
    9ed4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    9ed6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    9eda:	7b43      	ldrb	r3, [r0, #13]
    9edc:	2a00      	cmp	r2, #0
{
    9ede:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    9ee0:	da04      	bge.n	9eec <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9ee6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    9ee8:	f002 f8fa 	bl	c0e0 <sys_dlist_remove>
	update_cache(thread == _current);
    9eec:	4b04      	ldr	r3, [pc, #16]	; (9f00 <unready_thread+0x2c>)
    9eee:	6898      	ldr	r0, [r3, #8]
    9ef0:	1a43      	subs	r3, r0, r1
    9ef2:	4258      	negs	r0, r3
    9ef4:	4158      	adcs	r0, r3
}
    9ef6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    9efa:	f7ff befb 	b.w	9cf4 <update_cache>
    9efe:	bf00      	nop
    9f00:	20001970 	.word	0x20001970

00009f04 <pend>:
{
    9f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f08:	4606      	mov	r6, r0
    9f0a:	4615      	mov	r5, r2
    9f0c:	461c      	mov	r4, r3
	__asm__ volatile(
    9f0e:	f04f 0320 	mov.w	r3, #32
    9f12:	f3ef 8711 	mrs	r7, BASEPRI
    9f16:	f383 8812 	msr	BASEPRI_MAX, r3
    9f1a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    9f1e:	f002 f963 	bl	c1e8 <add_to_waitq_locked>
	__asm__ volatile(
    9f22:	f387 8811 	msr	BASEPRI, r7
    9f26:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9f2a:	f1b4 3fff 	cmp.w	r4, #4294967295
    9f2e:	bf08      	it	eq
    9f30:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    9f34:	d008      	beq.n	9f48 <pend+0x44>
    9f36:	462a      	mov	r2, r5
    9f38:	4623      	mov	r3, r4
    9f3a:	f106 0018 	add.w	r0, r6, #24
    9f3e:	4903      	ldr	r1, [pc, #12]	; (9f4c <pend+0x48>)
}
    9f40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9f44:	f000 ba2a 	b.w	a39c <z_add_timeout>
    9f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f4c:	0000c1a5 	.word	0x0000c1a5

00009f50 <z_pend_curr>:
{
    9f50:	b510      	push	{r4, lr}
	pending_current = _current;
    9f52:	4b07      	ldr	r3, [pc, #28]	; (9f70 <z_pend_curr+0x20>)
    9f54:	6898      	ldr	r0, [r3, #8]
    9f56:	4b07      	ldr	r3, [pc, #28]	; (9f74 <z_pend_curr+0x24>)
{
    9f58:	460c      	mov	r4, r1
	pending_current = _current;
    9f5a:	6018      	str	r0, [r3, #0]
{
    9f5c:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    9f5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    9f62:	f7ff ffcf 	bl	9f04 <pend>
    9f66:	4620      	mov	r0, r4
}
    9f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9f6c:	f7f9 bacc 	b.w	3508 <arch_swap>
    9f70:	20001970 	.word	0x20001970
    9f74:	200019a0 	.word	0x200019a0

00009f78 <z_set_prio>:
{
    9f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9f7a:	4604      	mov	r4, r0
	__asm__ volatile(
    9f7c:	f04f 0320 	mov.w	r3, #32
    9f80:	f3ef 8611 	mrs	r6, BASEPRI
    9f84:	f383 8812 	msr	BASEPRI_MAX, r3
    9f88:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    9f8c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    9f8e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    9f90:	b249      	sxtb	r1, r1
    9f92:	d133      	bne.n	9ffc <z_set_prio+0x84>
		if (need_sched) {
    9f94:	6982      	ldr	r2, [r0, #24]
    9f96:	bb8a      	cbnz	r2, 9ffc <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9f9c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    9f9e:	f002 f89f 	bl	c0e0 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    9fa2:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    9fa4:	4a17      	ldr	r2, [pc, #92]	; (a004 <z_set_prio+0x8c>)
				thread->base.prio = prio;
    9fa6:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    9fa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9fac:	7343      	strb	r3, [r0, #13]
    9fae:	4610      	mov	r0, r2
    9fb0:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9fb4:	4283      	cmp	r3, r0
    9fb6:	d01b      	beq.n	9ff0 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9fb8:	b1d3      	cbz	r3, 9ff0 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    9fba:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    9fbc:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    9fc0:	42a9      	cmp	r1, r5
    9fc2:	d010      	beq.n	9fe6 <z_set_prio+0x6e>
		return b2 - b1;
    9fc4:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    9fc6:	2d00      	cmp	r5, #0
    9fc8:	dd0d      	ble.n	9fe6 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    9fca:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    9fcc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    9fd0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    9fd2:	605c      	str	r4, [r3, #4]
			update_cache(1);
    9fd4:	2001      	movs	r0, #1
    9fd6:	f7ff fe8d 	bl	9cf4 <update_cache>
    9fda:	2001      	movs	r0, #1
	__asm__ volatile(
    9fdc:	f386 8811 	msr	BASEPRI, r6
    9fe0:	f3bf 8f6f 	isb	sy
}
    9fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    9fe6:	42bb      	cmp	r3, r7
    9fe8:	d002      	beq.n	9ff0 <z_set_prio+0x78>
    9fea:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9fec:	2b00      	cmp	r3, #0
    9fee:	d1e5      	bne.n	9fbc <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    9ff0:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    9ff2:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    9ff6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    9ff8:	6254      	str	r4, [r2, #36]	; 0x24
}
    9ffa:	e7eb      	b.n	9fd4 <z_set_prio+0x5c>
			thread->base.prio = prio;
    9ffc:	73a1      	strb	r1, [r4, #14]
    9ffe:	2000      	movs	r0, #0
    a000:	e7ec      	b.n	9fdc <z_set_prio+0x64>
    a002:	bf00      	nop
    a004:	20001970 	.word	0x20001970

0000a008 <z_impl_k_thread_suspend>:
{
    a008:	b570      	push	{r4, r5, r6, lr}
    a00a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    a00c:	3018      	adds	r0, #24
    a00e:	f002 f96f 	bl	c2f0 <z_abort_timeout>
	__asm__ volatile(
    a012:	f04f 0320 	mov.w	r3, #32
    a016:	f3ef 8611 	mrs	r6, BASEPRI
    a01a:	f383 8812 	msr	BASEPRI_MAX, r3
    a01e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    a022:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    a026:	7b63      	ldrb	r3, [r4, #13]
    a028:	2a00      	cmp	r2, #0
    a02a:	da05      	bge.n	a038 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a02c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a030:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    a032:	4620      	mov	r0, r4
    a034:	f002 f854 	bl	c0e0 <sys_dlist_remove>
		update_cache(thread == _current);
    a038:	4d0b      	ldr	r5, [pc, #44]	; (a068 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    a03a:	7b63      	ldrb	r3, [r4, #13]
    a03c:	68a8      	ldr	r0, [r5, #8]
    a03e:	f043 0310 	orr.w	r3, r3, #16
    a042:	7363      	strb	r3, [r4, #13]
    a044:	1b03      	subs	r3, r0, r4
    a046:	4258      	negs	r0, r3
    a048:	4158      	adcs	r0, r3
    a04a:	f7ff fe53 	bl	9cf4 <update_cache>
	__asm__ volatile(
    a04e:	f386 8811 	msr	BASEPRI, r6
    a052:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    a056:	68ab      	ldr	r3, [r5, #8]
    a058:	42a3      	cmp	r3, r4
    a05a:	d103      	bne.n	a064 <z_impl_k_thread_suspend+0x5c>
}
    a05c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    a060:	f002 b880 	b.w	c164 <z_reschedule_unlocked>
}
    a064:	bd70      	pop	{r4, r5, r6, pc}
    a066:	bf00      	nop
    a068:	20001970 	.word	0x20001970

0000a06c <k_sched_unlock>:
{
    a06c:	b510      	push	{r4, lr}
	__asm__ volatile(
    a06e:	f04f 0320 	mov.w	r3, #32
    a072:	f3ef 8411 	mrs	r4, BASEPRI
    a076:	f383 8812 	msr	BASEPRI_MAX, r3
    a07a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    a07e:	4b08      	ldr	r3, [pc, #32]	; (a0a0 <k_sched_unlock+0x34>)
    a080:	689a      	ldr	r2, [r3, #8]
    a082:	7bd3      	ldrb	r3, [r2, #15]
    a084:	3301      	adds	r3, #1
    a086:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    a088:	2000      	movs	r0, #0
    a08a:	f7ff fe33 	bl	9cf4 <update_cache>
	__asm__ volatile(
    a08e:	f384 8811 	msr	BASEPRI, r4
    a092:	f3bf 8f6f 	isb	sy
}
    a096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    a09a:	f002 b863 	b.w	c164 <z_reschedule_unlocked>
    a09e:	bf00      	nop
    a0a0:	20001970 	.word	0x20001970

0000a0a4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    a0a4:	4b04      	ldr	r3, [pc, #16]	; (a0b8 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    a0a6:	2100      	movs	r1, #0
    a0a8:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    a0ac:	e9c3 2208 	strd	r2, r2, [r3, #32]
    a0b0:	4608      	mov	r0, r1
    a0b2:	f7ff bdc7 	b.w	9c44 <k_sched_time_slice_set>
    a0b6:	bf00      	nop
    a0b8:	20001970 	.word	0x20001970

0000a0bc <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    a0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    a0be:	f04f 0320 	mov.w	r3, #32
    a0c2:	f3ef 8511 	mrs	r5, BASEPRI
    a0c6:	f383 8812 	msr	BASEPRI_MAX, r3
    a0ca:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    a0ce:	491a      	ldr	r1, [pc, #104]	; (a138 <z_impl_k_yield+0x7c>)
    a0d0:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a0d2:	7b43      	ldrb	r3, [r0, #13]
    a0d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a0d8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    a0da:	f002 f801 	bl	c0e0 <sys_dlist_remove>
	}
	queue_thread(_current);
    a0de:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    a0e0:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    a0e2:	4608      	mov	r0, r1
    a0e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    a0e8:	735a      	strb	r2, [r3, #13]
    a0ea:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a0ee:	4282      	cmp	r2, r0
    a0f0:	d01c      	beq.n	a12c <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a0f2:	b1da      	cbz	r2, a12c <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    a0f4:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    a0f6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    a0fa:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    a0fe:	42a6      	cmp	r6, r4
    a100:	d00f      	beq.n	a122 <z_impl_k_yield+0x66>
		return b2 - b1;
    a102:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    a104:	2c00      	cmp	r4, #0
    a106:	dd0c      	ble.n	a122 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    a108:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    a10a:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    a10e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    a110:	6053      	str	r3, [r2, #4]
	update_cache(1);
    a112:	2001      	movs	r0, #1
    a114:	f7ff fdee 	bl	9cf4 <update_cache>
    a118:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    a11a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a11e:	f7f9 b9f3 	b.w	3508 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    a122:	42ba      	cmp	r2, r7
    a124:	d002      	beq.n	a12c <z_impl_k_yield+0x70>
    a126:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a128:	2a00      	cmp	r2, #0
    a12a:	d1e6      	bne.n	a0fa <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    a12c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    a12e:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    a132:	6013      	str	r3, [r2, #0]
	list->tail = node;
    a134:	624b      	str	r3, [r1, #36]	; 0x24
}
    a136:	e7ec      	b.n	a112 <z_impl_k_yield+0x56>
    a138:	20001970 	.word	0x20001970

0000a13c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    a13c:	ea50 0301 	orrs.w	r3, r0, r1
{
    a140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a144:	4605      	mov	r5, r0
    a146:	460e      	mov	r6, r1
	if (ticks == 0) {
    a148:	d103      	bne.n	a152 <z_tick_sleep+0x16>
	z_impl_k_yield();
    a14a:	f7ff ffb7 	bl	a0bc <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    a14e:	2000      	movs	r0, #0
    a150:	e033      	b.n	a1ba <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    a152:	f06f 0401 	mvn.w	r4, #1
    a156:	1a24      	subs	r4, r4, r0
    a158:	f04f 33ff 	mov.w	r3, #4294967295
    a15c:	eb63 0301 	sbc.w	r3, r3, r1
    a160:	2c01      	cmp	r4, #1
    a162:	f173 0300 	sbcs.w	r3, r3, #0
    a166:	da02      	bge.n	a16e <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    a168:	f002 f902 	bl	c370 <sys_clock_tick_get_32>
    a16c:	1944      	adds	r4, r0, r5
    a16e:	f04f 0320 	mov.w	r3, #32
    a172:	f3ef 8811 	mrs	r8, BASEPRI
    a176:	f383 8812 	msr	BASEPRI_MAX, r3
    a17a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    a17e:	4f10      	ldr	r7, [pc, #64]	; (a1c0 <z_tick_sleep+0x84>)
    a180:	4b10      	ldr	r3, [pc, #64]	; (a1c4 <z_tick_sleep+0x88>)
    a182:	68b8      	ldr	r0, [r7, #8]
    a184:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    a186:	f7ff fea5 	bl	9ed4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    a18a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    a18c:	490e      	ldr	r1, [pc, #56]	; (a1c8 <z_tick_sleep+0x8c>)
    a18e:	462a      	mov	r2, r5
    a190:	4633      	mov	r3, r6
    a192:	3018      	adds	r0, #24
    a194:	f000 f902 	bl	a39c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    a198:	68ba      	ldr	r2, [r7, #8]
    a19a:	7b53      	ldrb	r3, [r2, #13]
    a19c:	f043 0310 	orr.w	r3, r3, #16
    a1a0:	7353      	strb	r3, [r2, #13]
    a1a2:	4640      	mov	r0, r8
    a1a4:	f7f9 f9b0 	bl	3508 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    a1a8:	f002 f8e2 	bl	c370 <sys_clock_tick_get_32>
    a1ac:	1a20      	subs	r0, r4, r0
    a1ae:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    a1b2:	2801      	cmp	r0, #1
    a1b4:	f173 0300 	sbcs.w	r3, r3, #0
    a1b8:	dbc9      	blt.n	a14e <z_tick_sleep+0x12>
}
    a1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a1be:	bf00      	nop
    a1c0:	20001970 	.word	0x20001970
    a1c4:	200019a0 	.word	0x200019a0
    a1c8:	0000c1a5 	.word	0x0000c1a5

0000a1cc <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a1cc:	f1b1 3fff 	cmp.w	r1, #4294967295
    a1d0:	bf08      	it	eq
    a1d2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    a1d6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a1d8:	d106      	bne.n	a1e8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    a1da:	4b08      	ldr	r3, [pc, #32]	; (a1fc <z_impl_k_sleep+0x30>)
    a1dc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    a1de:	f7ff ff13 	bl	a008 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    a1e2:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    a1e6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    a1e8:	f7ff ffa8 	bl	a13c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    a1ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    a1f0:	fb80 0303 	smull	r0, r3, r0, r3
    a1f4:	0bc0      	lsrs	r0, r0, #15
    a1f6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    a1fa:	e7f4      	b.n	a1e6 <z_impl_k_sleep+0x1a>
    a1fc:	20001970 	.word	0x20001970

0000a200 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    a200:	4b01      	ldr	r3, [pc, #4]	; (a208 <z_impl_z_current_get+0x8>)
    a202:	6898      	ldr	r0, [r3, #8]
    a204:	4770      	bx	lr
    a206:	bf00      	nop
    a208:	20001970 	.word	0x20001970

0000a20c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    a20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a210:	4604      	mov	r4, r0
    a212:	f04f 0320 	mov.w	r3, #32
    a216:	f3ef 8611 	mrs	r6, BASEPRI
    a21a:	f383 8812 	msr	BASEPRI_MAX, r3
    a21e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    a222:	7b43      	ldrb	r3, [r0, #13]
    a224:	071a      	lsls	r2, r3, #28
    a226:	d505      	bpl.n	a234 <z_thread_abort+0x28>
	__asm__ volatile(
    a228:	f386 8811 	msr	BASEPRI, r6
    a22c:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    a230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    a234:	f023 0220 	bic.w	r2, r3, #32
    a238:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    a23c:	09d2      	lsrs	r2, r2, #7
    a23e:	d120      	bne.n	a282 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    a240:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    a242:	68a3      	ldr	r3, [r4, #8]
    a244:	b113      	cbz	r3, a24c <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    a246:	4620      	mov	r0, r4
    a248:	f001 ff52 	bl	c0f0 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    a24c:	f104 0018 	add.w	r0, r4, #24
    a250:	f002 f84e 	bl	c2f0 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    a254:	f104 0758 	add.w	r7, r4, #88	; 0x58
    a258:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    a25c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a25e:	42bd      	cmp	r5, r7
    a260:	d000      	beq.n	a264 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    a262:	b9b5      	cbnz	r5, a292 <z_thread_abort+0x86>
		update_cache(1);
    a264:	2001      	movs	r0, #1
    a266:	f7ff fd45 	bl	9cf4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    a26a:	4b10      	ldr	r3, [pc, #64]	; (a2ac <z_thread_abort+0xa0>)
    a26c:	689b      	ldr	r3, [r3, #8]
    a26e:	42a3      	cmp	r3, r4
    a270:	d1da      	bne.n	a228 <z_thread_abort+0x1c>
    a272:	f3ef 8305 	mrs	r3, IPSR
    a276:	2b00      	cmp	r3, #0
    a278:	d1d6      	bne.n	a228 <z_thread_abort+0x1c>
    a27a:	4630      	mov	r0, r6
    a27c:	f7f9 f944 	bl	3508 <arch_swap>
	return ret;
    a280:	e7d2      	b.n	a228 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a282:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    a286:	f043 0308 	orr.w	r3, r3, #8
    a28a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    a28c:	f001 ff28 	bl	c0e0 <sys_dlist_remove>
}
    a290:	e7d7      	b.n	a242 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    a292:	4628      	mov	r0, r5
    a294:	f001 ff2c 	bl	c0f0 <unpend_thread_no_timeout>
    a298:	f105 0018 	add.w	r0, r5, #24
    a29c:	f002 f828 	bl	c2f0 <z_abort_timeout>
    a2a0:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    a2a4:	4628      	mov	r0, r5
    a2a6:	f7ff fdc1 	bl	9e2c <ready_thread>
    a2aa:	e7d7      	b.n	a25c <z_thread_abort+0x50>
    a2ac:	20001970 	.word	0x20001970

0000a2b0 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    a2b0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    a2b2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    a2b6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    a2b8:	e9cd 6700 	strd	r6, r7, [sp]
    a2bc:	f7ff fe48 	bl	9f50 <z_pend_curr>

	if (data != NULL) {
    a2c0:	b11c      	cbz	r4, a2ca <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    a2c2:	4b03      	ldr	r3, [pc, #12]	; (a2d0 <z_sched_wait+0x20>)
    a2c4:	689b      	ldr	r3, [r3, #8]
    a2c6:	695b      	ldr	r3, [r3, #20]
    a2c8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    a2ca:	b002      	add	sp, #8
    a2cc:	bdd0      	pop	{r4, r6, r7, pc}
    a2ce:	bf00      	nop
    a2d0:	20001970 	.word	0x20001970

0000a2d4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    a2d4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    a2d6:	4806      	ldr	r0, [pc, #24]	; (a2f0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    a2d8:	4a06      	ldr	r2, [pc, #24]	; (a2f4 <z_data_copy+0x20>)
    a2da:	4907      	ldr	r1, [pc, #28]	; (a2f8 <z_data_copy+0x24>)
    a2dc:	1a12      	subs	r2, r2, r0
    a2de:	f001 fdc6 	bl	be6e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    a2e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    a2e6:	4a05      	ldr	r2, [pc, #20]	; (a2fc <z_data_copy+0x28>)
    a2e8:	4905      	ldr	r1, [pc, #20]	; (a300 <z_data_copy+0x2c>)
    a2ea:	4806      	ldr	r0, [pc, #24]	; (a304 <z_data_copy+0x30>)
    a2ec:	f001 bdbf 	b.w	be6e <z_early_memcpy>
    a2f0:	20000000 	.word	0x20000000
    a2f4:	2000025c 	.word	0x2000025c
    a2f8:	0000ef00 	.word	0x0000ef00
    a2fc:	00000000 	.word	0x00000000
    a300:	0000ef00 	.word	0x0000ef00
    a304:	20000000 	.word	0x20000000

0000a308 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    a308:	4b03      	ldr	r3, [pc, #12]	; (a318 <elapsed+0x10>)
    a30a:	681b      	ldr	r3, [r3, #0]
    a30c:	b90b      	cbnz	r3, a312 <elapsed+0xa>
    a30e:	f7fc b93f 	b.w	6590 <sys_clock_elapsed>
}
    a312:	2000      	movs	r0, #0
    a314:	4770      	bx	lr
    a316:	bf00      	nop
    a318:	200019ac 	.word	0x200019ac

0000a31c <next_timeout>:
	return list->head == list;
    a31c:	4b10      	ldr	r3, [pc, #64]	; (a360 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    a31e:	b510      	push	{r4, lr}
    a320:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a322:	429c      	cmp	r4, r3
    a324:	bf08      	it	eq
    a326:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    a328:	f7ff ffee 	bl	a308 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    a32c:	b1a4      	cbz	r4, a358 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    a32e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    a332:	1a1b      	subs	r3, r3, r0
    a334:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    a338:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    a33c:	f170 0200 	sbcs.w	r2, r0, #0
    a340:	da0a      	bge.n	a358 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    a342:	2800      	cmp	r0, #0
    a344:	bfac      	ite	ge
    a346:	4618      	movge	r0, r3
    a348:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    a34a:	4b06      	ldr	r3, [pc, #24]	; (a364 <next_timeout+0x48>)
    a34c:	691b      	ldr	r3, [r3, #16]
    a34e:	b113      	cbz	r3, a356 <next_timeout+0x3a>
    a350:	4298      	cmp	r0, r3
    a352:	bfa8      	it	ge
    a354:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    a356:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    a358:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    a35c:	e7f5      	b.n	a34a <next_timeout+0x2e>
    a35e:	bf00      	nop
    a360:	200000f0 	.word	0x200000f0
    a364:	20001970 	.word	0x20001970

0000a368 <remove_timeout>:
{
    a368:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    a36a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a36c:	b168      	cbz	r0, a38a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    a36e:	4a0a      	ldr	r2, [pc, #40]	; (a398 <remove_timeout+0x30>)
    a370:	6852      	ldr	r2, [r2, #4]
    a372:	4290      	cmp	r0, r2
    a374:	d009      	beq.n	a38a <remove_timeout+0x22>
	if (next(t) != NULL) {
    a376:	b143      	cbz	r3, a38a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    a378:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    a37c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    a380:	1912      	adds	r2, r2, r4
    a382:	eb41 0105 	adc.w	r1, r1, r5
    a386:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    a38a:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    a38c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    a38e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    a390:	2300      	movs	r3, #0
	node->prev = NULL;
    a392:	e9c0 3300 	strd	r3, r3, [r0]
}
    a396:	bd30      	pop	{r4, r5, pc}
    a398:	200000f0 	.word	0x200000f0

0000a39c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a39c:	f1b3 3fff 	cmp.w	r3, #4294967295
    a3a0:	bf08      	it	eq
    a3a2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    a3a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a3a8:	4604      	mov	r4, r0
    a3aa:	461f      	mov	r7, r3
    a3ac:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a3ae:	d067      	beq.n	a480 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    a3b0:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    a3b2:	f04f 0320 	mov.w	r3, #32
    a3b6:	f3ef 8611 	mrs	r6, BASEPRI
    a3ba:	f383 8812 	msr	BASEPRI_MAX, r3
    a3be:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    a3c2:	f06f 0201 	mvn.w	r2, #1
    a3c6:	1b53      	subs	r3, r2, r5
    a3c8:	f04f 3cff 	mov.w	ip, #4294967295
    a3cc:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    a3d0:	2b00      	cmp	r3, #0
    a3d2:	db1b      	blt.n	a40c <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    a3d4:	4b2b      	ldr	r3, [pc, #172]	; (a484 <z_add_timeout+0xe8>)
    a3d6:	e9d3 1300 	ldrd	r1, r3, [r3]
    a3da:	1a52      	subs	r2, r2, r1
    a3dc:	eb6c 0303 	sbc.w	r3, ip, r3
    a3e0:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    a3e2:	eb63 0307 	sbc.w	r3, r3, r7
    a3e6:	2d01      	cmp	r5, #1
    a3e8:	f173 0200 	sbcs.w	r2, r3, #0
    a3ec:	bfbc      	itt	lt
    a3ee:	2501      	movlt	r5, #1
    a3f0:	2300      	movlt	r3, #0
    a3f2:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    a3f6:	4824      	ldr	r0, [pc, #144]	; (a488 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    a3f8:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a3fc:	4283      	cmp	r3, r0
    a3fe:	d118      	bne.n	a432 <z_add_timeout+0x96>
	node->prev = tail;
    a400:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    a404:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    a408:	6044      	str	r4, [r0, #4]
}
    a40a:	e026      	b.n	a45a <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    a40c:	f7ff ff7c 	bl	a308 <elapsed>
    a410:	3501      	adds	r5, #1
    a412:	f147 0700 	adc.w	r7, r7, #0
    a416:	182d      	adds	r5, r5, r0
    a418:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    a41c:	e9c4 5704 	strd	r5, r7, [r4, #16]
    a420:	e7e9      	b.n	a3f6 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    a422:	1a52      	subs	r2, r2, r1
    a424:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    a428:	459c      	cmp	ip, r3
    a42a:	e9c4 2504 	strd	r2, r5, [r4, #16]
    a42e:	d0e7      	beq.n	a400 <z_add_timeout+0x64>
    a430:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    a432:	2b00      	cmp	r3, #0
    a434:	d0e4      	beq.n	a400 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    a436:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    a43a:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    a43e:	428a      	cmp	r2, r1
    a440:	eb75 0e07 	sbcs.w	lr, r5, r7
    a444:	daed      	bge.n	a422 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    a446:	1a8a      	subs	r2, r1, r2
    a448:	eb67 0505 	sbc.w	r5, r7, r5
    a44c:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    a450:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    a452:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    a456:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    a458:	605c      	str	r4, [r3, #4]
	return list->head == list;
    a45a:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a45c:	4283      	cmp	r3, r0
    a45e:	d00b      	beq.n	a478 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    a460:	429c      	cmp	r4, r3
    a462:	d109      	bne.n	a478 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    a464:	f7ff ff5a 	bl	a31c <next_timeout>

			if (next_time == 0 ||
    a468:	b118      	cbz	r0, a472 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    a46a:	4b08      	ldr	r3, [pc, #32]	; (a48c <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    a46c:	691b      	ldr	r3, [r3, #16]
    a46e:	4283      	cmp	r3, r0
    a470:	d002      	beq.n	a478 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    a472:	2100      	movs	r1, #0
    a474:	f7fc f85a 	bl	652c <sys_clock_set_timeout>
	__asm__ volatile(
    a478:	f386 8811 	msr	BASEPRI, r6
    a47c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    a480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a482:	bf00      	nop
    a484:	200009e8 	.word	0x200009e8
    a488:	200000f0 	.word	0x200000f0
    a48c:	20001970 	.word	0x20001970

0000a490 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    a490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a494:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    a496:	f7ff fc87 	bl	9da8 <z_time_slice>
	__asm__ volatile(
    a49a:	f04f 0320 	mov.w	r3, #32
    a49e:	f3ef 8411 	mrs	r4, BASEPRI
    a4a2:	f383 8812 	msr	BASEPRI_MAX, r3
    a4a6:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    a4aa:	4e24      	ldr	r6, [pc, #144]	; (a53c <sys_clock_announce+0xac>)
	return list->head == list;
    a4ac:	f8df 8090 	ldr.w	r8, [pc, #144]	; a540 <sys_clock_announce+0xb0>
    a4b0:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    a4b2:	4d24      	ldr	r5, [pc, #144]	; (a544 <sys_clock_announce+0xb4>)
    a4b4:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    a4b8:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a4ba:	4540      	cmp	r0, r8
		curr_tick += dt;
    a4bc:	e9d5 1e00 	ldrd	r1, lr, [r5]
    a4c0:	ea4f 77e2 	mov.w	r7, r2, asr #31
    a4c4:	d00b      	beq.n	a4de <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    a4c6:	b150      	cbz	r0, a4de <sys_clock_announce+0x4e>
    a4c8:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    a4cc:	429a      	cmp	r2, r3
    a4ce:	eb77 090c 	sbcs.w	r9, r7, ip
    a4d2:	da16      	bge.n	a502 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    a4d4:	1a9b      	subs	r3, r3, r2
    a4d6:	eb6c 0c07 	sbc.w	ip, ip, r7
    a4da:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    a4de:	1852      	adds	r2, r2, r1
    a4e0:	eb4e 0707 	adc.w	r7, lr, r7
    a4e4:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    a4e8:	2500      	movs	r5, #0
    a4ea:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    a4ec:	f7ff ff16 	bl	a31c <next_timeout>
    a4f0:	4629      	mov	r1, r5
    a4f2:	f7fc f81b 	bl	652c <sys_clock_set_timeout>
	__asm__ volatile(
    a4f6:	f384 8811 	msr	BASEPRI, r4
    a4fa:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    a4fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    a502:	1859      	adds	r1, r3, r1
    a504:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    a508:	1ad3      	subs	r3, r2, r3
    a50a:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    a50c:	2200      	movs	r2, #0
    a50e:	2300      	movs	r3, #0
    a510:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    a514:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    a518:	f7ff ff26 	bl	a368 <remove_timeout>
    a51c:	f384 8811 	msr	BASEPRI, r4
    a520:	f3bf 8f6f 	isb	sy
		t->fn(t);
    a524:	6883      	ldr	r3, [r0, #8]
    a526:	4798      	blx	r3
	__asm__ volatile(
    a528:	f04f 0320 	mov.w	r3, #32
    a52c:	f3ef 8411 	mrs	r4, BASEPRI
    a530:	f383 8812 	msr	BASEPRI_MAX, r3
    a534:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    a538:	e7bc      	b.n	a4b4 <sys_clock_announce+0x24>
    a53a:	bf00      	nop
    a53c:	200019ac 	.word	0x200019ac
    a540:	200000f0 	.word	0x200000f0
    a544:	200009e8 	.word	0x200009e8

0000a548 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    a548:	b510      	push	{r4, lr}
    a54a:	f04f 0320 	mov.w	r3, #32
    a54e:	f3ef 8411 	mrs	r4, BASEPRI
    a552:	f383 8812 	msr	BASEPRI_MAX, r3
    a556:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    a55a:	f7fc f819 	bl	6590 <sys_clock_elapsed>
    a55e:	4a05      	ldr	r2, [pc, #20]	; (a574 <sys_clock_tick_get+0x2c>)
    a560:	e9d2 3100 	ldrd	r3, r1, [r2]
    a564:	18c0      	adds	r0, r0, r3
    a566:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    a56a:	f384 8811 	msr	BASEPRI, r4
    a56e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    a572:	bd10      	pop	{r4, pc}
    a574:	200009e8 	.word	0x200009e8

0000a578 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    a578:	b570      	push	{r4, r5, r6, lr}
    a57a:	4604      	mov	r4, r0
	__asm__ volatile(
    a57c:	f04f 0320 	mov.w	r3, #32
    a580:	f3ef 8511 	mrs	r5, BASEPRI
    a584:	f383 8812 	msr	BASEPRI_MAX, r3
    a588:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    a58c:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    a590:	3301      	adds	r3, #1
    a592:	f142 0200 	adc.w	r2, r2, #0
    a596:	2b02      	cmp	r3, #2
    a598:	f172 0300 	sbcs.w	r3, r2, #0
    a59c:	d304      	bcc.n	a5a8 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a59e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    a5a2:	4917      	ldr	r1, [pc, #92]	; (a600 <z_timer_expiration_handler+0x88>)
    a5a4:	f7ff fefa 	bl	a39c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    a5a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a5aa:	3301      	adds	r3, #1
    a5ac:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    a5ae:	6a23      	ldr	r3, [r4, #32]
    a5b0:	b173      	cbz	r3, a5d0 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
    a5b2:	f385 8811 	msr	BASEPRI, r5
    a5b6:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    a5ba:	6a23      	ldr	r3, [r4, #32]
    a5bc:	4620      	mov	r0, r4
    a5be:	4798      	blx	r3
	__asm__ volatile(
    a5c0:	f04f 0320 	mov.w	r3, #32
    a5c4:	f3ef 8511 	mrs	r5, BASEPRI
    a5c8:	f383 8812 	msr	BASEPRI_MAX, r3
    a5cc:	f3bf 8f6f 	isb	sy
	return list->head == list;
    a5d0:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a5d4:	42a6      	cmp	r6, r4
    a5d6:	d000      	beq.n	a5da <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    a5d8:	b926      	cbnz	r6, a5e4 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
    a5da:	f385 8811 	msr	BASEPRI, r5
    a5de:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    a5e2:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    a5e4:	4630      	mov	r0, r6
    a5e6:	f001 fd8d 	bl	c104 <z_unpend_thread_no_timeout>
    a5ea:	2300      	movs	r3, #0
    a5ec:	67b3      	str	r3, [r6, #120]	; 0x78
    a5ee:	f385 8811 	msr	BASEPRI, r5
    a5f2:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    a5f6:	4630      	mov	r0, r6
}
    a5f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    a5fc:	f001 bdc2 	b.w	c184 <z_ready_thread>
    a600:	0000a579 	.word	0x0000a579

0000a604 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    a604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a608:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    a60a:	f1b3 3fff 	cmp.w	r3, #4294967295
    a60e:	bf08      	it	eq
    a610:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
    a614:	4606      	mov	r6, r0
    a616:	461c      	mov	r4, r3
    a618:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
    a61c:	4689      	mov	r9, r1
    a61e:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    a620:	d03e      	beq.n	a6a0 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    a622:	f1b0 3fff 	cmp.w	r0, #4294967295
    a626:	bf08      	it	eq
    a628:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    a62c:	4615      	mov	r5, r2
    a62e:	4607      	mov	r7, r0
    a630:	d014      	beq.n	a65c <z_impl_k_timer_start+0x58>
    a632:	ea50 0302 	orrs.w	r3, r0, r2
    a636:	d011      	beq.n	a65c <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
    a638:	f06f 0301 	mvn.w	r3, #1
    a63c:	1a9b      	subs	r3, r3, r2
    a63e:	f04f 33ff 	mov.w	r3, #4294967295
    a642:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    a646:	2b00      	cmp	r3, #0
    a648:	da08      	bge.n	a65c <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
    a64a:	2a02      	cmp	r2, #2
    a64c:	f170 0300 	sbcs.w	r3, r0, #0
    a650:	bfbc      	itt	lt
    a652:	2502      	movlt	r5, #2
    a654:	2700      	movlt	r7, #0
    a656:	3d01      	subs	r5, #1
    a658:	f147 37ff 	adc.w	r7, r7, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    a65c:	f06f 0301 	mvn.w	r3, #1
    a660:	1a5b      	subs	r3, r3, r1
    a662:	f04f 33ff 	mov.w	r3, #4294967295
    a666:	eb63 0304 	sbc.w	r3, r3, r4
    a66a:	2b00      	cmp	r3, #0
    a66c:	da09      	bge.n	a682 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
    a66e:	2901      	cmp	r1, #1
    a670:	f174 0300 	sbcs.w	r3, r4, #0
    a674:	bfbc      	itt	lt
    a676:	2101      	movlt	r1, #1
    a678:	2400      	movlt	r4, #0
    a67a:	f111 39ff 	adds.w	r9, r1, #4294967295
    a67e:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    a682:	4630      	mov	r0, r6
    a684:	f001 fe34 	bl	c2f0 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    a688:	2300      	movs	r3, #0
    a68a:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
    a68c:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a690:	464a      	mov	r2, r9
    a692:	4643      	mov	r3, r8
    a694:	4630      	mov	r0, r6
    a696:	4903      	ldr	r1, [pc, #12]	; (a6a4 <z_impl_k_timer_start+0xa0>)
		     duration);
}
    a698:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a69c:	f7ff be7e 	b.w	a39c <z_add_timeout>
}
    a6a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a6a4:	0000a579 	.word	0x0000a579

0000a6a8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    a6a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a6aa:	4606      	mov	r6, r0
    a6ac:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    a6ae:	f001 fc09 	bl	bec4 <k_is_in_isr>
    a6b2:	b978      	cbnz	r0, a6d4 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    a6b4:	4b0b      	ldr	r3, [pc, #44]	; (a6e4 <z_thread_aligned_alloc+0x3c>)
    a6b6:	689b      	ldr	r3, [r3, #8]
    a6b8:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
    a6ba:	b17c      	cbz	r4, a6dc <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    a6bc:	1d2a      	adds	r2, r5, #4
    a6be:	d209      	bcs.n	a6d4 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    a6c0:	2000      	movs	r0, #0
    a6c2:	2100      	movs	r1, #0
    a6c4:	e9cd 0100 	strd	r0, r1, [sp]
    a6c8:	f046 0104 	orr.w	r1, r6, #4
    a6cc:	4620      	mov	r0, r4
    a6ce:	f001 feba 	bl	c446 <k_heap_aligned_alloc>
	if (mem == NULL) {
    a6d2:	b908      	cbnz	r0, a6d8 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    a6d4:	2400      	movs	r4, #0
	}

	return ret;
    a6d6:	e001      	b.n	a6dc <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
    a6d8:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    a6da:	1d04      	adds	r4, r0, #4
}
    a6dc:	4620      	mov	r0, r4
    a6de:	b002      	add	sp, #8
    a6e0:	bd70      	pop	{r4, r5, r6, pc}
    a6e2:	bf00      	nop
    a6e4:	20001970 	.word	0x20001970

0000a6e8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    a6e8:	4a02      	ldr	r2, [pc, #8]	; (a6f4 <boot_banner+0xc>)
    a6ea:	4903      	ldr	r1, [pc, #12]	; (a6f8 <boot_banner+0x10>)
    a6ec:	4803      	ldr	r0, [pc, #12]	; (a6fc <boot_banner+0x14>)
    a6ee:	f000 b896 	b.w	a81e <printk>
    a6f2:	bf00      	nop
    a6f4:	0000cd27 	.word	0x0000cd27
    a6f8:	0000eec8 	.word	0x0000eec8
    a6fc:	0000eed7 	.word	0x0000eed7

0000a700 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    a700:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    a702:	4c06      	ldr	r4, [pc, #24]	; (a71c <statics_init+0x1c>)
    a704:	4d06      	ldr	r5, [pc, #24]	; (a720 <statics_init+0x20>)
    a706:	42ac      	cmp	r4, r5
    a708:	d301      	bcc.n	a70e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    a70a:	2000      	movs	r0, #0
    a70c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    a70e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    a712:	4620      	mov	r0, r4
    a714:	f001 fe8f 	bl	c436 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    a718:	3414      	adds	r4, #20
    a71a:	e7f4      	b.n	a706 <statics_init+0x6>
    a71c:	2000016c 	.word	0x2000016c
    a720:	2000016c 	.word	0x2000016c

0000a724 <gpio_pin_get>:
{
    a724:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct gpio_driver_data *const data =
    a726:	6905      	ldr	r5, [r0, #16]
{
    a728:	460c      	mov	r4, r1
	return api->port_get_raw(port, value);
    a72a:	6883      	ldr	r3, [r0, #8]
    a72c:	a901      	add	r1, sp, #4
    a72e:	685b      	ldr	r3, [r3, #4]
    a730:	4798      	blx	r3
	if (ret == 0) {
    a732:	b948      	cbnz	r0, a748 <gpio_pin_get+0x24>
		*value ^= data->invert;
    a734:	9b01      	ldr	r3, [sp, #4]
    a736:	682a      	ldr	r2, [r5, #0]
    a738:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    a73a:	2301      	movs	r3, #1
    a73c:	fa03 f104 	lsl.w	r1, r3, r4
    a740:	420a      	tst	r2, r1
    a742:	bf14      	ite	ne
    a744:	4618      	movne	r0, r3
    a746:	2000      	moveq	r0, #0
}
    a748:	b003      	add	sp, #12
    a74a:	bd30      	pop	{r4, r5, pc}

0000a74c <gpio_pin_get_dt>:
	return gpio_pin_get(spec->port, spec->pin);
    a74c:	7901      	ldrb	r1, [r0, #4]
    a74e:	6800      	ldr	r0, [r0, #0]
    a750:	f7ff bfe8 	b.w	a724 <gpio_pin_get>

0000a754 <button_callback>:
}
    a754:	4770      	bx	lr

0000a756 <configure_sensor>:
    set_cpi(800);
    a756:	f44f 7048 	mov.w	r0, #800	; 0x320
    a75a:	f7f5 bf9b 	b.w	694 <set_cpi>

0000a75e <cbpprintf_external>:
{
    a75e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a762:	4607      	mov	r7, r0
    a764:	460e      	mov	r6, r1
    a766:	4690      	mov	r8, r2
	if (buf == NULL) {
    a768:	461d      	mov	r5, r3
    a76a:	b30b      	cbz	r3, a7b0 <cbpprintf_external+0x52>
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    a76c:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = buf[2];
    a76e:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
    a770:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = buf[3];
    a774:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    a776:	441c      	add	r4, r3
    a778:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    a77c:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
    a77e:	f04f 0900 	mov.w	r9, #0
    a782:	45d1      	cmp	r9, sl
    a784:	d308      	bcc.n	a798 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    a786:	686a      	ldr	r2, [r5, #4]
    a788:	f105 0308 	add.w	r3, r5, #8
    a78c:	4641      	mov	r1, r8
    a78e:	4638      	mov	r0, r7
    a790:	46b4      	mov	ip, r6
}
    a792:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    a796:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    a798:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    a79c:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    a7a0:	4620      	mov	r0, r4
    a7a2:	f000 feb2 	bl	b50a <strlen>
    a7a6:	3001      	adds	r0, #1
    a7a8:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    a7aa:	f109 0901 	add.w	r9, r9, #1
    a7ae:	e7e8      	b.n	a782 <cbpprintf_external+0x24>
}
    a7b0:	f06f 0015 	mvn.w	r0, #21
    a7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000a7b8 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    a7b8:	4603      	mov	r3, r0
    a7ba:	b158      	cbz	r0, a7d4 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a7bc:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    a7be:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    a7c2:	2a01      	cmp	r2, #1
    a7c4:	d003      	beq.n	a7ce <sys_notify_validate+0x16>
    a7c6:	2a03      	cmp	r2, #3
    a7c8:	d104      	bne.n	a7d4 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    a7ca:	6802      	ldr	r2, [r0, #0]
    a7cc:	b112      	cbz	r2, a7d4 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    a7ce:	2000      	movs	r0, #0
    a7d0:	6098      	str	r0, [r3, #8]
    a7d2:	4770      	bx	lr
		return -EINVAL;
    a7d4:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    a7d8:	4770      	bx	lr

0000a7da <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a7da:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    a7dc:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    a7de:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    a7e2:	2a03      	cmp	r2, #3
    a7e4:	f04f 0200 	mov.w	r2, #0
{
    a7e8:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    a7ea:	bf0c      	ite	eq
    a7ec:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    a7ee:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    a7f0:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    a7f2:	4770      	bx	lr

0000a7f4 <arch_printk_char_out>:
}
    a7f4:	2000      	movs	r0, #0
    a7f6:	4770      	bx	lr

0000a7f8 <str_out>:
{
    a7f8:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    a7fa:	688a      	ldr	r2, [r1, #8]
    a7fc:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    a7fe:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    a800:	b114      	cbz	r4, a808 <str_out+0x10>
    a802:	684b      	ldr	r3, [r1, #4]
    a804:	4293      	cmp	r3, r2
    a806:	dc01      	bgt.n	a80c <str_out+0x14>
		ctx->count++;
    a808:	608d      	str	r5, [r1, #8]
}
    a80a:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    a80c:	3b01      	subs	r3, #1
    a80e:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    a810:	bf08      	it	eq
    a812:	2200      	moveq	r2, #0
    a814:	608d      	str	r5, [r1, #8]
    a816:	bf0c      	ite	eq
    a818:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    a81a:	54a0      	strbne	r0, [r4, r2]
    a81c:	e7f5      	b.n	a80a <str_out+0x12>

0000a81e <printk>:
{
    a81e:	b40f      	push	{r0, r1, r2, r3}
    a820:	b507      	push	{r0, r1, r2, lr}
    a822:	a904      	add	r1, sp, #16
    a824:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    a828:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    a82a:	f000 fd51 	bl	b2d0 <z_log_vprintk>
}
    a82e:	b003      	add	sp, #12
    a830:	f85d eb04 	ldr.w	lr, [sp], #4
    a834:	b004      	add	sp, #16
    a836:	4770      	bx	lr

0000a838 <snprintk>:
{
    a838:	b40c      	push	{r2, r3}
    a83a:	b507      	push	{r0, r1, r2, lr}
    a83c:	ab04      	add	r3, sp, #16
    a83e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    a842:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    a844:	f7f6 fb76 	bl	f34 <vsnprintk>
}
    a848:	b003      	add	sp, #12
    a84a:	f85d eb04 	ldr.w	lr, [sp], #4
    a84e:	b002      	add	sp, #8
    a850:	4770      	bx	lr

0000a852 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a852:	b510      	push	{r4, lr}
    a854:	4603      	mov	r3, r0
	return list->head;
    a856:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a858:	2200      	movs	r2, #0
    a85a:	b158      	cbz	r0, a874 <sys_slist_find_and_remove+0x22>
    a85c:	4288      	cmp	r0, r1
    a85e:	d10f      	bne.n	a880 <sys_slist_find_and_remove+0x2e>
	return node->next;
    a860:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    a862:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    a864:	b93a      	cbnz	r2, a876 <sys_slist_find_and_remove+0x24>
    a866:	42a1      	cmp	r1, r4
	list->head = node;
    a868:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    a86a:	d100      	bne.n	a86e <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    a86c:	6058      	str	r0, [r3, #4]
	parent->next = child;
    a86e:	2300      	movs	r3, #0
    a870:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a872:	2001      	movs	r0, #1
    a874:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
    a876:	42a1      	cmp	r1, r4
	parent->next = child;
    a878:	6010      	str	r0, [r2, #0]
	list->tail = node;
    a87a:	bf08      	it	eq
    a87c:	605a      	streq	r2, [r3, #4]
}
    a87e:	e7f6      	b.n	a86e <sys_slist_find_and_remove+0x1c>
	return node->next;
    a880:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a882:	6800      	ldr	r0, [r0, #0]
    a884:	e7e9      	b.n	a85a <sys_slist_find_and_remove+0x8>

0000a886 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a886:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    a888:	f013 0307 	ands.w	r3, r3, #7
    a88c:	d105      	bne.n	a89a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    a88e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    a890:	2b00      	cmp	r3, #0
    a892:	bf0c      	ite	eq
    a894:	2000      	moveq	r0, #0
    a896:	2003      	movne	r0, #3
    a898:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    a89a:	2b02      	cmp	r3, #2
    a89c:	d105      	bne.n	a8aa <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    a89e:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    a8a0:	2b00      	cmp	r3, #0
    a8a2:	bf14      	ite	ne
    a8a4:	2000      	movne	r0, #0
    a8a6:	2004      	moveq	r0, #4
    a8a8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    a8aa:	2b01      	cmp	r3, #1
    a8ac:	d105      	bne.n	a8ba <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    a8ae:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    a8b0:	2b00      	cmp	r3, #0
    a8b2:	bf0c      	ite	eq
    a8b4:	2000      	moveq	r0, #0
    a8b6:	2005      	movne	r0, #5
    a8b8:	4770      	bx	lr
	int evt = EVT_NOP;
    a8ba:	2000      	movs	r0, #0
}
    a8bc:	4770      	bx	lr

0000a8be <notify_one>:
{
    a8be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a8c2:	460d      	mov	r5, r1
    a8c4:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    a8c6:	4619      	mov	r1, r3
    a8c8:	1d28      	adds	r0, r5, #4
{
    a8ca:	4690      	mov	r8, r2
    a8cc:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    a8ce:	f7ff ff84 	bl	a7da <sys_notify_finalize>
	if (cb) {
    a8d2:	4604      	mov	r4, r0
    a8d4:	b138      	cbz	r0, a8e6 <notify_one+0x28>
		cb(mgr, cli, state, res);
    a8d6:	4633      	mov	r3, r6
    a8d8:	4642      	mov	r2, r8
    a8da:	4629      	mov	r1, r5
    a8dc:	4638      	mov	r0, r7
    a8de:	46a4      	mov	ip, r4
}
    a8e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    a8e4:	4760      	bx	ip
}
    a8e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a8ea <transition_complete>:
{
    a8ea:	b410      	push	{r4}
	__asm__ volatile(
    a8ec:	f04f 0420 	mov.w	r4, #32
    a8f0:	f3ef 8211 	mrs	r2, BASEPRI
    a8f4:	f384 8812 	msr	BASEPRI_MAX, r4
    a8f8:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    a8fc:	6141      	str	r1, [r0, #20]
}
    a8fe:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    a900:	2101      	movs	r1, #1
    a902:	f7f6 bb2b 	b.w	f5c <process_event>

0000a906 <validate_args>:
{
    a906:	b510      	push	{r4, lr}
    a908:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    a90a:	b140      	cbz	r0, a91e <validate_args+0x18>
    a90c:	b139      	cbz	r1, a91e <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    a90e:	1d08      	adds	r0, r1, #4
    a910:	f7ff ff52 	bl	a7b8 <sys_notify_validate>
	if ((rv == 0)
    a914:	b928      	cbnz	r0, a922 <validate_args+0x1c>
	    && ((cli->notify.flags
    a916:	68a3      	ldr	r3, [r4, #8]
    a918:	f033 0303 	bics.w	r3, r3, #3
    a91c:	d001      	beq.n	a922 <validate_args+0x1c>
		rv = -EINVAL;
    a91e:	f06f 0015 	mvn.w	r0, #21
}
    a922:	bd10      	pop	{r4, pc}

0000a924 <onoff_manager_init>:
{
    a924:	b538      	push	{r3, r4, r5, lr}
    a926:	460c      	mov	r4, r1
	if ((mgr == NULL)
    a928:	4605      	mov	r5, r0
    a92a:	b158      	cbz	r0, a944 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    a92c:	b151      	cbz	r1, a944 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    a92e:	680b      	ldr	r3, [r1, #0]
    a930:	b143      	cbz	r3, a944 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    a932:	684b      	ldr	r3, [r1, #4]
    a934:	b133      	cbz	r3, a944 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    a936:	221c      	movs	r2, #28
    a938:	2100      	movs	r1, #0
    a93a:	f000 fe0d 	bl	b558 <memset>
    a93e:	612c      	str	r4, [r5, #16]
	return 0;
    a940:	2000      	movs	r0, #0
}
    a942:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    a944:	f06f 0015 	mvn.w	r0, #21
    a948:	e7fb      	b.n	a942 <onoff_manager_init+0x1e>

0000a94a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    a94a:	b570      	push	{r4, r5, r6, lr}
    a94c:	4604      	mov	r4, r0
    a94e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    a950:	f7ff ffd9 	bl	a906 <validate_args>

	if (rv < 0) {
    a954:	1e05      	subs	r5, r0, #0
    a956:	db31      	blt.n	a9bc <onoff_request+0x72>
    a958:	f04f 0320 	mov.w	r3, #32
    a95c:	f3ef 8111 	mrs	r1, BASEPRI
    a960:	f383 8812 	msr	BASEPRI_MAX, r3
    a964:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    a968:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a96a:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    a96c:	f64f 75ff 	movw	r5, #65535	; 0xffff
    a970:	42ab      	cmp	r3, r5
    a972:	f000 0207 	and.w	r2, r0, #7
    a976:	d02e      	beq.n	a9d6 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    a978:	2a02      	cmp	r2, #2
    a97a:	d10e      	bne.n	a99a <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    a97c:	3301      	adds	r3, #1
    a97e:	8363      	strh	r3, [r4, #26]
	rv = state;
    a980:	4615      	mov	r5, r2
		notify = true;
    a982:	2301      	movs	r3, #1
	__asm__ volatile(
    a984:	f381 8811 	msr	BASEPRI, r1
    a988:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    a98c:	b1b3      	cbz	r3, a9bc <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    a98e:	2300      	movs	r3, #0
    a990:	4631      	mov	r1, r6
    a992:	4620      	mov	r0, r4
    a994:	f7ff ff93 	bl	a8be <notify_one>
    a998:	e010      	b.n	a9bc <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    a99a:	0783      	lsls	r3, r0, #30
    a99c:	d001      	beq.n	a9a2 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    a99e:	2a06      	cmp	r2, #6
    a9a0:	d10e      	bne.n	a9c0 <onoff_request+0x76>
	parent->next = child;
    a9a2:	2300      	movs	r3, #0
    a9a4:	6033      	str	r3, [r6, #0]
	return list->tail;
    a9a6:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    a9a8:	b993      	cbnz	r3, a9d0 <onoff_request+0x86>
	list->head = node;
    a9aa:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    a9ae:	4615      	mov	r5, r2
    a9b0:	b962      	cbnz	r2, a9cc <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    a9b2:	460a      	mov	r2, r1
    a9b4:	4620      	mov	r0, r4
    a9b6:	2102      	movs	r1, #2
    a9b8:	f7f6 fad0 	bl	f5c <process_event>
		}
	}

	return rv;
}
    a9bc:	4628      	mov	r0, r5
    a9be:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    a9c0:	2a05      	cmp	r2, #5
    a9c2:	bf0c      	ite	eq
    a9c4:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    a9c8:	f06f 0504 	mvnne.w	r5, #4
    a9cc:	2300      	movs	r3, #0
    a9ce:	e7d9      	b.n	a984 <onoff_request+0x3a>
	parent->next = child;
    a9d0:	601e      	str	r6, [r3, #0]
	list->tail = node;
    a9d2:	6066      	str	r6, [r4, #4]
}
    a9d4:	e7eb      	b.n	a9ae <onoff_request+0x64>
		rv = -EAGAIN;
    a9d6:	f06f 050a 	mvn.w	r5, #10
    a9da:	e7f7      	b.n	a9cc <onoff_request+0x82>

0000a9dc <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    a9dc:	b510      	push	{r4, lr}
	__asm__ volatile(
    a9de:	f04f 0320 	mov.w	r3, #32
    a9e2:	f3ef 8211 	mrs	r2, BASEPRI
    a9e6:	f383 8812 	msr	BASEPRI_MAX, r3
    a9ea:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a9ee:	8b04      	ldrh	r4, [r0, #24]
    a9f0:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    a9f4:	2c02      	cmp	r4, #2
    a9f6:	d00a      	beq.n	aa0e <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    a9f8:	2c01      	cmp	r4, #1
    a9fa:	bf0c      	ite	eq
    a9fc:	f06f 0004 	mvneq.w	r0, #4
    aa00:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    aa04:	f382 8811 	msr	BASEPRI, r2
    aa08:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    aa0c:	e008      	b.n	aa20 <onoff_release+0x44>
	mgr->refs -= 1U;
    aa0e:	8b43      	ldrh	r3, [r0, #26]
    aa10:	3b01      	subs	r3, #1
    aa12:	b29b      	uxth	r3, r3
    aa14:	8343      	strh	r3, [r0, #26]
	if (stop) {
    aa16:	b923      	cbnz	r3, aa22 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    aa18:	4621      	mov	r1, r4
    aa1a:	f7f6 fa9f 	bl	f5c <process_event>
	int rv = state;
    aa1e:	4620      	mov	r0, r4
}
    aa20:	bd10      	pop	{r4, pc}
	int rv = state;
    aa22:	4620      	mov	r0, r4
    aa24:	e7ee      	b.n	aa04 <onoff_release+0x28>

0000aa26 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    aa26:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    aa28:	b1b0      	cbz	r0, aa58 <onoff_cancel+0x32>
    aa2a:	b1a9      	cbz	r1, aa58 <onoff_cancel+0x32>
	__asm__ volatile(
    aa2c:	f04f 0220 	mov.w	r2, #32
    aa30:	f3ef 8511 	mrs	r5, BASEPRI
    aa34:	f382 8812 	msr	BASEPRI_MAX, r2
    aa38:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    aa3c:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    aa3e:	f7ff ff08 	bl	a852 <sys_slist_find_and_remove>
    aa42:	b130      	cbz	r0, aa52 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    aa44:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    aa48:	f385 8811 	msr	BASEPRI, r5
    aa4c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    aa50:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    aa52:	f06f 0077 	mvn.w	r0, #119	; 0x77
    aa56:	e7f7      	b.n	aa48 <onoff_cancel+0x22>
		return -EINVAL;
    aa58:	f06f 0015 	mvn.w	r0, #21
    aa5c:	e7f8      	b.n	aa50 <onoff_cancel+0x2a>

0000aa5e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    aa5e:	4604      	mov	r4, r0
    aa60:	b508      	push	{r3, lr}
    aa62:	4608      	mov	r0, r1
    aa64:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    aa66:	461a      	mov	r2, r3
    aa68:	47a0      	blx	r4
	return z_impl_z_current_get();
    aa6a:	f7ff fbc9 	bl	a200 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    aa6e:	f7f9 f953 	bl	3d18 <z_impl_k_thread_abort>

0000aa72 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    aa72:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    aa76:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    aa78:	0840      	lsrs	r0, r0, #1
    aa7a:	4770      	bx	lr

0000aa7c <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    aa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa7e:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    aa80:	f7ff fff7 	bl	aa72 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    aa84:	fab0 f080 	clz	r0, r0
    aa88:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    aa8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    aa90:	00ca      	lsls	r2, r1, #3
    aa92:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    aa96:	1d17      	adds	r7, r2, #4
{
    aa98:	460c      	mov	r4, r1
    aa9a:	3206      	adds	r2, #6
    aa9c:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    aa9e:	b956      	cbnz	r6, aab6 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    aaa0:	2101      	movs	r1, #1
    aaa2:	fa01 f000 	lsl.w	r0, r1, r0
    aaa6:	68d9      	ldr	r1, [r3, #12]
    aaa8:	4301      	orrs	r1, r0
    aaaa:	60d9      	str	r1, [r3, #12]
		b->next = c;
    aaac:	f8cc 4010 	str.w	r4, [ip, #16]
    aab0:	53dd      	strh	r5, [r3, r7]
    aab2:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    aab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    aab6:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    aab8:	3104      	adds	r1, #4
    aaba:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    aabc:	53d8      	strh	r0, [r3, r7]
    aabe:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    aac2:	529e      	strh	r6, [r3, r2]
    aac4:	80c5      	strh	r5, [r0, #6]
    aac6:	525d      	strh	r5, [r3, r1]
    aac8:	e7f4      	b.n	aab4 <free_list_add+0x38>

0000aaca <free_list_remove_bidx>:
{
    aaca:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    aacc:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    aad0:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    aad2:	4299      	cmp	r1, r3
    aad4:	f102 0104 	add.w	r1, r2, #4
    aad8:	d10a      	bne.n	aaf0 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    aada:	2301      	movs	r3, #1
    aadc:	fa03 f202 	lsl.w	r2, r3, r2
    aae0:	68c3      	ldr	r3, [r0, #12]
    aae2:	ea23 0302 	bic.w	r3, r3, r2
    aae6:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    aae8:	2300      	movs	r3, #0
    aaea:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    aaee:	bd10      	pop	{r4, pc}
    aaf0:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    aaf2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    aaf6:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    aafa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    aafe:	80cb      	strh	r3, [r1, #6]
    ab00:	8082      	strh	r2, [r0, #4]
}
    ab02:	e7f4      	b.n	aaee <free_list_remove_bidx+0x24>

0000ab04 <free_list_remove>:
{
    ab04:	b508      	push	{r3, lr}
    ab06:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    ab08:	f7ff ffb3 	bl	aa72 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    ab0c:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    ab10:	f1c2 021f 	rsb	r2, r2, #31
    ab14:	4618      	mov	r0, r3
}
    ab16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    ab1a:	f7ff bfd6 	b.w	aaca <free_list_remove_bidx>

0000ab1e <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    ab1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ab22:	fab1 f581 	clz	r5, r1
    ab26:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    ab2a:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
    ab2e:	4603      	mov	r3, r0
	if (b->next) {
    ab30:	693a      	ldr	r2, [r7, #16]
{
    ab32:	460e      	mov	r6, r1
	if (b->next) {
    ab34:	b1c2      	cbz	r2, ab68 <alloc_chunk+0x4a>
    ab36:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    ab3a:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
    ab3c:	4618      	mov	r0, r3
    ab3e:	4621      	mov	r1, r4
    ab40:	f7ff ff97 	bl	aa72 <chunk_size>
    ab44:	42b0      	cmp	r0, r6
    ab46:	d306      	bcc.n	ab56 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
    ab48:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    ab4a:	4618      	mov	r0, r3
    ab4c:	f7ff ffbd 	bl	aaca <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    ab50:	4620      	mov	r0, r4
    ab52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    ab56:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
    ab5a:	f1b8 0801 	subs.w	r8, r8, #1
    ab5e:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
    ab60:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
    ab62:	d001      	beq.n	ab68 <alloc_chunk+0x4a>
    ab64:	4282      	cmp	r2, r0
    ab66:	d1e8      	bne.n	ab3a <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    ab68:	f1c5 0220 	rsb	r2, r5, #32
    ab6c:	f04f 34ff 	mov.w	r4, #4294967295
    ab70:	4094      	lsls	r4, r2
    ab72:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    ab74:	4014      	ands	r4, r2
    ab76:	d0eb      	beq.n	ab50 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
    ab78:	fa94 f2a4 	rbit	r2, r4
    ab7c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    ab80:	1d11      	adds	r1, r2, #4
    ab82:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    ab86:	4621      	mov	r1, r4
    ab88:	e7df      	b.n	ab4a <alloc_chunk+0x2c>

0000ab8a <merge_chunks>:
{
    ab8a:	b538      	push	{r3, r4, r5, lr}
    ab8c:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    ab8e:	f7ff ff70 	bl	aa72 <chunk_size>
{
    ab92:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    ab94:	4604      	mov	r4, r0
    ab96:	4611      	mov	r1, r2
    ab98:	4618      	mov	r0, r3
    ab9a:	f7ff ff6a 	bl	aa72 <chunk_size>
		((uint16_t *)cmem)[f] = val;
    ab9e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    aba2:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    aba4:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    aba6:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    aba8:	4618      	mov	r0, r3
    abaa:	f7ff ff62 	bl	aa72 <chunk_size>
	void *cmem = &buf[c];
    abae:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    abb0:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    abb4:	bd38      	pop	{r3, r4, r5, pc}

0000abb6 <split_chunks>:
{
    abb6:	b538      	push	{r3, r4, r5, lr}
    abb8:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    abba:	f7ff ff5a 	bl	aa72 <chunk_size>
{
    abbe:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    abc0:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    abc2:	1a51      	subs	r1, r2, r1
    abc4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    abc8:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    abca:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    abcc:	8060      	strh	r0, [r4, #2]
    abce:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    abd2:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    abd4:	8044      	strh	r4, [r0, #2]
    abd6:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    abda:	4618      	mov	r0, r3
    abdc:	4611      	mov	r1, r2
    abde:	f7ff ff48 	bl	aa72 <chunk_size>
	void *cmem = &buf[c];
    abe2:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    abe4:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    abe8:	bd38      	pop	{r3, r4, r5, pc}

0000abea <free_chunk>:
{
    abea:	b538      	push	{r3, r4, r5, lr}
    abec:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    abee:	f7ff ff40 	bl	aa72 <chunk_size>
    abf2:	460c      	mov	r4, r1
    abf4:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    abf6:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    abfa:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    abfc:	07da      	lsls	r2, r3, #31
    abfe:	d40a      	bmi.n	ac16 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    ac00:	4628      	mov	r0, r5
    ac02:	f7ff ff7f 	bl	ab04 <free_list_remove>
	return c + chunk_size(h, c);
    ac06:	4621      	mov	r1, r4
    ac08:	4628      	mov	r0, r5
    ac0a:	f7ff ff32 	bl	aa72 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    ac0e:	1822      	adds	r2, r4, r0
    ac10:	4628      	mov	r0, r5
    ac12:	f7ff ffba 	bl	ab8a <merge_chunks>
		return ((uint16_t *)cmem)[f];
    ac16:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    ac1a:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    ac1c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    ac20:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    ac22:	07db      	lsls	r3, r3, #31
    ac24:	d40c      	bmi.n	ac40 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    ac26:	4628      	mov	r0, r5
    ac28:	f7ff ff6c 	bl	ab04 <free_list_remove>
		return ((uint16_t *)cmem)[f];
    ac2c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    ac30:	4622      	mov	r2, r4
    ac32:	1a61      	subs	r1, r4, r1
    ac34:	4628      	mov	r0, r5
    ac36:	f7ff ffa8 	bl	ab8a <merge_chunks>
    ac3a:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    ac3e:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    ac40:	4621      	mov	r1, r4
    ac42:	4628      	mov	r0, r5
}
    ac44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    ac48:	f7ff bf18 	b.w	aa7c <free_list_add>

0000ac4c <sys_heap_free>:
	if (mem == NULL) {
    ac4c:	b161      	cbz	r1, ac68 <sys_heap_free+0x1c>
    ac4e:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ac50:	3904      	subs	r1, #4
    ac52:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    ac54:	f021 0307 	bic.w	r3, r1, #7
    ac58:	4403      	add	r3, r0
	free_chunk(h, c);
    ac5a:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    ac5c:	885a      	ldrh	r2, [r3, #2]
    ac5e:	f022 0201 	bic.w	r2, r2, #1
    ac62:	805a      	strh	r2, [r3, #2]
    ac64:	f7ff bfc1 	b.w	abea <free_chunk>
}
    ac68:	4770      	bx	lr

0000ac6a <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    ac6a:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    ac6c:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    ac6e:	b909      	cbnz	r1, ac74 <sys_heap_alloc+0xa>
		return NULL;
    ac70:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    ac72:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    ac74:	68ab      	ldr	r3, [r5, #8]
    ac76:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    ac7a:	d9f9      	bls.n	ac70 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    ac7c:	310b      	adds	r1, #11
    ac7e:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    ac80:	4621      	mov	r1, r4
    ac82:	4628      	mov	r0, r5
    ac84:	f7ff ff4b 	bl	ab1e <alloc_chunk>
	if (c == 0U) {
    ac88:	4606      	mov	r6, r0
    ac8a:	2800      	cmp	r0, #0
    ac8c:	d0f0      	beq.n	ac70 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    ac8e:	4601      	mov	r1, r0
    ac90:	4628      	mov	r0, r5
    ac92:	f7ff feee 	bl	aa72 <chunk_size>
    ac96:	42a0      	cmp	r0, r4
    ac98:	d907      	bls.n	acaa <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    ac9a:	1932      	adds	r2, r6, r4
    ac9c:	4628      	mov	r0, r5
    ac9e:	f7ff ff8a 	bl	abb6 <split_chunks>
		free_list_add(h, c + chunk_sz);
    aca2:	4611      	mov	r1, r2
    aca4:	4628      	mov	r0, r5
    aca6:	f7ff fee9 	bl	aa7c <free_list_add>
	void *cmem = &buf[c];
    acaa:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    acae:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    acb0:	8853      	ldrh	r3, [r2, #2]
    acb2:	f043 0301 	orr.w	r3, r3, #1
    acb6:	8053      	strh	r3, [r2, #2]
    acb8:	3004      	adds	r0, #4
	return mem;
    acba:	e7da      	b.n	ac72 <sys_heap_alloc+0x8>

0000acbc <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    acbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    acc0:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    acc2:	424a      	negs	r2, r1
    acc4:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
    acc8:	ea31 0202 	bics.w	r2, r1, r2
{
    accc:	4603      	mov	r3, r0
	if (align != rew) {
    acce:	d00a      	beq.n	ace6 <sys_heap_aligned_alloc+0x2a>
		return false;
    acd0:	2f04      	cmp	r7, #4
    acd2:	463a      	mov	r2, r7
    acd4:	46b9      	mov	r9, r7
    acd6:	bf28      	it	cs
    acd8:	2204      	movcs	r2, #4
		align -= rew;
    acda:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    acdc:	b974      	cbnz	r4, acfc <sys_heap_aligned_alloc+0x40>
		return NULL;
    acde:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    ace0:	4628      	mov	r0, r5
    ace2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    ace6:	2904      	cmp	r1, #4
    ace8:	d804      	bhi.n	acf4 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
    acea:	4621      	mov	r1, r4
}
    acec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    acf0:	f7ff bfbb 	b.w	ac6a <sys_heap_alloc>
		rew = 0;
    acf4:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
    acf8:	2204      	movs	r2, #4
    acfa:	e7ef      	b.n	acdc <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
    acfc:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
    acfe:	68b3      	ldr	r3, [r6, #8]
    ad00:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    ad04:	d9eb      	bls.n	acde <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    ad06:	f104 010b 	add.w	r1, r4, #11
    ad0a:	4439      	add	r1, r7
    ad0c:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    ad0e:	08c9      	lsrs	r1, r1, #3
    ad10:	4630      	mov	r0, r6
    ad12:	f7ff ff04 	bl	ab1e <alloc_chunk>
	if (c0 == 0) {
    ad16:	4680      	mov	r8, r0
    ad18:	2800      	cmp	r0, #0
    ad1a:	d0e0      	beq.n	acde <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    ad1c:	f109 0504 	add.w	r5, r9, #4
    ad20:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    ad24:	1e7b      	subs	r3, r7, #1
    ad26:	4435      	add	r5, r6
    ad28:	441d      	add	r5, r3
    ad2a:	427f      	negs	r7, r7
    ad2c:	403d      	ands	r5, r7
    ad2e:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ad32:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ad34:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ad36:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ad38:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ad3a:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    ad3e:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    ad40:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ad44:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    ad48:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    ad4c:	d208      	bcs.n	ad60 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
    ad4e:	4601      	mov	r1, r0
    ad50:	463a      	mov	r2, r7
    ad52:	4630      	mov	r0, r6
    ad54:	f7ff ff2f 	bl	abb6 <split_chunks>
		free_list_add(h, c0);
    ad58:	4641      	mov	r1, r8
    ad5a:	4630      	mov	r0, r6
    ad5c:	f7ff fe8e 	bl	aa7c <free_list_add>
	return c + chunk_size(h, c);
    ad60:	4639      	mov	r1, r7
    ad62:	4630      	mov	r0, r6
    ad64:	f7ff fe85 	bl	aa72 <chunk_size>
    ad68:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    ad6a:	4284      	cmp	r4, r0
    ad6c:	d207      	bcs.n	ad7e <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
    ad6e:	4630      	mov	r0, r6
    ad70:	4622      	mov	r2, r4
    ad72:	f7ff ff20 	bl	abb6 <split_chunks>
		free_list_add(h, c_end);
    ad76:	4621      	mov	r1, r4
    ad78:	4630      	mov	r0, r6
    ad7a:	f7ff fe7f 	bl	aa7c <free_list_add>
	void *cmem = &buf[c];
    ad7e:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    ad82:	8873      	ldrh	r3, [r6, #2]
    ad84:	f043 0301 	orr.w	r3, r3, #1
    ad88:	8073      	strh	r3, [r6, #2]
    ad8a:	e7a9      	b.n	ace0 <sys_heap_aligned_alloc+0x24>

0000ad8c <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    ad8c:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    ad8e:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    ad90:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    ad92:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    ad96:	f021 0107 	bic.w	r1, r1, #7
{
    ad9a:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    ad9c:	1acd      	subs	r5, r1, r3
    ad9e:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    ada0:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
    ada2:	fab2 f082 	clz	r0, r2
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    ada6:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
    adaa:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    adac:	3407      	adds	r4, #7
	h->avail_buckets = 0;
    adae:	2600      	movs	r6, #0
    adb0:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    adb2:	f1c0 0020 	rsb	r0, r0, #32
    adb6:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
    adba:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
    adbc:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    adbe:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    adc2:	4284      	cmp	r4, r0
    adc4:	d118      	bne.n	adf8 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    adc6:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    adc8:	f040 0001 	orr.w	r0, r0, #1
    adcc:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
    adce:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    add2:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    add4:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
    add6:	801e      	strh	r6, [r3, #0]
    add8:	8067      	strh	r7, [r4, #2]
    adda:	195c      	adds	r4, r3, r5
    addc:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
    ade0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
    ade4:	8066      	strh	r6, [r4, #2]
    ade6:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    ade8:	8850      	ldrh	r0, [r2, #2]
    adea:	f040 0001 	orr.w	r0, r0, #1
    adee:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    adf0:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    adf2:	4618      	mov	r0, r3
    adf4:	f7ff be42 	b.w	aa7c <free_list_add>
		h->buckets[i].next = 0;
    adf8:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
    adfc:	e7e1      	b.n	adc2 <sys_heap_init+0x36>

0000adfe <encode_uint>:
{
    adfe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae02:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    ae04:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    ae06:	2b6f      	cmp	r3, #111	; 0x6f
{
    ae08:	4680      	mov	r8, r0
    ae0a:	460f      	mov	r7, r1
    ae0c:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    ae0e:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    ae12:	d029      	beq.n	ae68 <encode_uint+0x6a>
    ae14:	d824      	bhi.n	ae60 <encode_uint+0x62>
		return 16;
    ae16:	2b58      	cmp	r3, #88	; 0x58
    ae18:	bf14      	ite	ne
    ae1a:	260a      	movne	r6, #10
    ae1c:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    ae1e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    ae22:	4632      	mov	r2, r6
    ae24:	2300      	movs	r3, #0
    ae26:	4640      	mov	r0, r8
    ae28:	4639      	mov	r1, r7
    ae2a:	f7f5 f959 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    ae2e:	2a09      	cmp	r2, #9
    ae30:	b2d4      	uxtb	r4, r2
    ae32:	d81e      	bhi.n	ae72 <encode_uint+0x74>
    ae34:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    ae36:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    ae38:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    ae3a:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    ae3e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    ae42:	d301      	bcc.n	ae48 <encode_uint+0x4a>
    ae44:	45d1      	cmp	r9, sl
    ae46:	d811      	bhi.n	ae6c <encode_uint+0x6e>
	if (conv->flag_hash) {
    ae48:	782b      	ldrb	r3, [r5, #0]
    ae4a:	069b      	lsls	r3, r3, #26
    ae4c:	d505      	bpl.n	ae5a <encode_uint+0x5c>
		if (radix == 8) {
    ae4e:	2e08      	cmp	r6, #8
    ae50:	d115      	bne.n	ae7e <encode_uint+0x80>
			conv->altform_0 = true;
    ae52:	78ab      	ldrb	r3, [r5, #2]
    ae54:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    ae58:	70ab      	strb	r3, [r5, #2]
}
    ae5a:	4648      	mov	r0, r9
    ae5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    ae60:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    ae64:	2b70      	cmp	r3, #112	; 0x70
    ae66:	e7d7      	b.n	ae18 <encode_uint+0x1a>
	switch (specifier) {
    ae68:	2608      	movs	r6, #8
    ae6a:	e7d8      	b.n	ae1e <encode_uint+0x20>
		value /= radix;
    ae6c:	4680      	mov	r8, r0
    ae6e:	460f      	mov	r7, r1
    ae70:	e7d7      	b.n	ae22 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    ae72:	f1bb 0f19 	cmp.w	fp, #25
    ae76:	bf94      	ite	ls
    ae78:	3437      	addls	r4, #55	; 0x37
    ae7a:	3457      	addhi	r4, #87	; 0x57
    ae7c:	e7db      	b.n	ae36 <encode_uint+0x38>
		} else if (radix == 16) {
    ae7e:	2e10      	cmp	r6, #16
    ae80:	d1eb      	bne.n	ae5a <encode_uint+0x5c>
			conv->altform_0c = true;
    ae82:	78ab      	ldrb	r3, [r5, #2]
    ae84:	f043 0310 	orr.w	r3, r3, #16
    ae88:	e7e6      	b.n	ae58 <encode_uint+0x5a>

0000ae8a <outs>:
{
    ae8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae8e:	4607      	mov	r7, r0
    ae90:	4688      	mov	r8, r1
    ae92:	4615      	mov	r5, r2
    ae94:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    ae96:	4614      	mov	r4, r2
    ae98:	42b4      	cmp	r4, r6
    ae9a:	eba4 0005 	sub.w	r0, r4, r5
    ae9e:	d302      	bcc.n	aea6 <outs+0x1c>
    aea0:	b93e      	cbnz	r6, aeb2 <outs+0x28>
    aea2:	7823      	ldrb	r3, [r4, #0]
    aea4:	b12b      	cbz	r3, aeb2 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    aea6:	f814 0b01 	ldrb.w	r0, [r4], #1
    aeaa:	4641      	mov	r1, r8
    aeac:	47b8      	blx	r7
		if (rc < 0) {
    aeae:	2800      	cmp	r0, #0
    aeb0:	daf2      	bge.n	ae98 <outs+0xe>
}
    aeb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000aeb6 <free_space>:
	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    aeb6:	4602      	mov	r2, r0
    aeb8:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    aeba:	68c0      	ldr	r0, [r0, #12]
    aebc:	6814      	ldr	r4, [r2, #0]
    aebe:	42a0      	cmp	r0, r4
    aec0:	d904      	bls.n	aecc <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    aec2:	3801      	subs	r0, #1
    aec4:	1b00      	subs	r0, r0, r4
    aec6:	6008      	str	r0, [r1, #0]

		return false;
    aec8:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
    aeca:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    aecc:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
    aece:	b918      	cbnz	r0, aed8 <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    aed0:	3b01      	subs	r3, #1
    aed2:	1b1b      	subs	r3, r3, r4
    aed4:	600b      	str	r3, [r1, #0]
		return false;
    aed6:	e7f8      	b.n	aeca <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
    aed8:	1b1b      	subs	r3, r3, r4
    aeda:	600b      	str	r3, [r1, #0]
	return true;
    aedc:	2001      	movs	r0, #1
    aede:	e7f4      	b.n	aeca <free_space+0x14>

0000aee0 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    aee0:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    aee2:	a901      	add	r1, sp, #4
{
    aee4:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    aee6:	f7ff ffe6 	bl	aeb6 <free_space>
    aeea:	b120      	cbz	r0, aef6 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    aeec:	9b01      	ldr	r3, [sp, #4]
    aeee:	68e2      	ldr	r2, [r4, #12]
    aef0:	3b01      	subs	r3, #1
    aef2:	4413      	add	r3, r2
    aef4:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    aef6:	9801      	ldr	r0, [sp, #4]
    aef8:	6a23      	ldr	r3, [r4, #32]
    aefa:	43c0      	mvns	r0, r0
}
    aefc:	4418      	add	r0, r3
    aefe:	b002      	add	sp, #8
    af00:	bd10      	pop	{r4, pc}

0000af02 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
    af02:	b510      	push	{r4, lr}
    af04:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    af06:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    af08:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    af0a:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    af0c:	07d2      	lsls	r2, r2, #31
    af0e:	d502      	bpl.n	af16 <idx_inc+0x14>
		return i & (buffer->size - 1);
    af10:	3b01      	subs	r3, #1
    af12:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    af14:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    af16:	4298      	cmp	r0, r3
    af18:	bf28      	it	cs
    af1a:	1ac0      	subcs	r0, r0, r3
    af1c:	e7fa      	b.n	af14 <idx_inc+0x12>

0000af1e <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    af1e:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    af20:	69c2      	ldr	r2, [r0, #28]
{
    af22:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
    af24:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    af26:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    af28:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    af2c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    af30:	462a      	mov	r2, r5
    af32:	6801      	ldr	r1, [r0, #0]
{
    af34:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    af36:	f7ff ffe4 	bl	af02 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    af3a:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    af3c:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    af3e:	462a      	mov	r2, r5
    af40:	4620      	mov	r0, r4
    af42:	f7ff ffde 	bl	af02 <idx_inc>
    af46:	6060      	str	r0, [r4, #4]
}
    af48:	bd38      	pop	{r3, r4, r5, pc}

0000af4a <max_utilization_update>:
{
    af4a:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    af4c:	6903      	ldr	r3, [r0, #16]
    af4e:	075b      	lsls	r3, r3, #29
{
    af50:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    af52:	d506      	bpl.n	af62 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    af54:	6a45      	ldr	r5, [r0, #36]	; 0x24
    af56:	f7ff ffc3 	bl	aee0 <get_usage>
    af5a:	4285      	cmp	r5, r0
    af5c:	d902      	bls.n	af64 <max_utilization_update+0x1a>
    af5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    af60:	6260      	str	r0, [r4, #36]	; 0x24
}
    af62:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    af64:	4620      	mov	r0, r4
    af66:	f7ff ffbb 	bl	aee0 <get_usage>
    af6a:	e7f9      	b.n	af60 <max_utilization_update+0x16>

0000af6c <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
    af6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    af70:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    af74:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
    af78:	461f      	mov	r7, r3
	*user_packet = false;
    af7a:	2300      	movs	r3, #0
    af7c:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
    af7e:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    af82:	f003 0303 	and.w	r3, r3, #3
    af86:	2b02      	cmp	r3, #2
{
    af88:	4604      	mov	r4, r0
    af8a:	468b      	mov	fp, r1
    af8c:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    af8e:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    af92:	d103      	bne.n	af9c <drop_item_locked+0x30>
		return item->skip.len;
    af94:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    af98:	08ad      	lsrs	r5, r5, #2
    af9a:	d12e      	bne.n	affa <drop_item_locked+0x8e>
    af9c:	69a3      	ldr	r3, [r4, #24]
    af9e:	4630      	mov	r0, r6
    afa0:	4798      	blx	r3
    afa2:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
    afa4:	f1b8 0f00 	cmp.w	r8, #0
    afa8:	d036      	beq.n	b018 <drop_item_locked+0xac>
		if (item->hdr.busy) {
    afaa:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    afae:	079b      	lsls	r3, r3, #30
    afb0:	d52f      	bpl.n	b012 <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
    afb2:	f10b 0101 	add.w	r1, fp, #1
    afb6:	4620      	mov	r0, r4
    afb8:	f7ff ffb1 	bl	af1e <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    afbc:	6861      	ldr	r1, [r4, #4]
    afbe:	462a      	mov	r2, r5
    afc0:	4620      	mov	r0, r4
    afc2:	f7ff ff9e 	bl	af02 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    afc6:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    afc8:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    afca:	462a      	mov	r2, r5
    afcc:	4620      	mov	r0, r4
    afce:	f7ff ff98 	bl	af02 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    afd2:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    afd4:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    afd6:	68e1      	ldr	r1, [r4, #12]
    afd8:	4620      	mov	r0, r4
    afda:	f7ff ff92 	bl	af02 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    afde:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
    afe0:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
    afe4:	f002 0203 	and.w	r2, r2, #3
    afe8:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    afea:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    afee:	d10c      	bne.n	b00a <drop_item_locked+0x9e>
		return item->skip.len;
    aff0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
    aff4:	089b      	lsrs	r3, r3, #2
    aff6:	d008      	beq.n	b00a <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
    aff8:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    affa:	68e1      	ldr	r1, [r4, #12]
    affc:	462a      	mov	r2, r5
    affe:	4620      	mov	r0, r4
    b000:	f7ff ff7f 	bl	af02 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    b004:	e9c4 0002 	strd	r0, r0, [r4, #8]
    b008:	e007      	b.n	b01a <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
    b00a:	69a3      	ldr	r3, [r4, #24]
    b00c:	4630      	mov	r0, r6
    b00e:	4798      	blx	r3
    b010:	4405      	add	r5, r0
			*user_packet = true;
    b012:	2301      	movs	r3, #1
    b014:	703b      	strb	r3, [r7, #0]
    b016:	e7f0      	b.n	affa <drop_item_locked+0x8e>
		item = NULL;
    b018:	4646      	mov	r6, r8
	}

	return item;
}
    b01a:	4630      	mov	r0, r6
    b01c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000b020 <mpsc_pbuf_init>:
{
    b020:	b538      	push	{r3, r4, r5, lr}
    b022:	460d      	mov	r5, r1
    b024:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    b026:	221c      	movs	r2, #28
    b028:	2100      	movs	r1, #0
    b02a:	f000 fa95 	bl	b558 <memset>
	buffer->get_wlen = cfg->get_wlen;
    b02e:	68eb      	ldr	r3, [r5, #12]
    b030:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    b032:	68ab      	ldr	r3, [r5, #8]
	buffer->size = cfg->size;
    b034:	686a      	ldr	r2, [r5, #4]
	buffer->notify_drop = cfg->notify_drop;
    b036:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    b038:	682b      	ldr	r3, [r5, #0]
    b03a:	61e3      	str	r3, [r4, #28]
	buffer->max_usage = 0;
    b03c:	2300      	movs	r3, #0
    b03e:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->size = cfg->size;
    b040:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
    b042:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    b044:	b122      	cbz	r2, b050 <mpsc_pbuf_init+0x30>
    b046:	1e51      	subs	r1, r2, #1
    b048:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    b04a:	bf08      	it	eq
    b04c:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
    b050:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    b052:	2201      	movs	r2, #1
    b054:	f104 0028 	add.w	r0, r4, #40	; 0x28
    b058:	2100      	movs	r1, #0
}
    b05a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b05e:	f000 bfcb 	b.w	bff8 <z_impl_k_sem_init>

0000b062 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    b062:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b066:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    b068:	6a03      	ldr	r3, [r0, #32]
    b06a:	3b01      	subs	r3, #1
    b06c:	428b      	cmp	r3, r1
{
    b06e:	b085      	sub	sp, #20
    b070:	4604      	mov	r4, r0
    b072:	460f      	mov	r7, r1
    b074:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
    b076:	d364      	bcc.n	b142 <mpsc_pbuf_alloc+0xe0>
	union mpsc_pbuf_generic *dropped_item = NULL;
    b078:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
    b07a:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
    b07c:	f100 0b28 	add.w	fp, r0, #40	; 0x28
	__asm__ volatile(
    b080:	f04f 0320 	mov.w	r3, #32
    b084:	f3ef 8611 	mrs	r6, BASEPRI
    b088:	f383 8812 	msr	BASEPRI_MAX, r3
    b08c:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
    b090:	a903      	add	r1, sp, #12
    b092:	4620      	mov	r0, r4
    b094:	f7ff ff0f 	bl	aeb6 <free_space>
		if (free_wlen >= wlen) {
    b098:	9903      	ldr	r1, [sp, #12]
    b09a:	42b9      	cmp	r1, r7
    b09c:	d321      	bcc.n	b0e2 <mpsc_pbuf_alloc+0x80>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    b09e:	6821      	ldr	r1, [r4, #0]
			item =
    b0a0:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    b0a2:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
    b0a6:	f022 0203 	bic.w	r2, r2, #3
    b0aa:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    b0ae:	4620      	mov	r0, r4
    b0b0:	463a      	mov	r2, r7
			item =
    b0b2:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
    b0b6:	f7ff ff24 	bl	af02 <idx_inc>
		cont = false;
    b0ba:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    b0bc:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
    b0be:	f386 8811 	msr	BASEPRI, r6
    b0c2:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    b0c6:	2b00      	cmp	r3, #0
    b0c8:	d03d      	beq.n	b146 <mpsc_pbuf_alloc+0xe4>
    b0ca:	2d00      	cmp	r5, #0
    b0cc:	d0d8      	beq.n	b080 <mpsc_pbuf_alloc+0x1e>
    b0ce:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b0d2:	2b00      	cmp	r3, #0
    b0d4:	d0d4      	beq.n	b080 <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
    b0d6:	4629      	mov	r1, r5
    b0d8:	6963      	ldr	r3, [r4, #20]
    b0da:	4620      	mov	r0, r4
    b0dc:	4798      	blx	r3
			dropped_item = NULL;
    b0de:	2500      	movs	r5, #0
    b0e0:	e7ce      	b.n	b080 <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
    b0e2:	b128      	cbz	r0, b0f0 <mpsc_pbuf_alloc+0x8e>
    b0e4:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
    b0e6:	4620      	mov	r0, r4
    b0e8:	f7ff ff19 	bl	af1e <add_skip_item>
			cont = true;
    b0ec:	9b01      	ldr	r3, [sp, #4]
    b0ee:	e7e6      	b.n	b0be <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    b0f0:	ea58 0309 	orrs.w	r3, r8, r9
    b0f4:	d017      	beq.n	b126 <mpsc_pbuf_alloc+0xc4>
			   !k_is_in_isr()) {
    b0f6:	f000 fee5 	bl	bec4 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    b0fa:	b9a0      	cbnz	r0, b126 <mpsc_pbuf_alloc+0xc4>
    b0fc:	f386 8811 	msr	BASEPRI, r6
    b100:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    b104:	4642      	mov	r2, r8
    b106:	464b      	mov	r3, r9
    b108:	4658      	mov	r0, fp
    b10a:	f7fe fbf1 	bl	98f0 <z_impl_k_sem_take>
	__asm__ volatile(
    b10e:	f04f 0320 	mov.w	r3, #32
    b112:	f3ef 8611 	mrs	r6, BASEPRI
    b116:	f383 8812 	msr	BASEPRI_MAX, r3
    b11a:	f3bf 8f6f 	isb	sy
			if (err == 0) {
    b11e:	fab0 f380 	clz	r3, r0
    b122:	095b      	lsrs	r3, r3, #5
    b124:	e7cb      	b.n	b0be <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    b126:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    b128:	9903      	ldr	r1, [sp, #12]
    b12a:	f10d 030b 	add.w	r3, sp, #11
    b12e:	f3c2 0240 	ubfx	r2, r2, #1, #1
    b132:	4620      	mov	r0, r4
    b134:	f7ff ff1a 	bl	af6c <drop_item_locked>
			cont = dropped_item != NULL;
    b138:	1e03      	subs	r3, r0, #0
    b13a:	4605      	mov	r5, r0
    b13c:	bf18      	it	ne
    b13e:	2301      	movne	r3, #1
    b140:	e7bd      	b.n	b0be <mpsc_pbuf_alloc+0x5c>
		return NULL;
    b142:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    b146:	4650      	mov	r0, sl
    b148:	b005      	add	sp, #20
    b14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000b14e <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    b14e:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    b150:	6983      	ldr	r3, [r0, #24]
{
    b152:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    b154:	4608      	mov	r0, r1
{
    b156:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    b158:	4798      	blx	r3
    b15a:	4602      	mov	r2, r0
    b15c:	f04f 0320 	mov.w	r3, #32
    b160:	f3ef 8611 	mrs	r6, BASEPRI
    b164:	f383 8812 	msr	BASEPRI_MAX, r3
    b168:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    b16c:	782b      	ldrb	r3, [r5, #0]
    b16e:	f043 0301 	orr.w	r3, r3, #1
    b172:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    b174:	6861      	ldr	r1, [r4, #4]
    b176:	4620      	mov	r0, r4
    b178:	f7ff fec3 	bl	af02 <idx_inc>
    b17c:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    b17e:	4620      	mov	r0, r4
    b180:	f7ff fee3 	bl	af4a <max_utilization_update>
	__asm__ volatile(
    b184:	f386 8811 	msr	BASEPRI, r6
    b188:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    b18c:	bd70      	pop	{r4, r5, r6, pc}

0000b18e <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    b18e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b192:	4604      	mov	r4, r0
	__asm__ volatile(
    b194:	f04f 0320 	mov.w	r3, #32
    b198:	f3ef 8611 	mrs	r6, BASEPRI
    b19c:	f383 8812 	msr	BASEPRI_MAX, r3
    b1a0:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    b1a4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
    b1a8:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    b1aa:	bf88      	it	hi
    b1ac:	6a23      	ldrhi	r3, [r4, #32]
    b1ae:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    b1b0:	b1f3      	cbz	r3, b1f0 <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
    b1b2:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
    b1b4:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
    b1b8:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
    b1bc:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
    b1c0:	d016      	beq.n	b1f0 <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
    b1c2:	2b02      	cmp	r3, #2
    b1c4:	d103      	bne.n	b1ce <mpsc_pbuf_claim+0x40>
		return item->skip.len;
    b1c6:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    b1ca:	08ad      	lsrs	r5, r5, #2
    b1cc:	d115      	bne.n	b1fa <mpsc_pbuf_claim+0x6c>
    b1ce:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
    b1d0:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
    b1d2:	d50f      	bpl.n	b1f4 <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
    b1d4:	f042 0202 	orr.w	r2, r2, #2
    b1d8:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
    b1dc:	4640      	mov	r0, r8
    b1de:	4798      	blx	r3
    b1e0:	4639      	mov	r1, r7
    b1e2:	4602      	mov	r2, r0
    b1e4:	4620      	mov	r0, r4
    b1e6:	f7ff fe8c 	bl	af02 <idx_inc>
		cont = false;
    b1ea:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
    b1ec:	60a0      	str	r0, [r4, #8]
    b1ee:	e011      	b.n	b214 <mpsc_pbuf_claim+0x86>
			item = NULL;
    b1f0:	4698      	mov	r8, r3
    b1f2:	e00f      	b.n	b214 <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
    b1f4:	4640      	mov	r0, r8
    b1f6:	4798      	blx	r3
    b1f8:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    b1fa:	68a1      	ldr	r1, [r4, #8]
    b1fc:	462a      	mov	r2, r5
    b1fe:	4620      	mov	r0, r4
    b200:	f7ff fe7f 	bl	af02 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
    b204:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    b206:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    b208:	462a      	mov	r2, r5
    b20a:	4620      	mov	r0, r4
    b20c:	f7ff fe79 	bl	af02 <idx_inc>
				cont = true;
    b210:	2301      	movs	r3, #1
				buffer->rd_idx =
    b212:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    b214:	f386 8811 	msr	BASEPRI, r6
    b218:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    b21c:	2b00      	cmp	r3, #0
    b21e:	d1b9      	bne.n	b194 <mpsc_pbuf_claim+0x6>

	return item;
}
    b220:	4640      	mov	r0, r8
    b222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b226 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    b226:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    b228:	6983      	ldr	r3, [r0, #24]
{
    b22a:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    b22c:	4608      	mov	r0, r1
{
    b22e:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    b230:	4798      	blx	r3
    b232:	4602      	mov	r2, r0
	__asm__ volatile(
    b234:	f04f 0320 	mov.w	r3, #32
    b238:	f3ef 8611 	mrs	r6, BASEPRI
    b23c:	f383 8812 	msr	BASEPRI_MAX, r3
    b240:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    b244:	782b      	ldrb	r3, [r5, #0]
    b246:	f36f 0300 	bfc	r3, #0, #1
    b24a:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    b24c:	6923      	ldr	r3, [r4, #16]
    b24e:	079b      	lsls	r3, r3, #30
    b250:	d505      	bpl.n	b25e <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    b252:	68e1      	ldr	r1, [r4, #12]
    b254:	69e3      	ldr	r3, [r4, #28]
    b256:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    b25a:	429d      	cmp	r5, r3
    b25c:	d112      	bne.n	b284 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
    b25e:	782b      	ldrb	r3, [r5, #0]
    b260:	f36f 0341 	bfc	r3, #1, #1
    b264:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    b266:	68e1      	ldr	r1, [r4, #12]
    b268:	4620      	mov	r0, r4
    b26a:	f7ff fe4a 	bl	af02 <idx_inc>
    b26e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    b270:	f386 8811 	msr	BASEPRI, r6
    b274:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    b278:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    b27c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b280:	f7fe bb16 	b.w	98b0 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    b284:	682b      	ldr	r3, [r5, #0]
    b286:	f360 039f 	bfi	r3, r0, #2, #30
    b28a:	602b      	str	r3, [r5, #0]
    b28c:	e7f0      	b.n	b270 <mpsc_pbuf_free+0x4a>

0000b28e <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    b28e:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    b292:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
    b294:	bf8a      	itet	hi
    b296:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    b298:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    b29a:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    b29c:	1e18      	subs	r0, r3, #0
    b29e:	bf18      	it	ne
    b2a0:	2001      	movne	r0, #1
    b2a2:	4770      	bx	lr

0000b2a4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    b2a4:	4770      	bx	lr

0000b2a6 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    b2a6:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    b2a8:	075b      	lsls	r3, r3, #29
    b2aa:	d40b      	bmi.n	b2c4 <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    b2ac:	6803      	ldr	r3, [r0, #0]
    b2ae:	8840      	ldrh	r0, [r0, #2]
    b2b0:	f3c3 2349 	ubfx	r3, r3, #9, #10
    b2b4:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    b2b8:	4418      	add	r0, r3
    b2ba:	3017      	adds	r0, #23
    b2bc:	f020 0007 	bic.w	r0, r0, #7
    b2c0:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
    b2c2:	4770      	bx	lr
	return 0;
    b2c4:	2000      	movs	r0, #0
}
    b2c6:	4770      	bx	lr

0000b2c8 <default_get_timestamp>:
    b2c8:	f000 bb2c 	b.w	b924 <sys_clock_cycle_get_32>

0000b2cc <dummy_timestamp>:
    b2cc:	2000      	movs	r0, #0
    b2ce:	4770      	bx	lr

0000b2d0 <z_log_vprintk>:
{
    b2d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    b2d2:	2300      	movs	r3, #0
    b2d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    b2d8:	e9cd 3300 	strd	r3, r3, [sp]
    b2dc:	461a      	mov	r2, r3
    b2de:	4619      	mov	r1, r3
    b2e0:	4618      	mov	r0, r3
    b2e2:	f7f6 fec3 	bl	206c <z_impl_z_log_msg2_runtime_vcreate>
}
    b2e6:	b005      	add	sp, #20
    b2e8:	f85d fb04 	ldr.w	pc, [sp], #4

0000b2ec <notify_drop>:
	z_log_dropped(true);
    b2ec:	2001      	movs	r0, #1
    b2ee:	f7f6 bb4b 	b.w	1988 <z_log_dropped>

0000b2f2 <get_msg>:
{
    b2f2:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
    b2f4:	f7f6 fbbc 	bl	1a70 <z_log_msg2_claim>
}
    b2f8:	bd08      	pop	{r3, pc}

0000b2fa <z_log_get_tag>:
}
    b2fa:	2000      	movs	r0, #0
    b2fc:	4770      	bx	lr

0000b2fe <buffer_write>:
{
    b2fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b300:	4606      	mov	r6, r0
    b302:	460d      	mov	r5, r1
    b304:	4614      	mov	r4, r2
    b306:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    b308:	4621      	mov	r1, r4
    b30a:	4628      	mov	r0, r5
    b30c:	463a      	mov	r2, r7
    b30e:	47b0      	blx	r6
	} while (len != 0);
    b310:	1a24      	subs	r4, r4, r0
		buf += processed;
    b312:	4405      	add	r5, r0
	} while (len != 0);
    b314:	d1f8      	bne.n	b308 <buffer_write+0xa>
}
    b316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b318 <log_output_flush>:
		     output->control_block->offset,
    b318:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    b31a:	6881      	ldr	r1, [r0, #8]
{
    b31c:	b510      	push	{r4, lr}
    b31e:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    b320:	e9d2 2300 	ldrd	r2, r3, [r2]
    b324:	6800      	ldr	r0, [r0, #0]
    b326:	f7ff ffea 	bl	b2fe <buffer_write>
	output->control_block->offset = 0;
    b32a:	6863      	ldr	r3, [r4, #4]
    b32c:	2200      	movs	r2, #0
    b32e:	601a      	str	r2, [r3, #0]
}
    b330:	bd10      	pop	{r4, pc}

0000b332 <out_func>:
{
    b332:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    b334:	684b      	ldr	r3, [r1, #4]
    b336:	681a      	ldr	r2, [r3, #0]
    b338:	68cb      	ldr	r3, [r1, #12]
    b33a:	429a      	cmp	r2, r3
{
    b33c:	4605      	mov	r5, r0
    b33e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    b340:	d102      	bne.n	b348 <out_func+0x16>
		log_output_flush(out_ctx);
    b342:	4608      	mov	r0, r1
    b344:	f7ff ffe8 	bl	b318 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    b348:	6863      	ldr	r3, [r4, #4]
    b34a:	f3bf 8f5b 	dmb	ish
    b34e:	e853 2f00 	ldrex	r2, [r3]
    b352:	1c51      	adds	r1, r2, #1
    b354:	e843 1000 	strex	r0, r1, [r3]
    b358:	2800      	cmp	r0, #0
    b35a:	d1f8      	bne.n	b34e <out_func+0x1c>
    b35c:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    b360:	68a3      	ldr	r3, [r4, #8]
    b362:	549d      	strb	r5, [r3, r2]
}
    b364:	2000      	movs	r0, #0
    b366:	bd38      	pop	{r3, r4, r5, pc}

0000b368 <cr_out_func>:
{
    b368:	b538      	push	{r3, r4, r5, lr}
    b36a:	4605      	mov	r5, r0
    b36c:	460c      	mov	r4, r1
	out_func(c, ctx);
    b36e:	f7ff ffe0 	bl	b332 <out_func>
	if (c == '\n') {
    b372:	2d0a      	cmp	r5, #10
    b374:	d103      	bne.n	b37e <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    b376:	4621      	mov	r1, r4
    b378:	200d      	movs	r0, #13
    b37a:	f7ff ffda 	bl	b332 <out_func>
}
    b37e:	2000      	movs	r0, #0
    b380:	bd38      	pop	{r3, r4, r5, pc}

0000b382 <z_log_msg2_finalize>:
{
    b382:	b570      	push	{r4, r5, r6, lr}
    b384:	460e      	mov	r6, r1
    b386:	4615      	mov	r5, r2
    b388:	4619      	mov	r1, r3
	if (!msg) {
    b38a:	4604      	mov	r4, r0
    b38c:	b918      	cbnz	r0, b396 <z_log_msg2_finalize+0x14>
}
    b38e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    b392:	f7f6 baf9 	b.w	1988 <z_log_dropped>
	if (data) {
    b396:	b143      	cbz	r3, b3aa <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
    b398:	f100 0310 	add.w	r3, r0, #16
    b39c:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    b3a0:	4418      	add	r0, r3
    b3a2:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    b3a6:	f000 f8cc 	bl	b542 <memcpy>
	msg->hdr.source = source;
    b3aa:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    b3ae:	4620      	mov	r0, r4
}
    b3b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    b3b4:	f7f6 bc1e 	b.w	1bf4 <z_log_msg2_commit>

0000b3b8 <z_impl_z_log_msg2_static_create>:
{
    b3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    b3bc:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    b3c0:	f3c1 2649 	ubfx	r6, r1, #9, #10
    b3c4:	b089      	sub	sp, #36	; 0x24
    b3c6:	4681      	mov	r9, r0
    b3c8:	460d      	mov	r5, r1
    b3ca:	4690      	mov	r8, r2
    b3cc:	469a      	mov	sl, r3
    b3ce:	3417      	adds	r4, #23
	if (inlen > 0) {
    b3d0:	b386      	cbz	r6, b434 <z_impl_z_log_msg2_static_create+0x7c>
		len = cbprintf_package_copy(package, inlen,
    b3d2:	2302      	movs	r3, #2
    b3d4:	9300      	str	r3, [sp, #0]
    b3d6:	f04f 0b04 	mov.w	fp, #4
    b3da:	2300      	movs	r3, #0
    b3dc:	af06      	add	r7, sp, #24
    b3de:	4631      	mov	r1, r6
    b3e0:	461a      	mov	r2, r3
    b3e2:	f8cd b008 	str.w	fp, [sp, #8]
    b3e6:	9701      	str	r7, [sp, #4]
    b3e8:	4640      	mov	r0, r8
    b3ea:	9605      	str	r6, [sp, #20]
    b3ec:	f7f5 fc4c 	bl	c88 <cbprintf_package_copy>
		out_desc.package_len = len;
    b3f0:	f3c0 0309 	ubfx	r3, r0, #0, #10
    b3f4:	1918      	adds	r0, r3, r4
    b3f6:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    b3fa:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    b3fc:	461e      	mov	r6, r3
    b3fe:	9304      	str	r3, [sp, #16]
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    b400:	f7f6 fb2e 	bl	1a60 <z_log_msg2_alloc>
		if (msg) {
    b404:	4604      	mov	r4, r0
    b406:	b150      	cbz	r0, b41e <z_impl_z_log_msg2_static_create+0x66>
			len = cbprintf_package_copy(package, inlen,
    b408:	2302      	movs	r3, #2
    b40a:	9300      	str	r3, [sp, #0]
    b40c:	f100 0210 	add.w	r2, r0, #16
    b410:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    b414:	9b04      	ldr	r3, [sp, #16]
    b416:	9905      	ldr	r1, [sp, #20]
    b418:	4640      	mov	r0, r8
    b41a:	f7f5 fc35 	bl	c88 <cbprintf_package_copy>
	z_log_msg2_finalize(msg, source, out_desc, data);
    b41e:	f366 2552 	bfi	r5, r6, #9, #10
    b422:	4653      	mov	r3, sl
    b424:	462a      	mov	r2, r5
    b426:	4649      	mov	r1, r9
    b428:	4620      	mov	r0, r4
}
    b42a:	b009      	add	sp, #36	; 0x24
    b42c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg2_finalize(msg, source, out_desc, data);
    b430:	f7ff bfa7 	b.w	b382 <z_log_msg2_finalize>
    b434:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    b438:	0880      	lsrs	r0, r0, #2
    b43a:	f7f6 fb11 	bl	1a60 <z_log_msg2_alloc>
    b43e:	4604      	mov	r4, r0
    b440:	e7ed      	b.n	b41e <z_impl_z_log_msg2_static_create+0x66>

0000b442 <usb_write>:
{
    b442:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b446:	4606      	mov	r6, r0
    b448:	460f      	mov	r7, r1
    b44a:	4690      	mov	r8, r2
    b44c:	4699      	mov	r9, r3
    b44e:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    b450:	464b      	mov	r3, r9
    b452:	4642      	mov	r2, r8
    b454:	4639      	mov	r1, r7
    b456:	4630      	mov	r0, r6
    b458:	f7f9 fcce 	bl	4df8 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    b45c:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    b460:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    b462:	d103      	bne.n	b46c <usb_write+0x2a>
	z_impl_k_yield();
    b464:	f7fe fe2a 	bl	a0bc <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    b468:	3d01      	subs	r5, #1
    b46a:	d1f1      	bne.n	b450 <usb_write+0xe>
}
    b46c:	4620      	mov	r0, r4
    b46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000b472 <usb_get_dev_data_by_cfg>:
	return list->head;
    b472:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b474:	b140      	cbz	r0, b488 <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    b476:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
    b47a:	685b      	ldr	r3, [r3, #4]
    b47c:	4299      	cmp	r1, r3
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b47e:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
    b482:	d001      	beq.n	b488 <usb_get_dev_data_by_cfg+0x16>
	return node->next;
    b484:	6840      	ldr	r0, [r0, #4]
    b486:	e7f5      	b.n	b474 <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    b488:	4770      	bx	lr

0000b48a <usb_get_dev_data_by_iface>:
	return list->head;
    b48a:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b48c:	b150      	cbz	r0, b4a4 <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    b48e:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
    b492:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    b494:	685b      	ldr	r3, [r3, #4]
    b496:	789b      	ldrb	r3, [r3, #2]
    b498:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b49a:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
    b49e:	d001      	beq.n	b4a4 <usb_get_dev_data_by_iface+0x1a>
	return node->next;
    b4a0:	6840      	ldr	r0, [r0, #4]
    b4a2:	e7f3      	b.n	b48c <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    b4a4:	4770      	bx	lr

0000b4a6 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    b4a6:	b530      	push	{r4, r5, lr}
	return list->head;
    b4a8:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b4aa:	b188      	cbz	r0, b4d0 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    b4ac:	f850 3c04 	ldr.w	r3, [r0, #-4]
    b4b0:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    b4b2:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    b4b4:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    b4b6:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    b4b8:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
    b4ba:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    b4bc:	b2dc      	uxtb	r4, r3
    b4be:	42a5      	cmp	r5, r4
    b4c0:	d801      	bhi.n	b4c6 <usb_get_dev_data_by_ep+0x20>
	return node->next;
    b4c2:	6840      	ldr	r0, [r0, #4]
    b4c4:	e7f1      	b.n	b4aa <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    b4c6:	3301      	adds	r3, #1
    b4c8:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    b4cc:	428c      	cmp	r4, r1
    b4ce:	d1f5      	bne.n	b4bc <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    b4d0:	bd30      	pop	{r4, r5, pc}

0000b4d2 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    b4d2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    b4d4:	6800      	ldr	r0, [r0, #0]
    b4d6:	f7f7 bf3f 	b.w	3358 <z_arm_fatal_error>

0000b4da <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    b4da:	2100      	movs	r1, #0
    b4dc:	2001      	movs	r0, #1
    b4de:	f7f7 bf3b 	b.w	3358 <z_arm_fatal_error>

0000b4e2 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    b4e2:	b508      	push	{r3, lr}
	handler();
    b4e4:	f7f7 fff6 	bl	34d4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    b4e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    b4ec:	f7f8 b8c8 	b.w	3680 <z_arm_exc_exit>

0000b4f0 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    b4f0:	2300      	movs	r3, #0
    b4f2:	f7ff bf61 	b.w	b3b8 <z_impl_z_log_msg2_static_create>

0000b4f6 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    b4f6:	3901      	subs	r1, #1
    b4f8:	4603      	mov	r3, r0
    b4fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    b4fe:	b90a      	cbnz	r2, b504 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    b500:	701a      	strb	r2, [r3, #0]

	return dest;
}
    b502:	4770      	bx	lr
		*d = *s;
    b504:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    b508:	e7f7      	b.n	b4fa <strcpy+0x4>

0000b50a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    b50a:	4603      	mov	r3, r0
	size_t n = 0;
    b50c:	2000      	movs	r0, #0

	while (*s != '\0') {
    b50e:	5c1a      	ldrb	r2, [r3, r0]
    b510:	b902      	cbnz	r2, b514 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    b512:	4770      	bx	lr
		n++;
    b514:	3001      	adds	r0, #1
    b516:	e7fa      	b.n	b50e <strlen+0x4>

0000b518 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    b518:	4603      	mov	r3, r0
	size_t n = 0;
    b51a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    b51c:	5c1a      	ldrb	r2, [r3, r0]
    b51e:	b10a      	cbz	r2, b524 <strnlen+0xc>
    b520:	4288      	cmp	r0, r1
    b522:	d100      	bne.n	b526 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    b524:	4770      	bx	lr
		n++;
    b526:	3001      	adds	r0, #1
    b528:	e7f8      	b.n	b51c <strnlen+0x4>

0000b52a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    b52a:	1e43      	subs	r3, r0, #1
    b52c:	3901      	subs	r1, #1
    b52e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    b532:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    b536:	4282      	cmp	r2, r0
    b538:	d101      	bne.n	b53e <strcmp+0x14>
    b53a:	2a00      	cmp	r2, #0
    b53c:	d1f7      	bne.n	b52e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    b53e:	1a10      	subs	r0, r2, r0
    b540:	4770      	bx	lr

0000b542 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    b542:	b510      	push	{r4, lr}
    b544:	1e43      	subs	r3, r0, #1
    b546:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    b548:	4291      	cmp	r1, r2
    b54a:	d100      	bne.n	b54e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    b54c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    b54e:	f811 4b01 	ldrb.w	r4, [r1], #1
    b552:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    b556:	e7f7      	b.n	b548 <memcpy+0x6>

0000b558 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    b558:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    b55a:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    b55c:	4603      	mov	r3, r0
	while (n > 0) {
    b55e:	4293      	cmp	r3, r2
    b560:	d100      	bne.n	b564 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    b562:	4770      	bx	lr
		*(d_byte++) = c_byte;
    b564:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    b568:	e7f9      	b.n	b55e <memset+0x6>

0000b56a <_stdout_hook_default>:
}
    b56a:	f04f 30ff 	mov.w	r0, #4294967295
    b56e:	4770      	bx	lr

0000b570 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    b570:	f04f 0220 	mov.w	r2, #32
    b574:	f3ef 8311 	mrs	r3, BASEPRI
    b578:	f382 8812 	msr	BASEPRI_MAX, r2
    b57c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    b580:	f383 8811 	msr	BASEPRI, r3
    b584:	f3bf 8f6f 	isb	sy
}
    b588:	2000      	movs	r0, #0
    b58a:	4770      	bx	lr

0000b58c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    b58c:	2806      	cmp	r0, #6
    b58e:	d108      	bne.n	b5a2 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    b590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b594:	2201      	movs	r2, #1
    b596:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    b59a:	f3bf 8f4f 	dsb	sy
        __WFE();
    b59e:	bf20      	wfe
    while (true)
    b5a0:	e7fd      	b.n	b59e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    b5a2:	4770      	bx	lr

0000b5a4 <pm_state_exit_post_ops>:
    b5a4:	2300      	movs	r3, #0
    b5a6:	f383 8811 	msr	BASEPRI, r3
    b5aa:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    b5ae:	4770      	bx	lr

0000b5b0 <hid_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    b5b0:	7081      	strb	r1, [r0, #2]
}
    b5b2:	4770      	bx	lr

0000b5b4 <usb_hid_device_init>:
static int usb_hid_device_init(const struct device *dev)
{
	LOG_DBG("Init HID Device: dev %p (%s)", dev, dev->name);

	return 0;
}
    b5b4:	2000      	movs	r0, #0
    b5b6:	4770      	bx	lr

0000b5b8 <z_log_msg2_static_create.constprop.0>:
    b5b8:	2300      	movs	r3, #0
    b5ba:	f7ff befd 	b.w	b3b8 <z_impl_z_log_msg2_static_create>

0000b5be <usb_hid_init>:
	usb_set_hid_report_size(cfg, dev_data->report_size);
    b5be:	6903      	ldr	r3, [r0, #16]
    b5c0:	6842      	ldr	r2, [r0, #4]
    b5c2:	685b      	ldr	r3, [r3, #4]
    b5c4:	6852      	ldr	r2, [r2, #4]
	dst[0] = val;
    b5c6:	7413      	strb	r3, [r2, #16]
	dst[1] = val >> 8;
    b5c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    b5cc:	7453      	strb	r3, [r2, #17]
}
    b5ce:	2000      	movs	r0, #0
    b5d0:	4770      	bx	lr

0000b5d2 <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    b5d2:	6903      	ldr	r3, [r0, #16]
{
    b5d4:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
    b5d6:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    b5da:	2300      	movs	r3, #0
    b5dc:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    b5de:	7f83      	ldrb	r3, [r0, #30]
{
    b5e0:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    b5e2:	b113      	cbz	r3, b5ea <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    b5e4:	7a40      	ldrb	r0, [r0, #9]
    b5e6:	f000 fbde 	bl	bda6 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    b5ea:	2301      	movs	r3, #1
    b5ec:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    b5ee:	2300      	movs	r3, #0
    b5f0:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    b5f2:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    b5f4:	77a3      	strb	r3, [r4, #30]
}
    b5f6:	bd10      	pop	{r4, pc}

0000b5f8 <z_log_msg2_static_create.constprop.0>:
    b5f8:	2300      	movs	r3, #0
    b5fa:	f7ff bedd 	b.w	b3b8 <z_impl_z_log_msg2_static_create>

0000b5fe <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    b5fe:	f7fe b869 	b.w	96d4 <z_impl_k_mutex_lock>

0000b602 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    b602:	f7fe b8df 	b.w	97c4 <z_impl_k_mutex_unlock>

0000b606 <usb_dc_ep_read>:
{
    b606:	b570      	push	{r4, r5, r6, lr}
    b608:	4604      	mov	r4, r0
    b60a:	460e      	mov	r6, r1
    b60c:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    b60e:	f7f9 fc91 	bl	4f34 <usb_dc_ep_read_wait>
	if (ret) {
    b612:	b930      	cbnz	r0, b622 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    b614:	b906      	cbnz	r6, b618 <usb_dc_ep_read+0x12>
    b616:	b125      	cbz	r5, b622 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    b618:	4620      	mov	r0, r4
}
    b61a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    b61e:	f7f9 bcef 	b.w	5000 <usb_dc_ep_read_continue>
}
    b622:	bd70      	pop	{r4, r5, r6, pc}

0000b624 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    b624:	6903      	ldr	r3, [r0, #16]
    b626:	b2c9      	uxtb	r1, r1
    b628:	220c      	movs	r2, #12
    b62a:	fb01 3302 	mla	r3, r1, r2, r3
    b62e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    b630:	f000 0007 	and.w	r0, r0, #7
    b634:	4770      	bx	lr

0000b636 <set_on_state>:
	__asm__ volatile(
    b636:	f04f 0320 	mov.w	r3, #32
    b63a:	f3ef 8211 	mrs	r2, BASEPRI
    b63e:	f383 8812 	msr	BASEPRI_MAX, r3
    b642:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    b646:	6803      	ldr	r3, [r0, #0]
    b648:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b64c:	f043 0302 	orr.w	r3, r3, #2
    b650:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    b652:	f382 8811 	msr	BASEPRI, r2
    b656:	f3bf 8f6f 	isb	sy
}
    b65a:	4770      	bx	lr

0000b65c <stop>:
{
    b65c:	4603      	mov	r3, r0
    b65e:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    b660:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    b662:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    b664:	f04f 0420 	mov.w	r4, #32
    b668:	f3ef 8611 	mrs	r6, BASEPRI
    b66c:	f384 8812 	msr	BASEPRI_MAX, r4
    b670:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b674:	250c      	movs	r5, #12
    b676:	fb05 0401 	mla	r4, r5, r1, r0
    b67a:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    b67c:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    b680:	d001      	beq.n	b686 <stop+0x2a>
    b682:	42a2      	cmp	r2, r4
    b684:	d111      	bne.n	b6aa <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    b686:	fb05 0001 	mla	r0, r5, r1, r0
    b68a:	2201      	movs	r2, #1
    b68c:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    b68e:	2000      	movs	r0, #0
	__asm__ volatile(
    b690:	f386 8811 	msr	BASEPRI, r6
    b694:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    b698:	b930      	cbnz	r0, b6a8 <stop+0x4c>
	get_sub_config(dev, type)->stop();
    b69a:	685b      	ldr	r3, [r3, #4]
    b69c:	220c      	movs	r2, #12
    b69e:	fb02 3101 	mla	r1, r2, r1, r3
    b6a2:	684b      	ldr	r3, [r1, #4]
    b6a4:	4798      	blx	r3
	return 0;
    b6a6:	2000      	movs	r0, #0
}
    b6a8:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    b6aa:	f04f 30ff 	mov.w	r0, #4294967295
    b6ae:	e7ef      	b.n	b690 <stop+0x34>

0000b6b0 <api_stop>:
	return stop(dev, subsys, CTX_API);
    b6b0:	2280      	movs	r2, #128	; 0x80
    b6b2:	f7ff bfd3 	b.w	b65c <stop>

0000b6b6 <async_start>:
{
    b6b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b6b8:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    b6ba:	6904      	ldr	r4, [r0, #16]
{
    b6bc:	4605      	mov	r5, r0
    b6be:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    b6c0:	f04f 0020 	mov.w	r0, #32
    b6c4:	f3ef 8c11 	mrs	ip, BASEPRI
    b6c8:	f380 8812 	msr	BASEPRI_MAX, r0
    b6cc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b6d0:	260c      	movs	r6, #12
    b6d2:	fb06 4601 	mla	r6, r6, r1, r4
    b6d6:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    b6d8:	f000 0e07 	and.w	lr, r0, #7
    b6dc:	f1be 0f01 	cmp.w	lr, #1
    b6e0:	d110      	bne.n	b704 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    b6e2:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    b6e4:	2600      	movs	r6, #0
	__asm__ volatile(
    b6e6:	f38c 8811 	msr	BASEPRI, ip
    b6ea:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    b6ee:	b93e      	cbnz	r6, b700 <async_start+0x4a>
	subdata->cb = cb;
    b6f0:	200c      	movs	r0, #12
    b6f2:	4341      	muls	r1, r0
    b6f4:	440c      	add	r4, r1
	subdata->user_data = user_data;
    b6f6:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    b6fa:	686b      	ldr	r3, [r5, #4]
    b6fc:	585b      	ldr	r3, [r3, r1]
    b6fe:	4798      	blx	r3
}
    b700:	4630      	mov	r0, r6
    b702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    b704:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    b708:	4287      	cmp	r7, r0
    b70a:	bf14      	ite	ne
    b70c:	f04f 36ff 	movne.w	r6, #4294967295
    b710:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    b714:	e7e7      	b.n	b6e6 <async_start+0x30>

0000b716 <api_start>:
{
    b716:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    b718:	2480      	movs	r4, #128	; 0x80
    b71a:	9400      	str	r4, [sp, #0]
    b71c:	f7ff ffcb 	bl	b6b6 <async_start>
}
    b720:	b002      	add	sp, #8
    b722:	bd10      	pop	{r4, pc}

0000b724 <onoff_started_callback>:
	return &data->mgr[type];
    b724:	6900      	ldr	r0, [r0, #16]
{
    b726:	b410      	push	{r4}
	return &data->mgr[type];
    b728:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    b72a:	241c      	movs	r4, #28
    b72c:	fb03 0004 	mla	r0, r3, r4, r0
    b730:	2100      	movs	r1, #0
}
    b732:	bc10      	pop	{r4}
	notify(mgr, 0);
    b734:	4710      	bx	r2

0000b736 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    b736:	2000      	movs	r0, #0
    b738:	f000 ba0f 	b.w	bb5a <nrfx_clock_start>

0000b73c <blocking_start_callback>:
{
    b73c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    b73e:	f7fe b8b7 	b.w	98b0 <z_impl_k_sem_give>

0000b742 <lfclk_stop>:
{
    b742:	b508      	push	{r3, lr}
		z_nrf_clock_calibration_lfclk_stopped();
    b744:	f7f9 ff1c 	bl	5580 <z_nrf_clock_calibration_lfclk_stopped>
}
    b748:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    b74c:	2000      	movs	r0, #0
    b74e:	f000 ba3c 	b.w	bbca <nrfx_clock_stop>

0000b752 <timeout_handler>:
	start_cal_process();
    b752:	f7f9 be51 	b.w	53f8 <start_cal_process>

0000b756 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b756:	6843      	ldr	r3, [r0, #4]
    b758:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    b75a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    b75e:	600b      	str	r3, [r1, #0]
}
    b760:	2000      	movs	r0, #0
    b762:	4770      	bx	lr

0000b764 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b764:	6843      	ldr	r3, [r0, #4]
    b766:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    b768:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    b76c:	4042      	eors	r2, r0
    b76e:	400a      	ands	r2, r1
    b770:	4042      	eors	r2, r0
    p_reg->OUT = value;
    b772:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    b776:	2000      	movs	r0, #0
    b778:	4770      	bx	lr

0000b77a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b77a:	6843      	ldr	r3, [r0, #4]
    b77c:	685b      	ldr	r3, [r3, #4]
}
    b77e:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    b780:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    b784:	4770      	bx	lr

0000b786 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b786:	6843      	ldr	r3, [r0, #4]
    b788:	685b      	ldr	r3, [r3, #4]
}
    b78a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    b78c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    b790:	4770      	bx	lr

0000b792 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b792:	6843      	ldr	r3, [r0, #4]
    b794:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    b796:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    b79a:	404b      	eors	r3, r1
    p_reg->OUT = value;
    b79c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    b7a0:	2000      	movs	r0, #0
    b7a2:	4770      	bx	lr

0000b7a4 <gpio_nrfx_manage_callback>:
	return port->data;
    b7a4:	6903      	ldr	r3, [r0, #16]
	return list->head;
    b7a6:	6858      	ldr	r0, [r3, #4]
{
    b7a8:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    b7aa:	b158      	cbz	r0, b7c4 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b7ac:	2400      	movs	r4, #0
    b7ae:	4281      	cmp	r1, r0
    b7b0:	d112      	bne.n	b7d8 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    b7b2:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    b7b4:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    b7b6:	b954      	cbnz	r4, b7ce <gpio_nrfx_manage_callback+0x2a>
    b7b8:	428d      	cmp	r5, r1
	list->head = node;
    b7ba:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    b7bc:	d100      	bne.n	b7c0 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    b7be:	6098      	str	r0, [r3, #8]
	parent->next = child;
    b7c0:	2000      	movs	r0, #0
    b7c2:	6008      	str	r0, [r1, #0]
	if (set) {
    b7c4:	b96a      	cbnz	r2, b7e2 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    b7c6:	2000      	movs	r0, #0
}
    b7c8:	bd30      	pop	{r4, r5, pc}
    b7ca:	4628      	mov	r0, r5
    b7cc:	e7ef      	b.n	b7ae <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    b7ce:	428d      	cmp	r5, r1
	parent->next = child;
    b7d0:	6020      	str	r0, [r4, #0]
	list->tail = node;
    b7d2:	bf08      	it	eq
    b7d4:	609c      	streq	r4, [r3, #8]
}
    b7d6:	e7f3      	b.n	b7c0 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    b7d8:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b7da:	4604      	mov	r4, r0
    b7dc:	2d00      	cmp	r5, #0
    b7de:	d1f4      	bne.n	b7ca <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    b7e0:	b13a      	cbz	r2, b7f2 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    b7e2:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    b7e4:	685a      	ldr	r2, [r3, #4]
    b7e6:	600a      	str	r2, [r1, #0]
	list->head = node;
    b7e8:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    b7ea:	2800      	cmp	r0, #0
    b7ec:	d1eb      	bne.n	b7c6 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    b7ee:	6099      	str	r1, [r3, #8]
}
    b7f0:	e7ea      	b.n	b7c8 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    b7f2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    b7f6:	e7e7      	b.n	b7c8 <gpio_nrfx_manage_callback+0x24>

0000b7f8 <qdec_nrfx_sample_fetch>:
	if ((chan != SENSOR_CHAN_ALL) && (chan != SENSOR_CHAN_ROTATION)) {
    b7f8:	2939      	cmp	r1, #57	; 0x39
{
    b7fa:	b507      	push	{r0, r1, r2, lr}
	if ((chan != SENSOR_CHAN_ALL) && (chan != SENSOR_CHAN_ROTATION)) {
    b7fc:	d001      	beq.n	b802 <qdec_nrfx_sample_fetch+0xa>
    b7fe:	2922      	cmp	r1, #34	; 0x22
    b800:	d10c      	bne.n	b81c <qdec_nrfx_sample_fetch+0x24>
	nrfx_qdec_accumulators_read(&acc, &accdbl);
    b802:	f10d 0106 	add.w	r1, sp, #6
    b806:	a801      	add	r0, sp, #4
    b808:	f7fc fb20 	bl	7e4c <nrfx_qdec_accumulators_read>
	accumulate(data, acc);
    b80c:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
    b810:	f7fa f888 	bl	5924 <accumulate.constprop.0>
	return 0;
    b814:	2000      	movs	r0, #0
}
    b816:	b003      	add	sp, #12
    b818:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENOTSUP;
    b81c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    b820:	e7f9      	b.n	b816 <qdec_nrfx_sample_fetch+0x1e>

0000b822 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    b822:	b530      	push	{r4, r5, lr}
    b824:	4604      	mov	r4, r0
	while (*count) {
    b826:	6808      	ldr	r0, [r1, #0]
    b828:	b908      	cbnz	r0, b82e <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
    b82a:	6010      	str	r0, [r2, #0]
	return NULL;
    b82c:	e004      	b.n	b838 <spi_context_get_next_buf.constprop.0+0x16>
		if (((*current)->len / dfs) != 0) {
    b82e:	6823      	ldr	r3, [r4, #0]
    b830:	685d      	ldr	r5, [r3, #4]
    b832:	b115      	cbz	r5, b83a <spi_context_get_next_buf.constprop.0+0x18>
			return (*current)->buf;
    b834:	6818      	ldr	r0, [r3, #0]
			*buf_len = (*current)->len / dfs;
    b836:	6015      	str	r5, [r2, #0]
}
    b838:	bd30      	pop	{r4, r5, pc}
		++(*current);
    b83a:	3308      	adds	r3, #8
		--(*count);
    b83c:	3801      	subs	r0, #1
		++(*current);
    b83e:	6023      	str	r3, [r4, #0]
		--(*count);
    b840:	6008      	str	r0, [r1, #0]
    b842:	e7f0      	b.n	b826 <spi_context_get_next_buf.constprop.0+0x4>

0000b844 <z_log_msg2_static_create.constprop.0>:
    b844:	2300      	movs	r3, #0
    b846:	f7ff bdb7 	b.w	b3b8 <z_impl_z_log_msg2_static_create>

0000b84a <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    b84a:	4603      	mov	r3, r0
    b84c:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    b84e:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    b850:	7919      	ldrb	r1, [r3, #4]
    b852:	2301      	movs	r3, #1
    b854:	fa03 f101 	lsl.w	r1, r3, r1
    b858:	6903      	ldr	r3, [r0, #16]
    b85a:	681b      	ldr	r3, [r3, #0]
    b85c:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    b85e:	bf18      	it	ne
    b860:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    b864:	b112      	cbz	r2, b86c <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    b866:	6883      	ldr	r3, [r0, #8]
    b868:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    b86a:	4718      	bx	r3
    b86c:	6883      	ldr	r3, [r0, #8]
    b86e:	691b      	ldr	r3, [r3, #16]
    b870:	e7fb      	b.n	b86a <gpio_pin_set_dt.isra.0+0x20>

0000b872 <_spi_context_cs_control>:
{
    b872:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    b874:	6803      	ldr	r3, [r0, #0]
{
    b876:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    b878:	b1e3      	cbz	r3, b8b4 <_spi_context_cs_control+0x42>
    b87a:	6898      	ldr	r0, [r3, #8]
    b87c:	b1d0      	cbz	r0, b8b4 <_spi_context_cs_control+0x42>
    b87e:	6805      	ldr	r5, [r0, #0]
    b880:	b1c5      	cbz	r5, b8b4 <_spi_context_cs_control+0x42>
		if (on) {
    b882:	b149      	cbz	r1, b898 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    b884:	2101      	movs	r1, #1
    b886:	f7ff ffe0 	bl	b84a <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    b88a:	6823      	ldr	r3, [r4, #0]
    b88c:	689b      	ldr	r3, [r3, #8]
    b88e:	6898      	ldr	r0, [r3, #8]
}
    b890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    b894:	f000 bd70 	b.w	c378 <z_impl_k_busy_wait>
			if (!force_off &&
    b898:	b912      	cbnz	r2, b8a0 <_spi_context_cs_control+0x2e>
    b89a:	889b      	ldrh	r3, [r3, #4]
    b89c:	04db      	lsls	r3, r3, #19
    b89e:	d409      	bmi.n	b8b4 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
    b8a0:	6880      	ldr	r0, [r0, #8]
    b8a2:	f000 fd69 	bl	c378 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    b8a6:	6823      	ldr	r3, [r4, #0]
    b8a8:	2100      	movs	r1, #0
    b8aa:	6898      	ldr	r0, [r3, #8]
}
    b8ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    b8b0:	f7ff bfcb 	b.w	b84a <gpio_pin_set_dt.isra.0>
}
    b8b4:	bd38      	pop	{r3, r4, r5, pc}

0000b8b6 <spi_context_unlock_unconditionally>:
{
    b8b6:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    b8b8:	2201      	movs	r2, #1
    b8ba:	2100      	movs	r1, #0
{
    b8bc:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    b8be:	f7ff ffd8 	bl	b872 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    b8c2:	69a3      	ldr	r3, [r4, #24]
    b8c4:	b933      	cbnz	r3, b8d4 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    b8c6:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    b8c8:	f104 0010 	add.w	r0, r4, #16
}
    b8cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b8d0:	f7fd bfee 	b.w	98b0 <z_impl_k_sem_give>
    b8d4:	bd10      	pop	{r4, pc}

0000b8d6 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = dev->data;
    b8d6:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    b8d8:	6803      	ldr	r3, [r0, #0]
    b8da:	428b      	cmp	r3, r1
{
    b8dc:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    b8de:	d106      	bne.n	b8ee <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    b8e0:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
    b8e4:	b934      	cbnz	r4, b8f4 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    b8e6:	f7ff ffe6 	bl	b8b6 <spi_context_unlock_unconditionally>
	return 0;
    b8ea:	4620      	mov	r0, r4
}
    b8ec:	bd10      	pop	{r4, pc}
		return -EINVAL;
    b8ee:	f06f 0015 	mvn.w	r0, #21
    b8f2:	e7fb      	b.n	b8ec <spi_nrfx_release+0x16>
		return -EBUSY;
    b8f4:	f06f 000f 	mvn.w	r0, #15
    b8f8:	e7f8      	b.n	b8ec <spi_nrfx_release+0x16>

0000b8fa <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    b8fa:	b513      	push	{r0, r1, r4, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    b8fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b900:	2908      	cmp	r1, #8
    b902:	6e13      	ldr	r3, [r2, #96]	; 0x60
    b904:	6e52      	ldr	r2, [r2, #100]	; 0x64
	struct nrf_uid dev_id;
	uint32_t deviceid[2];

	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
    b906:	bf28      	it	cs
    b908:	2108      	movcs	r1, #8
    b90a:	ba12      	rev	r2, r2
    b90c:	9200      	str	r2, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    b90e:	ba1b      	rev	r3, r3
    b910:	460c      	mov	r4, r1

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    b912:	460a      	mov	r2, r1
    b914:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    b916:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    b918:	f7ff fe13 	bl	b542 <memcpy>

	return length;
}
    b91c:	4620      	mov	r0, r4
    b91e:	b002      	add	sp, #8
    b920:	bd10      	pop	{r4, pc}

0000b922 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    b922:	4770      	bx	lr

0000b924 <sys_clock_cycle_get_32>:
{
    b924:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    b926:	f7fa fc85 	bl	6234 <z_nrf_rtc_timer_read>
}
    b92a:	bd08      	pop	{r3, pc}

0000b92c <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    b92c:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    b92e:	6843      	ldr	r3, [r0, #4]
    b930:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    b932:	7a03      	ldrb	r3, [r0, #8]
    b934:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    b938:	3b01      	subs	r3, #1
    b93a:	00db      	lsls	r3, r3, #3
    b93c:	6845      	ldr	r5, [r0, #4]
    b93e:	6814      	ldr	r4, [r2, #0]
    b940:	441d      	add	r5, r3
    b942:	42ac      	cmp	r4, r5
    b944:	d902      	bls.n	b94c <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    b946:	f06f 0001 	mvn.w	r0, #1
}
    b94a:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    b94c:	7965      	ldrb	r5, [r4, #5]
    b94e:	428d      	cmp	r5, r1
    b950:	d002      	beq.n	b958 <pinctrl_lookup_state+0x2c>
		(*state)++;
    b952:	3408      	adds	r4, #8
    b954:	6014      	str	r4, [r2, #0]
    b956:	e7f1      	b.n	b93c <pinctrl_lookup_state+0x10>
			return 0;
    b958:	2000      	movs	r0, #0
    b95a:	e7f6      	b.n	b94a <pinctrl_lookup_state+0x1e>

0000b95c <nrf_pin_configure.constprop.0>:
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    b95c:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    b960:	2b00      	cmp	r3, #0
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
    b962:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
    b964:	f000 031f 	and.w	r3, r0, #31
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    b968:	bf08      	it	eq
    b96a:	4614      	moveq	r4, r2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    b96c:	f3c0 1281 	ubfx	r2, r0, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    b970:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
    b974:	bf18      	it	ne
    b976:	2100      	movne	r1, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    b978:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
    b97c:	ea42 0201 	orr.w	r2, r2, r1
    b980:	bf18      	it	ne
    b982:	2401      	movne	r4, #1
    reg->PIN_CNF[pin_number] = cnf;
    b984:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    b988:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    b98c:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    b990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    b994:	bd10      	pop	{r4, pc}

0000b996 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    b996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b99a:	4614      	mov	r4, r2
    b99c:	4680      	mov	r8, r0
    b99e:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    b9a2:	2601      	movs	r6, #1
    p_reg->OUTCLR = clr_mask;
    b9a4:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    b9a8:	45a8      	cmp	r8, r5
    b9aa:	d101      	bne.n	b9b0 <pinctrl_configure_pins+0x1a>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    b9ac:	2000      	movs	r0, #0
    b9ae:	e00d      	b.n	b9cc <pinctrl_configure_pins+0x36>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    b9b0:	f8d8 3000 	ldr.w	r3, [r8]
		switch (NRF_GET_FUN(pins[i])) {
    b9b4:	0c1a      	lsrs	r2, r3, #16
    b9b6:	2a1a      	cmp	r2, #26
    b9b8:	d03d      	beq.n	ba36 <pinctrl_configure_pins+0xa0>
    b9ba:	d809      	bhi.n	b9d0 <pinctrl_configure_pins+0x3a>
    b9bc:	2a05      	cmp	r2, #5
    b9be:	d025      	beq.n	ba0c <pinctrl_configure_pins+0x76>
    b9c0:	2a06      	cmp	r2, #6
    b9c2:	d032      	beq.n	ba2a <pinctrl_configure_pins+0x94>
    b9c4:	2a04      	cmp	r2, #4
    b9c6:	d00c      	beq.n	b9e2 <pinctrl_configure_pins+0x4c>
    b9c8:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    b9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (NRF_GET_FUN(pins[i])) {
    b9d0:	2a1b      	cmp	r2, #27
    b9d2:	d035      	beq.n	ba40 <pinctrl_configure_pins+0xaa>
    b9d4:	2a1c      	cmp	r2, #28
    b9d6:	d1f7      	bne.n	b9c8 <pinctrl_configure_pins+0x32>
			NRF_PSEL_QDEC(reg, LED) = NRF_GET_PIN(pins[i]);
    b9d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b9dc:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    b9e0:	e027      	b.n	ba32 <pinctrl_configure_pins+0x9c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    b9e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b9e6:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    b9ea:	f8d8 3000 	ldr.w	r3, [r8]
    b9ee:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    b9f2:	fa06 f303 	lsl.w	r3, r6, r3
    p_reg->OUTCLR = clr_mask;
    b9f6:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    b9fa:	2200      	movs	r2, #0
    b9fc:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b9fe:	f8d8 0000 	ldr.w	r0, [r8]
    ba02:	f7ff ffab 	bl	b95c <nrf_pin_configure.constprop.0>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    ba06:	f108 0804 	add.w	r8, r8, #4
    ba0a:	e7cd      	b.n	b9a8 <pinctrl_configure_pins+0x12>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    ba0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ba10:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    ba14:	f8d8 3000 	ldr.w	r3, [r8]
    ba18:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    ba1c:	fa06 f303 	lsl.w	r3, r6, r3
    p_reg->OUTCLR = clr_mask;
    ba20:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    ba24:	2201      	movs	r2, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    ba26:	4611      	mov	r1, r2
    ba28:	e7e9      	b.n	b9fe <pinctrl_configure_pins+0x68>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    ba2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ba2e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    ba32:	2200      	movs	r2, #0
    ba34:	e7f7      	b.n	ba26 <pinctrl_configure_pins+0x90>
			NRF_PSEL_QDEC(reg, A) = NRF_GET_PIN(pins[i]);
    ba36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ba3a:	f8c4 3520 	str.w	r3, [r4, #1312]	; 0x520
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    ba3e:	e7f8      	b.n	ba32 <pinctrl_configure_pins+0x9c>
			NRF_PSEL_QDEC(reg, B) = NRF_GET_PIN(pins[i]);
    ba40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ba44:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    ba48:	e7f3      	b.n	ba32 <pinctrl_configure_pins+0x9c>

0000ba4a <ESB_SYS_TIMER_IRQHandler>:

	return 1;
}

ISR_DIRECT_DECLARE(ESB_SYS_TIMER_IRQHandler)
    ba4a:	4668      	mov	r0, sp
    ba4c:	f020 0107 	bic.w	r1, r0, #7
    ba50:	468d      	mov	sp, r1
    ba52:	b501      	push	{r0, lr}
{
	ISR_DIRECT_PM();
    ba54:	f7f7 fd30 	bl	34b8 <_arch_isr_direct_pm>
    ba58:	f7f7 fe12 	bl	3680 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ESB_SYS_TIMER_IRQHandler)
    ba5c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    ba60:	4685      	mov	sp, r0
    ba62:	4770      	bx	lr

0000ba64 <k_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    ba64:	f000 bc88 	b.w	c378 <z_impl_k_busy_wait>

0000ba68 <z_log_msg2_static_create.constprop.0>:
    ba68:	2300      	movs	r3, #0
    ba6a:	f7ff bca5 	b.w	b3b8 <z_impl_z_log_msg2_static_create>

0000ba6e <reg_write>:
{
    ba6e:	b570      	push	{r4, r5, r6, lr}
    ba70:	460d      	mov	r5, r1
	err = spi_cs_ctrl(dev_data, true);
    ba72:	2101      	movs	r1, #1
{
    ba74:	4604      	mov	r4, r0
    ba76:	4616      	mov	r6, r2
	err = spi_cs_ctrl(dev_data, true);
    ba78:	f7fa fe9c 	bl	67b4 <spi_cs_ctrl>
	if (err) {
    ba7c:	b930      	cbnz	r0, ba8c <reg_write+0x1e>
    ba7e:	4632      	mov	r2, r6
    ba80:	4629      	mov	r1, r5
    ba82:	4620      	mov	r0, r4
}
    ba84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ba88:	f7fa bebc 	b.w	6804 <reg_write.part.0>
    ba8c:	bd70      	pop	{r4, r5, r6, pc}

0000ba8e <pmw3360_async_init_power_up>:
	return reg_write(dev_data, PMW3360_REG_POWER_UP_RESET, 0x5A);
    ba8e:	225a      	movs	r2, #90	; 0x5a
    ba90:	213a      	movs	r1, #58	; 0x3a
    ba92:	f7ff bfec 	b.w	ba6e <reg_write>

0000ba96 <gpio_pin_interrupt_configure.constprop.0>:
#endif

extern int z_impl_gpio_pin_interrupt_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_interrupt_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
    ba96:	b410      	push	{r4}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    ba98:	6883      	ldr	r3, [r0, #8]
    ba9a:	699c      	ldr	r4, [r3, #24]
    ba9c:	f001 72b0 	and.w	r2, r1, #23068672	; 0x1600000
    baa0:	f001 63c0 	and.w	r3, r1, #100663296	; 0x6000000
    baa4:	46a4      	mov	ip, r4
    baa6:	2114      	movs	r1, #20
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
}
    baa8:	bc10      	pop	{r4}
    baaa:	4760      	bx	ip

0000baac <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    baac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x10)
    bab0:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    bab4:	f1a0 0310 	sub.w	r3, r0, #16
    bab8:	4258      	negs	r0, r3
    baba:	4158      	adcs	r0, r3
    babc:	4770      	bx	lr

0000babe <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    babe:	4700      	bx	r0

0000bac0 <nrfx_busy_wait>:
    bac0:	f000 bc5a 	b.w	c378 <z_impl_k_busy_wait>

0000bac4 <clock_stop>:
{
    bac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    bac6:	4604      	mov	r4, r0
    bac8:	b118      	cbz	r0, bad2 <clock_stop+0xe>
    baca:	2801      	cmp	r0, #1
    bacc:	d024      	beq.n	bb18 <clock_stop+0x54>
}
    bace:	b003      	add	sp, #12
    bad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bad2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bad6:	2202      	movs	r2, #2
    bad8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    badc:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    bae0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    bae4:	2201      	movs	r2, #1
    bae6:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    bae8:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    baea:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    baec:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    baf0:	bf14      	ite	ne
    baf2:	2500      	movne	r5, #0
    baf4:	f10d 0507 	addeq.w	r5, sp, #7
    baf8:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    bafc:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    bb00:	b1ac      	cbz	r4, bb2e <clock_stop+0x6a>
    bb02:	2c01      	cmp	r4, #1
    bb04:	d1e3      	bne.n	bace <clock_stop+0xa>
            if (p_clk_src != NULL)
    bb06:	b125      	cbz	r5, bb12 <clock_stop+0x4e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    bb08:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    bb0c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    bb10:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    bb12:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    bb16:	e012      	b.n	bb3e <clock_stop+0x7a>
    p_reg->INTENCLR = mask;
    bb18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bb1c:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    bb1e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bb22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    bb26:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    bb2a:	6058      	str	r0, [r3, #4]
}
    bb2c:	e7dc      	b.n	bae8 <clock_stop+0x24>
            if (p_clk_src != NULL)
    bb2e:	b125      	cbz	r5, bb3a <clock_stop+0x76>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    bb30:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    bb34:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    bb38:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    bb3a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    bb3e:	03db      	lsls	r3, r3, #15
    bb40:	d5c5      	bpl.n	bace <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    bb42:	b92d      	cbnz	r5, bb50 <clock_stop+0x8c>
    bb44:	2001      	movs	r0, #1
    bb46:	f7ff ffbb 	bl	bac0 <nrfx_busy_wait>
    bb4a:	3f01      	subs	r7, #1
    bb4c:	d1d8      	bne.n	bb00 <clock_stop+0x3c>
    bb4e:	e7be      	b.n	bace <clock_stop+0xa>
    bb50:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bb54:	2b01      	cmp	r3, #1
    bb56:	d0f5      	beq.n	bb44 <clock_stop+0x80>
    bb58:	e7b9      	b.n	bace <clock_stop+0xa>

0000bb5a <nrfx_clock_start>:
{
    bb5a:	b508      	push	{r3, lr}
    switch (domain)
    bb5c:	b110      	cbz	r0, bb64 <nrfx_clock_start+0xa>
    bb5e:	2801      	cmp	r0, #1
    bb60:	d028      	beq.n	bbb4 <nrfx_clock_start+0x5a>
}
    bb62:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    bb64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bb68:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    bb6c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    bb70:	03c9      	lsls	r1, r1, #15
    bb72:	d40b      	bmi.n	bb8c <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    bb74:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    bb78:	07d0      	lsls	r0, r2, #31
    bb7a:	d50c      	bpl.n	bb96 <nrfx_clock_start+0x3c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    bb7c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
    if (!is_correct_clk)
    bb80:	0792      	lsls	r2, r2, #30
    bb82:	d105      	bne.n	bb90 <nrfx_clock_start+0x36>
    p_reg->INTENSET = mask;
    bb84:	2202      	movs	r2, #2
    bb86:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    bb8a:	e7ea      	b.n	bb62 <nrfx_clock_start+0x8>
    if (!is_correct_clk)
    bb8c:	0791      	lsls	r1, r2, #30
    bb8e:	d002      	beq.n	bb96 <nrfx_clock_start+0x3c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    bb90:	2000      	movs	r0, #0
    bb92:	f7ff ff97 	bl	bac4 <clock_stop>
    p_reg->LFCLKSRC = (uint32_t)(source);
    bb96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bb9a:	2200      	movs	r2, #0
    bb9c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bba0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    bba4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    bba8:	2202      	movs	r2, #2
    bbaa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    bbae:	2201      	movs	r2, #1
    bbb0:	609a      	str	r2, [r3, #8]
}
    bbb2:	e7d6      	b.n	bb62 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bbb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bbb8:	2200      	movs	r2, #0
    bbba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    bbbe:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    bbc2:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    bbc6:	6018      	str	r0, [r3, #0]
}
    bbc8:	e7cb      	b.n	bb62 <nrfx_clock_start+0x8>

0000bbca <nrfx_clock_stop>:
    clock_stop(domain);
    bbca:	f7ff bf7b 	b.w	bac4 <clock_stop>

0000bbce <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    bbce:	f000 001f 	and.w	r0, r0, #31
    bbd2:	0080      	lsls	r0, r0, #2
    bbd4:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    bbd8:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    bbdc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    bbe0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    bbe4:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    bbe8:	4770      	bx	lr

0000bbea <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    bbea:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    bbee:	681a      	ldr	r2, [r3, #0]
    bbf0:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bbf2:	bf1f      	itttt	ne
    bbf4:	2200      	movne	r2, #0
    bbf6:	601a      	strne	r2, [r3, #0]
    bbf8:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    bbfa:	2001      	movne	r0, #1
    bbfc:	bf08      	it	eq
    bbfe:	2000      	moveq	r0, #0
}
    bc00:	4770      	bx	lr

0000bc02 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    bc02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bc06:	f44f 7260 	mov.w	r2, #896	; 0x380
    bc0a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    bc0e:	4770      	bx	lr

0000bc10 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    bc10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bc14:	f44f 7260 	mov.w	r2, #896	; 0x380
    bc18:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    bc1c:	4770      	bx	lr

0000bc1e <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    bc1e:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    bc20:	f7fb fff0 	bl	7c04 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    bc24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    bc28:	f7fb bc5a 	b.w	74e0 <nrfx_clock_irq_handler>

0000bc2c <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    bc2c:	1c43      	adds	r3, r0, #1
    bc2e:	d008      	beq.n	bc42 <spim_pin_uninit+0x16>
    *p_pin = pin_number & 0x1F;
    bc30:	f000 001f 	and.w	r0, r0, #31
    reg->PIN_CNF[pin_number] = cnf;
    bc34:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    bc38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    bc3c:	2202      	movs	r2, #2
    bc3e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    bc42:	4770      	bx	lr

0000bc44 <nrf_gpio_pin_write>:
    *p_pin = pin_number & 0x1F;
    bc44:	f000 031f 	and.w	r3, r0, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    bc48:	2001      	movs	r0, #1
    bc4a:	4098      	lsls	r0, r3
    bc4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    if (value == 0)
    bc50:	b911      	cbnz	r1, bc58 <nrf_gpio_pin_write+0x14>
    p_reg->OUTCLR = clr_mask;
    bc52:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
    bc56:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
    bc58:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
    bc5c:	4770      	bx	lr

0000bc5e <set_ss_pin_state>:
{
    bc5e:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    bc60:	7fc0      	ldrb	r0, [r0, #31]
    bc62:	28ff      	cmp	r0, #255	; 0xff
    bc64:	d006      	beq.n	bc74 <set_ss_pin_state+0x16>
                           p_cb->ss_active_high ? active : !active);
    bc66:	7f9b      	ldrb	r3, [r3, #30]
        nrf_gpio_pin_write(p_cb->ss_pin,
    bc68:	079b      	lsls	r3, r3, #30
    bc6a:	bf58      	it	pl
    bc6c:	f081 0101 	eorpl.w	r1, r1, #1
    bc70:	f7ff bfe8 	b.w	bc44 <nrf_gpio_pin_write>
}
    bc74:	4770      	bx	lr

0000bc76 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    bc76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x10)
    bc7a:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    bc7e:	f1a0 0310 	sub.w	r3, r0, #16
    bc82:	4258      	negs	r0, r3
    bc84:	4158      	adcs	r0, r3
    bc86:	4770      	bx	lr

0000bc88 <nrfx_usbd_consumer>:
{
    bc88:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    bc8a:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    bc8c:	680d      	ldr	r5, [r1, #0]
    bc8e:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
    bc90:	bf97      	itett	ls
    bc92:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
    bc96:	2100      	movhi	r1, #0
        size -= data_size;
    bc98:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    bc9a:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
    bc9c:	bf8e      	itee	hi
    bc9e:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
    bca2:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    bca4:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
    bca6:	429a      	cmp	r2, r3
    bca8:	d103      	bne.n	bcb2 <nrfx_usbd_consumer+0x2a>
    bcaa:	1e20      	subs	r0, r4, #0
    bcac:	bf18      	it	ne
    bcae:	2001      	movne	r0, #1
}
    bcb0:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
    bcb2:	2000      	movs	r0, #0
    bcb4:	e7fc      	b.n	bcb0 <nrfx_usbd_consumer+0x28>

0000bcb6 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
    bcb6:	684b      	ldr	r3, [r1, #4]
{
    bcb8:	b510      	push	{r4, lr}
    bcba:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
    bcbc:	680c      	ldr	r4, [r1, #0]
    bcbe:	bf28      	it	cs
    bcc0:	461a      	movcs	r2, r3
    p_next->size = tx_size;
    bcc2:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
    bcc6:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
    bcc8:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    bcca:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    bccc:	441a      	add	r2, r3
}
    bcce:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    bcd0:	600a      	str	r2, [r1, #0]
}
    bcd2:	bf18      	it	ne
    bcd4:	2001      	movne	r0, #1
    bcd6:	bd10      	pop	{r4, pc}

0000bcd8 <nrfx_usbd_feeder_ram_zlp>:
{
    bcd8:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
    bcda:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    bcdc:	680b      	ldr	r3, [r1, #0]
    bcde:	42a2      	cmp	r2, r4
    bce0:	bf28      	it	cs
    bce2:	4622      	movcs	r2, r4
    bce4:	2a00      	cmp	r2, #0
    bce6:	bf14      	ite	ne
    bce8:	461d      	movne	r5, r3
    bcea:	2500      	moveq	r5, #0
    p_next->size = tx_size;
    bcec:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
    bcf0:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
    bcf4:	441a      	add	r2, r3
    p_transfer->size -= tx_size;
    bcf6:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    bcf8:	600a      	str	r2, [r1, #0]
}
    bcfa:	bf14      	ite	ne
    bcfc:	2001      	movne	r0, #1
    bcfe:	2000      	moveq	r0, #0
    bd00:	bd30      	pop	{r4, r5, pc}

0000bd02 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    bd02:	f010 0f80 	tst.w	r0, #128	; 0x80
    bd06:	bf14      	ite	ne
    bd08:	2300      	movne	r3, #0
    bd0a:	2310      	moveq	r3, #16
    bd0c:	f000 000f 	and.w	r0, r0, #15
}
    bd10:	4418      	add	r0, r3
    bd12:	4770      	bx	lr

0000bd14 <ev_started_handler>:
}
    bd14:	4770      	bx	lr

0000bd16 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    bd16:	2087      	movs	r0, #135	; 0x87
    bd18:	f7fc bb68 	b.w	83ec <nrf_usbd_epin_dma_handler>

0000bd1c <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    bd1c:	2086      	movs	r0, #134	; 0x86
    bd1e:	f7fc bb65 	b.w	83ec <nrf_usbd_epin_dma_handler>

0000bd22 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    bd22:	2085      	movs	r0, #133	; 0x85
    bd24:	f7fc bb62 	b.w	83ec <nrf_usbd_epin_dma_handler>

0000bd28 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    bd28:	2084      	movs	r0, #132	; 0x84
    bd2a:	f7fc bb5f 	b.w	83ec <nrf_usbd_epin_dma_handler>

0000bd2e <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    bd2e:	2083      	movs	r0, #131	; 0x83
    bd30:	f7fc bb5c 	b.w	83ec <nrf_usbd_epin_dma_handler>

0000bd34 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    bd34:	2082      	movs	r0, #130	; 0x82
    bd36:	f7fc bb59 	b.w	83ec <nrf_usbd_epin_dma_handler>

0000bd3a <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    bd3a:	2081      	movs	r0, #129	; 0x81
    bd3c:	f7fc bb56 	b.w	83ec <nrf_usbd_epin_dma_handler>

0000bd40 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    bd40:	f7fc bb70 	b.w	8424 <nrf_usbd_ep0in_dma_handler>

0000bd44 <nrfx_usbd_ep_max_packet_size_set>:
{
    bd44:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    bd46:	f7fc fa13 	bl	8170 <ep_state_access>
    p_state->max_packet_size = size;
    bd4a:	8181      	strh	r1, [r0, #12]
}
    bd4c:	bd08      	pop	{r3, pc}

0000bd4e <nrfx_usbd_ep_status_get>:
{
    bd4e:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    bd50:	f7fc fa0e 	bl	8170 <ep_state_access>
	__asm__ volatile(
    bd54:	f04f 0220 	mov.w	r2, #32
    bd58:	f3ef 8311 	mrs	r3, BASEPRI
    bd5c:	f382 8812 	msr	BASEPRI_MAX, r2
    bd60:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    bd64:	6882      	ldr	r2, [r0, #8]
    bd66:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    bd68:	6802      	ldr	r2, [r0, #0]
    bd6a:	b92a      	cbnz	r2, bd78 <nrfx_usbd_ep_status_get+0x2a>
    bd6c:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    bd6e:	f383 8811 	msr	BASEPRI, r3
    bd72:	f3bf 8f6f 	isb	sy
}
    bd76:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    bd78:	2004      	movs	r0, #4
    bd7a:	e7f8      	b.n	bd6e <nrfx_usbd_ep_status_get+0x20>

0000bd7c <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    bd7c:	2007      	movs	r0, #7
    bd7e:	f7fc be31 	b.w	89e4 <nrf_usbd_epout_dma_handler>

0000bd82 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    bd82:	2006      	movs	r0, #6
    bd84:	f7fc be2e 	b.w	89e4 <nrf_usbd_epout_dma_handler>

0000bd88 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    bd88:	2005      	movs	r0, #5
    bd8a:	f7fc be2b 	b.w	89e4 <nrf_usbd_epout_dma_handler>

0000bd8e <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    bd8e:	2004      	movs	r0, #4
    bd90:	f7fc be28 	b.w	89e4 <nrf_usbd_epout_dma_handler>

0000bd94 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    bd94:	2003      	movs	r0, #3
    bd96:	f7fc be25 	b.w	89e4 <nrf_usbd_epout_dma_handler>

0000bd9a <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    bd9a:	2002      	movs	r0, #2
    bd9c:	f7fc be22 	b.w	89e4 <nrf_usbd_epout_dma_handler>

0000bda0 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    bda0:	2001      	movs	r0, #1
    bda2:	f7fc be1f 	b.w	89e4 <nrf_usbd_epout_dma_handler>

0000bda6 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    bda6:	f7fc bf19 	b.w	8bdc <usbd_ep_abort>

0000bdaa <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    bdaa:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    bdac:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    bdae:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    bdb0:	bf9c      	itt	ls
    bdb2:	6880      	ldrls	r0, [r0, #8]
    bdb4:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
    bdb6:	3b01      	subs	r3, #1
    bdb8:	1a98      	subs	r0, r3, r2
}
    bdba:	4770      	bx	lr

0000bdbc <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    bdbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    bdc0:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    bdc4:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    bdc6:	eba9 0804 	sub.w	r8, r9, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    bdca:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    bdcc:	4590      	cmp	r8, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    bdce:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    bdd0:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    bdd2:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    bdd4:	d904      	bls.n	bde0 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    bdd6:	f7ff fbb4 	bl	b542 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
    bdda:	60ec      	str	r4, [r5, #12]
}
    bddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    bde0:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
    bde2:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    bde6:	f7ff fbac 	bl	b542 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    bdea:	6868      	ldr	r0, [r5, #4]
    bdec:	4622      	mov	r2, r4
    bdee:	eb07 0108 	add.w	r1, r7, r8
    bdf2:	e7f0      	b.n	bdd6 <_WriteNoCheck+0x1a>

0000bdf4 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    bdf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    bdf8:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    bdfa:	4606      	mov	r6, r0
    bdfc:	4689      	mov	r9, r1
    bdfe:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    be00:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    be04:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    be06:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    be08:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    be0a:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    be0c:	bf28      	it	cs
    be0e:	18e4      	addcs	r4, r4, r3
    be10:	3c01      	subs	r4, #1
    be12:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    be14:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    be16:	42bc      	cmp	r4, r7
    be18:	bf28      	it	cs
    be1a:	463c      	movcs	r4, r7
    be1c:	4294      	cmp	r4, r2
    be1e:	bf28      	it	cs
    be20:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    be22:	4649      	mov	r1, r9
    be24:	4428      	add	r0, r5
    be26:	4622      	mov	r2, r4
    be28:	f7ff fb8b 	bl	b542 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    be2c:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    be2e:	4425      	add	r5, r4
      WrOff = 0u;
    be30:	42ab      	cmp	r3, r5
    be32:	bf08      	it	eq
    be34:	2500      	moveq	r5, #0
  } while (NumBytes);
    be36:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    be38:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    be3a:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    be3c:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    be3e:	d1e1      	bne.n	be04 <_WriteBlocking+0x10>
}
    be40:	4640      	mov	r0, r8
    be42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000be46 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    be46:	f7fd b8d9 	b.w	8ffc <_DoInit>

0000be4a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    be4a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    be4c:	f7ff fffb 	bl	be46 <SEGGER_RTT_Init>

	return 0;
}
    be50:	2000      	movs	r0, #0
    be52:	bd08      	pop	{r3, pc}

0000be54 <z_device_state_init>:
}
    be54:	4770      	bx	lr

0000be56 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    be56:	b138      	cbz	r0, be68 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    be58:	68c3      	ldr	r3, [r0, #12]
    be5a:	8818      	ldrh	r0, [r3, #0]
    be5c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    be60:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    be64:	4258      	negs	r0, r3
    be66:	4158      	adcs	r0, r3
}
    be68:	4770      	bx	lr

0000be6a <z_early_memset>:
	(void) memset(dst, c, n);
    be6a:	f7ff bb75 	b.w	b558 <memset>

0000be6e <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    be6e:	f7ff bb68 	b.w	b542 <memcpy>

0000be72 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    be72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    be74:	4604      	mov	r4, r0
    be76:	460d      	mov	r5, r1
	__asm__ volatile(
    be78:	f04f 0320 	mov.w	r3, #32
    be7c:	f3ef 8611 	mrs	r6, BASEPRI
    be80:	f383 8812 	msr	BASEPRI_MAX, r3
    be84:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    be88:	6947      	ldr	r7, [r0, #20]
    be8a:	b977      	cbnz	r7, beaa <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    be8c:	f000 f9eb 	bl	c266 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    be90:	b158      	cbz	r0, beaa <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    be92:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    be94:	6142      	str	r2, [r0, #20]
    be96:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    be98:	f000 f974 	bl	c184 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    be9c:	4631      	mov	r1, r6
    be9e:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    bea2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    bea6:	f7fd beff 	b.w	9ca8 <z_reschedule>
	**(char ***) mem = slab->free_list;
    beaa:	682b      	ldr	r3, [r5, #0]
    beac:	6962      	ldr	r2, [r4, #20]
    beae:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    beb0:	682b      	ldr	r3, [r5, #0]
    beb2:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    beb4:	69a3      	ldr	r3, [r4, #24]
    beb6:	3b01      	subs	r3, #1
    beb8:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    beba:	f386 8811 	msr	BASEPRI, r6
    bebe:	f3bf 8f6f 	isb	sy
}
    bec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000bec4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    bec4:	f3ef 8005 	mrs	r0, IPSR
}
    bec8:	3800      	subs	r0, #0
    beca:	bf18      	it	ne
    becc:	2001      	movne	r0, #1
    bece:	4770      	bx	lr

0000bed0 <z_impl_k_thread_name_set>:
}
    bed0:	f06f 0057 	mvn.w	r0, #87	; 0x57
    bed4:	4770      	bx	lr

0000bed6 <k_thread_name_get>:
}
    bed6:	2000      	movs	r0, #0
    bed8:	4770      	bx	lr

0000beda <z_impl_k_thread_start>:
	z_sched_start(thread);
    beda:	f7fd bfdd 	b.w	9e98 <z_sched_start>

0000bede <z_pm_save_idle_exit>:
{
    bede:	b508      	push	{r3, lr}
	pm_system_resume();
    bee0:	f7f7 f904 	bl	30ec <pm_system_resume>
}
    bee4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    bee8:	f7ff bd1b 	b.w	b922 <sys_clock_idle_exit>

0000beec <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    beec:	f990 300e 	ldrsb.w	r3, [r0, #14]
    bef0:	428b      	cmp	r3, r1
    bef2:	d001      	beq.n	bef8 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    bef4:	f7fe b840 	b.w	9f78 <z_set_prio>
}
    bef8:	2000      	movs	r0, #0
    befa:	4770      	bx	lr

0000befc <z_impl_k_mutex_init>:
{
    befc:	4603      	mov	r3, r0
	mutex->owner = NULL;
    befe:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    bf00:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
    bf04:	e9c3 3300 	strd	r3, r3, [r3]
}
    bf08:	4770      	bx	lr

0000bf0a <queue_insert>:
{
    bf0a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bf0e:	4699      	mov	r9, r3
    bf10:	4604      	mov	r4, r0
    bf12:	f89d 3020 	ldrb.w	r3, [sp, #32]
    bf16:	460d      	mov	r5, r1
    bf18:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    bf1a:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
    bf1e:	f04f 0220 	mov.w	r2, #32
    bf22:	f3ef 8611 	mrs	r6, BASEPRI
    bf26:	f382 8812 	msr	BASEPRI_MAX, r2
    bf2a:	f3bf 8f6f 	isb	sy
	if (is_append) {
    bf2e:	b103      	cbz	r3, bf32 <queue_insert+0x28>
	return list->tail;
    bf30:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    bf32:	4638      	mov	r0, r7
    bf34:	f000 f997 	bl	c266 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    bf38:	b158      	cbz	r0, bf52 <queue_insert+0x48>
    bf3a:	2400      	movs	r4, #0
    bf3c:	6784      	str	r4, [r0, #120]	; 0x78
    bf3e:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    bf42:	f000 f91f 	bl	c184 <z_ready_thread>
	z_reschedule(&queue->lock, key);
    bf46:	4638      	mov	r0, r7
    bf48:	4631      	mov	r1, r6
    bf4a:	f7fd fead 	bl	9ca8 <z_reschedule>
	return 0;
    bf4e:	2000      	movs	r0, #0
    bf50:	e00c      	b.n	bf6c <queue_insert+0x62>
	if (alloc) {
    bf52:	f1b9 0f00 	cmp.w	r9, #0
    bf56:	d01c      	beq.n	bf92 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    bf58:	2108      	movs	r1, #8
    bf5a:	f7fe fba5 	bl	a6a8 <z_thread_aligned_alloc>
		if (anode == NULL) {
    bf5e:	b938      	cbnz	r0, bf70 <queue_insert+0x66>
	__asm__ volatile(
    bf60:	f386 8811 	msr	BASEPRI, r6
    bf64:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    bf68:	f06f 000b 	mvn.w	r0, #11
}
    bf6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    bf70:	2301      	movs	r3, #1
		anode->data = data;
    bf72:	f8c0 8004 	str.w	r8, [r0, #4]
    bf76:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    bf78:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    bf7a:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
    bf7e:	b965      	cbnz	r5, bf9a <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    bf80:	6823      	ldr	r3, [r4, #0]
    bf82:	4313      	orrs	r3, r2
    bf84:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    bf86:	6863      	ldr	r3, [r4, #4]
	list->head = node;
    bf88:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    bf8a:	2b00      	cmp	r3, #0
    bf8c:	d1db      	bne.n	bf46 <queue_insert+0x3c>
	list->tail = node;
    bf8e:	6060      	str	r0, [r4, #4]
}
    bf90:	e7d9      	b.n	bf46 <queue_insert+0x3c>
	node->next_and_flags = flags;
    bf92:	f8c8 9000 	str.w	r9, [r8]
}
    bf96:	4640      	mov	r0, r8
    bf98:	e7ee      	b.n	bf78 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    bf9a:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    bf9c:	f033 0303 	bics.w	r3, r3, #3
    bfa0:	d10b      	bne.n	bfba <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
    bfa2:	6002      	str	r2, [r0, #0]
	return list->tail;
    bfa4:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    bfa6:	b912      	cbnz	r2, bfae <queue_insert+0xa4>
	list->head = node;
    bfa8:	e9c4 0000 	strd	r0, r0, [r4]
}
    bfac:	e7cb      	b.n	bf46 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    bfae:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    bfb0:	f003 0303 	and.w	r3, r3, #3
    bfb4:	4303      	orrs	r3, r0
    bfb6:	6013      	str	r3, [r2, #0]
    bfb8:	e7e9      	b.n	bf8e <queue_insert+0x84>
    bfba:	4313      	orrs	r3, r2
    bfbc:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    bfbe:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    bfc0:	f003 0303 	and.w	r3, r3, #3
    bfc4:	4318      	orrs	r0, r3
    bfc6:	6028      	str	r0, [r5, #0]
}
    bfc8:	e7bd      	b.n	bf46 <queue_insert+0x3c>

0000bfca <z_queue_node_peek>:
{
    bfca:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    bfcc:	4604      	mov	r4, r0
    bfce:	b130      	cbz	r0, bfde <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    bfd0:	6802      	ldr	r2, [r0, #0]
    bfd2:	0793      	lsls	r3, r2, #30
    bfd4:	d003      	beq.n	bfde <z_queue_node_peek+0x14>
		ret = anode->data;
    bfd6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    bfd8:	b109      	cbz	r1, bfde <z_queue_node_peek+0x14>
			k_free(anode);
    bfda:	f000 fa25 	bl	c428 <k_free>
}
    bfde:	4620      	mov	r0, r4
    bfe0:	bd10      	pop	{r4, pc}

0000bfe2 <k_queue_append>:
{
    bfe2:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    bfe4:	2301      	movs	r3, #1
    bfe6:	9300      	str	r3, [sp, #0]
    bfe8:	2300      	movs	r3, #0
{
    bfea:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    bfec:	4619      	mov	r1, r3
    bfee:	f7ff ff8c 	bl	bf0a <queue_insert>
}
    bff2:	b003      	add	sp, #12
    bff4:	f85d fb04 	ldr.w	pc, [sp], #4

0000bff8 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    bff8:	b13a      	cbz	r2, c00a <z_impl_k_sem_init+0x12>
    bffa:	428a      	cmp	r2, r1
    bffc:	d305      	bcc.n	c00a <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    bffe:	e9c0 1202 	strd	r1, r2, [r0, #8]
    c002:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    c006:	2000      	movs	r0, #0
    c008:	4770      	bx	lr
		return -EINVAL;
    c00a:	f06f 0015 	mvn.w	r0, #21
}
    c00e:	4770      	bx	lr

0000c010 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    c010:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    c012:	2301      	movs	r3, #1
    c014:	408b      	lsls	r3, r1
    c016:	ea22 0303 	bic.w	r3, r2, r3
    c01a:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    c01c:	fa22 f001 	lsr.w	r0, r2, r1
}
    c020:	f000 0001 	and.w	r0, r0, #1
    c024:	4770      	bx	lr

0000c026 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    c026:	b120      	cbz	r0, c032 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    c028:	2200      	movs	r2, #0
    c02a:	4611      	mov	r1, r2
    c02c:	3088      	adds	r0, #136	; 0x88
    c02e:	f000 b942 	b.w	c2b6 <z_sched_wake>
}
    c032:	4770      	bx	lr

0000c034 <work_timeout>:
{
    c034:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c036:	4604      	mov	r4, r0
	__asm__ volatile(
    c038:	f04f 0320 	mov.w	r3, #32
    c03c:	f3ef 8511 	mrs	r5, BASEPRI
    c040:	f383 8812 	msr	BASEPRI_MAX, r3
    c044:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    c048:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    c04a:	f1a0 0610 	sub.w	r6, r0, #16
    c04e:	2103      	movs	r1, #3
    c050:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
    c052:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    c054:	f7ff ffdc 	bl	c010 <flag_test_and_clear>
    c058:	b128      	cbz	r0, c066 <work_timeout+0x32>
		queue = dw->queue;
    c05a:	69a3      	ldr	r3, [r4, #24]
    c05c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    c05e:	a901      	add	r1, sp, #4
    c060:	4630      	mov	r0, r6
    c062:	f7fd fd1d 	bl	9aa0 <submit_to_queue_locked>
	__asm__ volatile(
    c066:	f385 8811 	msr	BASEPRI, r5
    c06a:	f3bf 8f6f 	isb	sy
}
    c06e:	b002      	add	sp, #8
    c070:	bd70      	pop	{r4, r5, r6, pc}

0000c072 <k_work_init>:
{
    c072:	b538      	push	{r3, r4, r5, lr}
    c074:	4604      	mov	r4, r0
    c076:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    c078:	2210      	movs	r2, #16
    c07a:	2100      	movs	r1, #0
    c07c:	f7ff fa6c 	bl	b558 <memset>
    c080:	6065      	str	r5, [r4, #4]
}
    c082:	bd38      	pop	{r3, r4, r5, pc}

0000c084 <k_work_submit_to_queue>:
{
    c084:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c086:	9001      	str	r0, [sp, #4]
    c088:	4608      	mov	r0, r1
	__asm__ volatile(
    c08a:	f04f 0320 	mov.w	r3, #32
    c08e:	f3ef 8511 	mrs	r5, BASEPRI
    c092:	f383 8812 	msr	BASEPRI_MAX, r3
    c096:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    c09a:	a901      	add	r1, sp, #4
    c09c:	f7fd fd00 	bl	9aa0 <submit_to_queue_locked>
    c0a0:	4604      	mov	r4, r0
	__asm__ volatile(
    c0a2:	f385 8811 	msr	BASEPRI, r5
    c0a6:	f3bf 8f6f 	isb	sy
	if (ret > 0) {
    c0aa:	2800      	cmp	r0, #0
    c0ac:	dd09      	ble.n	c0c2 <k_work_submit_to_queue+0x3e>
	__asm__ volatile(
    c0ae:	f04f 0320 	mov.w	r3, #32
    c0b2:	f3ef 8011 	mrs	r0, BASEPRI
    c0b6:	f383 8812 	msr	BASEPRI_MAX, r3
    c0ba:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    c0be:	f000 f845 	bl	c14c <z_reschedule_irqlock>
}
    c0c2:	4620      	mov	r0, r4
    c0c4:	b003      	add	sp, #12
    c0c6:	bd30      	pop	{r4, r5, pc}

0000c0c8 <k_work_init_delayable>:
{
    c0c8:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
    c0ca:	2230      	movs	r2, #48	; 0x30
{
    c0cc:	4604      	mov	r4, r0
    c0ce:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    c0d0:	2100      	movs	r1, #0
    c0d2:	f7ff fa41 	bl	b558 <memset>
    c0d6:	f44f 7380 	mov.w	r3, #256	; 0x100
    c0da:	6065      	str	r5, [r4, #4]
    c0dc:	60e3      	str	r3, [r4, #12]
}
    c0de:	bd38      	pop	{r3, r4, r5, pc}

0000c0e0 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    c0e0:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    c0e4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    c0e6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    c0e8:	2300      	movs	r3, #0
	node->prev = NULL;
    c0ea:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    c0ee:	4770      	bx	lr

0000c0f0 <unpend_thread_no_timeout>:
{
    c0f0:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    c0f2:	f7ff fff5 	bl	c0e0 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    c0f6:	7b43      	ldrb	r3, [r0, #13]
    c0f8:	f023 0302 	bic.w	r3, r3, #2
    c0fc:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    c0fe:	2300      	movs	r3, #0
    c100:	6083      	str	r3, [r0, #8]
}
    c102:	bd08      	pop	{r3, pc}

0000c104 <z_unpend_thread_no_timeout>:
{
    c104:	b508      	push	{r3, lr}
    c106:	f04f 0320 	mov.w	r3, #32
    c10a:	f3ef 8111 	mrs	r1, BASEPRI
    c10e:	f383 8812 	msr	BASEPRI_MAX, r3
    c112:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    c116:	f7ff ffeb 	bl	c0f0 <unpend_thread_no_timeout>
	__asm__ volatile(
    c11a:	f381 8811 	msr	BASEPRI, r1
    c11e:	f3bf 8f6f 	isb	sy
}
    c122:	bd08      	pop	{r3, pc}

0000c124 <z_unpend_thread>:
{
    c124:	b510      	push	{r4, lr}
	__asm__ volatile(
    c126:	f04f 0320 	mov.w	r3, #32
    c12a:	f3ef 8411 	mrs	r4, BASEPRI
    c12e:	f383 8812 	msr	BASEPRI_MAX, r3
    c132:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    c136:	f7ff ffdb 	bl	c0f0 <unpend_thread_no_timeout>
	__asm__ volatile(
    c13a:	f384 8811 	msr	BASEPRI, r4
    c13e:	f3bf 8f6f 	isb	sy
}
    c142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c146:	3018      	adds	r0, #24
    c148:	f000 b8d2 	b.w	c2f0 <z_abort_timeout>

0000c14c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    c14c:	4603      	mov	r3, r0
    c14e:	b920      	cbnz	r0, c15a <z_reschedule_irqlock+0xe>
    c150:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    c154:	b90a      	cbnz	r2, c15a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    c156:	f7f7 b9d7 	b.w	3508 <arch_swap>
    c15a:	f383 8811 	msr	BASEPRI, r3
    c15e:	f3bf 8f6f 	isb	sy
}
    c162:	4770      	bx	lr

0000c164 <z_reschedule_unlocked>:
	__asm__ volatile(
    c164:	f04f 0320 	mov.w	r3, #32
    c168:	f3ef 8011 	mrs	r0, BASEPRI
    c16c:	f383 8812 	msr	BASEPRI_MAX, r3
    c170:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    c174:	f7ff bfea 	b.w	c14c <z_reschedule_irqlock>

0000c178 <z_priq_dumb_best>:
{
    c178:	4603      	mov	r3, r0
	return list->head == list;
    c17a:	6800      	ldr	r0, [r0, #0]
}
    c17c:	4283      	cmp	r3, r0
    c17e:	bf08      	it	eq
    c180:	2000      	moveq	r0, #0
    c182:	4770      	bx	lr

0000c184 <z_ready_thread>:
{
    c184:	b510      	push	{r4, lr}
    c186:	f04f 0320 	mov.w	r3, #32
    c18a:	f3ef 8411 	mrs	r4, BASEPRI
    c18e:	f383 8812 	msr	BASEPRI_MAX, r3
    c192:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    c196:	f7fd fe49 	bl	9e2c <ready_thread>
	__asm__ volatile(
    c19a:	f384 8811 	msr	BASEPRI, r4
    c19e:	f3bf 8f6f 	isb	sy
}
    c1a2:	bd10      	pop	{r4, pc}

0000c1a4 <z_thread_timeout>:
{
    c1a4:	b510      	push	{r4, lr}
    c1a6:	4601      	mov	r1, r0
	__asm__ volatile(
    c1a8:	f04f 0320 	mov.w	r3, #32
    c1ac:	f3ef 8411 	mrs	r4, BASEPRI
    c1b0:	f383 8812 	msr	BASEPRI_MAX, r3
    c1b4:	f3bf 8f6f 	isb	sy
		if (!killed) {
    c1b8:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    c1bc:	f013 0f28 	tst.w	r3, #40	; 0x28
    c1c0:	d10d      	bne.n	c1de <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    c1c2:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    c1c6:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    c1c8:	b10b      	cbz	r3, c1ce <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    c1ca:	f7ff ff91 	bl	c0f0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    c1ce:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    c1d2:	f023 0314 	bic.w	r3, r3, #20
    c1d6:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    c1da:	f7fd fe27 	bl	9e2c <ready_thread>
	__asm__ volatile(
    c1de:	f384 8811 	msr	BASEPRI, r4
    c1e2:	f3bf 8f6f 	isb	sy
}
    c1e6:	bd10      	pop	{r4, pc}

0000c1e8 <add_to_waitq_locked>:
{
    c1e8:	b538      	push	{r3, r4, r5, lr}
    c1ea:	4604      	mov	r4, r0
    c1ec:	460d      	mov	r5, r1
	unready_thread(thread);
    c1ee:	f7fd fe71 	bl	9ed4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    c1f2:	7b63      	ldrb	r3, [r4, #13]
    c1f4:	f043 0302 	orr.w	r3, r3, #2
    c1f8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    c1fa:	b195      	cbz	r5, c222 <add_to_waitq_locked+0x3a>
    c1fc:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    c1fe:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c200:	429d      	cmp	r5, r3
    c202:	d015      	beq.n	c230 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c204:	b1a3      	cbz	r3, c230 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    c206:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    c20a:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    c20e:	4291      	cmp	r1, r2
    c210:	d008      	beq.n	c224 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    c212:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    c214:	2a00      	cmp	r2, #0
    c216:	dd05      	ble.n	c224 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    c218:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    c21a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    c21e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    c220:	605c      	str	r4, [r3, #4]
}
    c222:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    c224:	686a      	ldr	r2, [r5, #4]
    c226:	4293      	cmp	r3, r2
    c228:	d002      	beq.n	c230 <add_to_waitq_locked+0x48>
    c22a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c22c:	2b00      	cmp	r3, #0
    c22e:	d1ec      	bne.n	c20a <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    c230:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    c232:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    c236:	601c      	str	r4, [r3, #0]
	list->tail = node;
    c238:	606c      	str	r4, [r5, #4]
}
    c23a:	e7f2      	b.n	c222 <add_to_waitq_locked+0x3a>

0000c23c <z_unpend1_no_timeout>:
{
    c23c:	b510      	push	{r4, lr}
	__asm__ volatile(
    c23e:	f04f 0320 	mov.w	r3, #32
    c242:	f3ef 8411 	mrs	r4, BASEPRI
    c246:	f383 8812 	msr	BASEPRI_MAX, r3
    c24a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    c24e:	f7ff ff93 	bl	c178 <z_priq_dumb_best>
		if (thread != NULL) {
    c252:	4601      	mov	r1, r0
    c254:	b108      	cbz	r0, c25a <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    c256:	f7ff ff4b 	bl	c0f0 <unpend_thread_no_timeout>
	__asm__ volatile(
    c25a:	f384 8811 	msr	BASEPRI, r4
    c25e:	f3bf 8f6f 	isb	sy
}
    c262:	4608      	mov	r0, r1
    c264:	bd10      	pop	{r4, pc}

0000c266 <z_unpend_first_thread>:
{
    c266:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c268:	f04f 0320 	mov.w	r3, #32
    c26c:	f3ef 8511 	mrs	r5, BASEPRI
    c270:	f383 8812 	msr	BASEPRI_MAX, r3
    c274:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    c278:	f7ff ff7e 	bl	c178 <z_priq_dumb_best>
		if (thread != NULL) {
    c27c:	4604      	mov	r4, r0
    c27e:	b120      	cbz	r0, c28a <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    c280:	f7ff ff36 	bl	c0f0 <unpend_thread_no_timeout>
    c284:	3018      	adds	r0, #24
    c286:	f000 f833 	bl	c2f0 <z_abort_timeout>
	__asm__ volatile(
    c28a:	f385 8811 	msr	BASEPRI, r5
    c28e:	f3bf 8f6f 	isb	sy
}
    c292:	4620      	mov	r0, r4
    c294:	bd38      	pop	{r3, r4, r5, pc}

0000c296 <z_unpend_all>:
{
    c296:	b538      	push	{r3, r4, r5, lr}
    c298:	4605      	mov	r5, r0
	int need_sched = 0;
    c29a:	2000      	movs	r0, #0
	return list->head == list;
    c29c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c29e:	42a5      	cmp	r5, r4
    c2a0:	d000      	beq.n	c2a4 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    c2a2:	b904      	cbnz	r4, c2a6 <z_unpend_all+0x10>
}
    c2a4:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    c2a6:	4620      	mov	r0, r4
    c2a8:	f7ff ff3c 	bl	c124 <z_unpend_thread>
		z_ready_thread(thread);
    c2ac:	4620      	mov	r0, r4
    c2ae:	f7ff ff69 	bl	c184 <z_ready_thread>
		need_sched = 1;
    c2b2:	2001      	movs	r0, #1
    c2b4:	e7f2      	b.n	c29c <z_unpend_all+0x6>

0000c2b6 <z_sched_wake>:
{
    c2b6:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c2b8:	f04f 0320 	mov.w	r3, #32
    c2bc:	f3ef 8511 	mrs	r5, BASEPRI
    c2c0:	f383 8812 	msr	BASEPRI_MAX, r3
    c2c4:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    c2c8:	f7ff ff56 	bl	c178 <z_priq_dumb_best>
		if (thread != NULL) {
    c2cc:	4604      	mov	r4, r0
    c2ce:	b150      	cbz	r0, c2e6 <z_sched_wake+0x30>
    c2d0:	6781      	str	r1, [r0, #120]	; 0x78
	thread->base.swap_data = data;
    c2d2:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    c2d4:	f7ff ff0c 	bl	c0f0 <unpend_thread_no_timeout>
    c2d8:	3018      	adds	r0, #24
    c2da:	f000 f809 	bl	c2f0 <z_abort_timeout>
			ready_thread(thread);
    c2de:	4620      	mov	r0, r4
    c2e0:	f7fd fda4 	bl	9e2c <ready_thread>
			ret = true;
    c2e4:	2001      	movs	r0, #1
	__asm__ volatile(
    c2e6:	f385 8811 	msr	BASEPRI, r5
    c2ea:	f3bf 8f6f 	isb	sy
}
    c2ee:	bd38      	pop	{r3, r4, r5, pc}

0000c2f0 <z_abort_timeout>:
{
    c2f0:	b510      	push	{r4, lr}
	__asm__ volatile(
    c2f2:	f04f 0220 	mov.w	r2, #32
    c2f6:	f3ef 8411 	mrs	r4, BASEPRI
    c2fa:	f382 8812 	msr	BASEPRI_MAX, r2
    c2fe:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    c302:	6803      	ldr	r3, [r0, #0]
    c304:	b13b      	cbz	r3, c316 <z_abort_timeout+0x26>
			remove_timeout(to);
    c306:	f7fe f82f 	bl	a368 <remove_timeout>
			ret = 0;
    c30a:	2000      	movs	r0, #0
	__asm__ volatile(
    c30c:	f384 8811 	msr	BASEPRI, r4
    c310:	f3bf 8f6f 	isb	sy
}
    c314:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    c316:	f06f 0015 	mvn.w	r0, #21
    c31a:	e7f7      	b.n	c30c <z_abort_timeout+0x1c>

0000c31c <z_get_next_timeout_expiry>:
{
    c31c:	b510      	push	{r4, lr}
	__asm__ volatile(
    c31e:	f04f 0320 	mov.w	r3, #32
    c322:	f3ef 8411 	mrs	r4, BASEPRI
    c326:	f383 8812 	msr	BASEPRI_MAX, r3
    c32a:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    c32e:	f7fd fff5 	bl	a31c <next_timeout>
	__asm__ volatile(
    c332:	f384 8811 	msr	BASEPRI, r4
    c336:	f3bf 8f6f 	isb	sy
}
    c33a:	bd10      	pop	{r4, pc}

0000c33c <z_set_timeout_expiry>:
{
    c33c:	b570      	push	{r4, r5, r6, lr}
    c33e:	4604      	mov	r4, r0
    c340:	460d      	mov	r5, r1
	__asm__ volatile(
    c342:	f04f 0320 	mov.w	r3, #32
    c346:	f3ef 8611 	mrs	r6, BASEPRI
    c34a:	f383 8812 	msr	BASEPRI_MAX, r3
    c34e:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    c352:	f7fd ffe3 	bl	a31c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    c356:	2801      	cmp	r0, #1
    c358:	dd05      	ble.n	c366 <z_set_timeout_expiry+0x2a>
    c35a:	42a0      	cmp	r0, r4
    c35c:	db03      	blt.n	c366 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    c35e:	4629      	mov	r1, r5
    c360:	4620      	mov	r0, r4
    c362:	f7fa f8e3 	bl	652c <sys_clock_set_timeout>
	__asm__ volatile(
    c366:	f386 8811 	msr	BASEPRI, r6
    c36a:	f3bf 8f6f 	isb	sy
}
    c36e:	bd70      	pop	{r4, r5, r6, pc}

0000c370 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    c370:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    c372:	f7fe f8e9 	bl	a548 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    c376:	bd08      	pop	{r3, pc}

0000c378 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    c378:	b108      	cbz	r0, c37e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    c37a:	f7f7 bde7 	b.w	3f4c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    c37e:	4770      	bx	lr

0000c380 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c380:	f1b1 3fff 	cmp.w	r1, #4294967295
    c384:	bf08      	it	eq
    c386:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    c38a:	b538      	push	{r3, r4, r5, lr}
    c38c:	4605      	mov	r5, r0
    c38e:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c390:	d01d      	beq.n	c3ce <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    c392:	ea51 0300 	orrs.w	r3, r1, r0
    c396:	d103      	bne.n	c3a0 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    c398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    c39c:	f7fe b8d4 	b.w	a548 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    c3a0:	f06f 0301 	mvn.w	r3, #1
    c3a4:	1a18      	subs	r0, r3, r0
    c3a6:	f04f 33ff 	mov.w	r3, #4294967295
    c3aa:	eb63 0101 	sbc.w	r1, r3, r1
    c3ae:	2900      	cmp	r1, #0
    c3b0:	da0c      	bge.n	c3cc <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
    c3b2:	f7fe f8c9 	bl	a548 <sys_clock_tick_get>
    c3b6:	2d01      	cmp	r5, #1
    c3b8:	4622      	mov	r2, r4
    c3ba:	f174 0400 	sbcs.w	r4, r4, #0
    c3be:	462b      	mov	r3, r5
    c3c0:	bfbc      	itt	lt
    c3c2:	2301      	movlt	r3, #1
    c3c4:	2200      	movlt	r2, #0
    c3c6:	1818      	adds	r0, r3, r0
    c3c8:	eb41 0102 	adc.w	r1, r1, r2
}
    c3cc:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    c3ce:	f04f 30ff 	mov.w	r0, #4294967295
    c3d2:	4601      	mov	r1, r0
    c3d4:	e7fa      	b.n	c3cc <sys_clock_timeout_end_calc+0x4c>

0000c3d6 <k_timer_init>:
	timer->status = 0U;
    c3d6:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    c3d8:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    c3dc:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    c3e0:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    c3e4:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    c3e8:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    c3ea:	6343      	str	r3, [r0, #52]	; 0x34
}
    c3ec:	4770      	bx	lr

0000c3ee <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    c3ee:	b510      	push	{r4, lr}
    c3f0:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    c3f2:	f7ff ff7d 	bl	c2f0 <z_abort_timeout>

	if (inactive) {
    c3f6:	b9b0      	cbnz	r0, c426 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    c3f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c3fa:	b10b      	cbz	r3, c400 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    c3fc:	4620      	mov	r0, r4
    c3fe:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    c400:	f104 0018 	add.w	r0, r4, #24
    c404:	f7ff ff1a 	bl	c23c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    c408:	b168      	cbz	r0, c426 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    c40a:	f7ff febb 	bl	c184 <z_ready_thread>
	__asm__ volatile(
    c40e:	f04f 0320 	mov.w	r3, #32
    c412:	f3ef 8011 	mrs	r0, BASEPRI
    c416:	f383 8812 	msr	BASEPRI_MAX, r3
    c41a:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    c41e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    c422:	f7ff be93 	b.w	c14c <z_reschedule_irqlock>
    c426:	bd10      	pop	{r4, pc}

0000c428 <k_free>:
	if (ptr != NULL) {
    c428:	b120      	cbz	r0, c434 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    c42a:	1f01      	subs	r1, r0, #4
    c42c:	f850 0c04 	ldr.w	r0, [r0, #-4]
    c430:	f000 b84a 	b.w	c4c8 <k_heap_free>
}
    c434:	4770      	bx	lr

0000c436 <k_heap_init>:
{
    c436:	b410      	push	{r4}
    c438:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    c43c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    c440:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    c442:	f7fe bca3 	b.w	ad8c <sys_heap_init>

0000c446 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    c446:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c44a:	b085      	sub	sp, #20
    c44c:	4606      	mov	r6, r0
    c44e:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    c450:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
    c454:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    c456:	f7ff ff93 	bl	c380 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    c45a:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    c45e:	4605      	mov	r5, r0
    c460:	460f      	mov	r7, r1
    c462:	f04f 0320 	mov.w	r3, #32
    c466:	f3ef 8411 	mrs	r4, BASEPRI
    c46a:	f383 8812 	msr	BASEPRI_MAX, r3
    c46e:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    c472:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    c476:	464a      	mov	r2, r9
    c478:	4641      	mov	r1, r8
    c47a:	4630      	mov	r0, r6
    c47c:	f7fe fc1e 	bl	acbc <sys_heap_aligned_alloc>
    c480:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    c482:	f7fe f861 	bl	a548 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    c486:	9b03      	ldr	r3, [sp, #12]
    c488:	b13b      	cbz	r3, c49a <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
    c48a:	f384 8811 	msr	BASEPRI, r4
    c48e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    c492:	4618      	mov	r0, r3
    c494:	b005      	add	sp, #20
    c496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    c49a:	1a28      	subs	r0, r5, r0
    c49c:	eb67 0101 	sbc.w	r1, r7, r1
    c4a0:	2801      	cmp	r0, #1
    c4a2:	f171 0200 	sbcs.w	r2, r1, #0
    c4a6:	dbf0      	blt.n	c48a <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    c4a8:	e9cd 0100 	strd	r0, r1, [sp]
    c4ac:	465a      	mov	r2, fp
    c4ae:	4621      	mov	r1, r4
    c4b0:	4650      	mov	r0, sl
    c4b2:	f7fd fd4d 	bl	9f50 <z_pend_curr>
	__asm__ volatile(
    c4b6:	f04f 0320 	mov.w	r3, #32
    c4ba:	f3ef 8411 	mrs	r4, BASEPRI
    c4be:	f383 8812 	msr	BASEPRI_MAX, r3
    c4c2:	f3bf 8f6f 	isb	sy
    c4c6:	e7d6      	b.n	c476 <k_heap_aligned_alloc+0x30>

0000c4c8 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    c4c8:	b538      	push	{r3, r4, r5, lr}
    c4ca:	4604      	mov	r4, r0
    c4cc:	f04f 0320 	mov.w	r3, #32
    c4d0:	f3ef 8511 	mrs	r5, BASEPRI
    c4d4:	f383 8812 	msr	BASEPRI_MAX, r3
    c4d8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    c4dc:	f7fe fbb6 	bl	ac4c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    c4e0:	f104 000c 	add.w	r0, r4, #12
    c4e4:	f7ff fed7 	bl	c296 <z_unpend_all>
    c4e8:	b130      	cbz	r0, c4f8 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    c4ea:	4629      	mov	r1, r5
    c4ec:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    c4f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    c4f4:	f7fd bbd8 	b.w	9ca8 <z_reschedule>
	__asm__ volatile(
    c4f8:	f385 8811 	msr	BASEPRI, r5
    c4fc:	f3bf 8f6f 	isb	sy
}
    c500:	bd38      	pop	{r3, r4, r5, pc}

0000c502 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    c502:	4770      	bx	lr

0000c504 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    c504:	f7fa be9a 	b.w	723c <SystemInit>
